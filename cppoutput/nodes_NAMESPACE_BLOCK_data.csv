141733920768,NAMESPACE_BLOCK,<empty>,,<unknown>,<global>,,<global>,,,1
141733920769,NAMESPACE_BLOCK,<empty>,,cli/cmdlinelogger.h,cli/cmdlinelogger.h:<global>,,<global>,,,1
141733920770,NAMESPACE_BLOCK,<empty>,,cli/cmdlineparser.cpp,cli/cmdlineparser.cpp:<global>,,<global>,,,1
141733920771,NAMESPACE_BLOCK,"namespace {
    class XMLErrorMessagesLogger : public ErrorLogger
    {
        void reportOut(const std::string & outmsg, Color /*c*/ = Color::Reset) override
        {
            std::cout << outmsg << std::endl;
        }

        void reportErr(const ErrorMessage &msg) override
        {
            reportOut(msg.toXML());
        }

        void reportProgress(const std::string & /*filename*/, const char /*stage*/[], const std::size_t /*value*/) override
        {}
    };
}",1,cli/cmdlineparser.cpp,<namespace>0,118,<namespace>0,,,4
141733920772,NAMESPACE_BLOCK,<empty>,,cli/cmdlineparser.h,cli/cmdlineparser.h:<global>,,<global>,,,1
141733920773,NAMESPACE_BLOCK,<empty>,,cli/cppcheckexecutor.cpp,cli/cppcheckexecutor.cpp:<global>,,<global>,,,1
141733920774,NAMESPACE_BLOCK,"namespace {
    class SarifReport {
    public:
        void addFinding(ErrorMessage msg) {
            mFindings.push_back(std::move(msg));
        }

        picojson::array serializeRules() const {
            picojson::array ret;
            std::set<std::string> ruleIds;
            for (const auto& finding : mFindings) {
                // github only supports findings with locations
                if (finding.callStack.empty())
                    continue;
                if (ruleIds.insert(finding.id).second) {
                    picojson::object rule;
                    rule[""id""] = picojson::value(finding.id);
                    // rule.shortDescription.text
                    picojson::object shortDescription;
                    shortDescription[""text""] = picojson::value(finding.shortMessage());
                    rule[""shortDescription""] = picojson::value(shortDescription);
                    // rule.fullDescription.text
                    picojson::object full...",1,cli/cppcheckexecutor.cpp,<namespace>0,80,<namespace>0,,,1
141733920775,NAMESPACE_BLOCK,<empty>,,cli/cppcheckexecutor.h,cli/cppcheckexecutor.h:<global>,,<global>,,,1
141733920776,NAMESPACE_BLOCK,<empty>,,cli/executor.cpp,cli/executor.cpp:<global>,,<global>,,,1
141733920777,NAMESPACE_BLOCK,<empty>,,cli/executor.h,cli/executor.h:<global>,,<global>,,,1
141733920778,NAMESPACE_BLOCK,<empty>,,cli/filelister.cpp,cli/filelister.cpp:<global>,,<global>,,,1
141733920779,NAMESPACE_BLOCK,<empty>,,cli/filelister.h,cli/filelister.h:<global>,,<global>,,,1
141733920780,NAMESPACE_BLOCK,<empty>,,cli/main.cpp,cli/main.cpp:<global>,,<global>,,,1
141733920781,NAMESPACE_BLOCK,<empty>,,cli/precompiled.h,cli/precompiled.h:<global>,,<global>,,,1
141733920782,NAMESPACE_BLOCK,<empty>,,cli/processexecutor.cpp,cli/processexecutor.cpp:<global>,,<global>,,,1
141733920783,NAMESPACE_BLOCK,"namespace {
    class PipeWriter : public ErrorLogger {
    public:
        enum PipeSignal : std::uint8_t {REPORT_OUT='1',REPORT_ERROR='2',REPORT_SUPPR_INLINE='3',CHILD_END='5'};

        explicit PipeWriter(int pipe) : mWpipe(pipe) {}

        void reportOut(const std::string &outmsg, Color c) override {
            writeToPipe(REPORT_OUT, static_cast<char>(c) + outmsg);
        }

        void reportErr(const ErrorMessage &msg) override {
            writeToPipe(REPORT_ERROR, msg.serialize());
        }

        void writeSuppr(const SuppressionList &supprs) const {
            for (const auto& suppr : supprs.getSuppressions())
            {
                if (!suppr.isInline)
                    continue;

                writeToPipe(REPORT_SUPPR_INLINE, suppressionToString(suppr));
            }
            // TODO: update suppression states?
        }

        void writeEnd(const std::string& str) const {
            writeToPipe(CHILD_END, str);
        }

    private:
      ...",1,cli/processexecutor.cpp,<namespace>0,78,<namespace>0,,,3
141733920784,NAMESPACE_BLOCK,<empty>,,cli/processexecutor.h,cli/processexecutor.h:<global>,,<global>,,,1
141733920785,NAMESPACE_BLOCK,<empty>,,cli/sehwrapper.cpp,cli/sehwrapper.cpp:<global>,,<global>,,,1
141733920786,NAMESPACE_BLOCK,"namespace {
    const ULONG maxnamelength = 512;
    struct IMAGEHLP_SYMBOL64_EXT : public IMAGEHLP_SYMBOL64 {
        TCHAR nameExt[maxnamelength]; // actually no need to worry about character encoding here
    };
    typedef BOOL (WINAPI *fpStackWalk64)(DWORD, HANDLE, HANDLE, LPSTACKFRAME64, PVOID, PREAD_PROCESS_MEMORY_ROUTINE64, PFUNCTION_TABLE_ACCESS_ROUTINE64, PGET_MODULE_BASE_ROUTINE64, PTRANSLATE_ADDRESS_ROUTINE64);
    fpStackWalk64 pStackWalk64;
    typedef DWORD64 (WINAPI *fpSymGetModuleBase64)(HANDLE, DWORD64);
    fpSymGetModuleBase64 pSymGetModuleBase64;
    typedef BOOL (WINAPI *fpSymGetSymFromAddr64)(HANDLE, DWORD64, PDWORD64, PIMAGEHLP_SYMBOL64);
    fpSymGetSymFromAddr64 pSymGetSymFromAddr64;
    typedef BOOL (WINAPI *fpSymGetLineFromAddr64)(HANDLE, DWORD64, PDWORD, PIMAGEHLP_LINE64);
    fpSymGetLineFromAddr64 pSymGetLineFromAddr64;
    typedef DWORD (WINAPI *fpUnDecorateSymbolName)(const TCHAR*, PTSTR, DWORD, DWORD);
    fpUnDecorateSymbolName pUnDecorateSymbolNam...",1,cli/sehwrapper.cpp,<namespace>0,36,<namespace>0,,,4
141733920787,NAMESPACE_BLOCK,"namespace internal
{
    int filter_seh_exeception(int code, void* ex)
    {
        return filterException(sehOutput, code, static_cast<PEXCEPTION_POINTERS>(ex));
    }
}",1,cli/sehwrapper.cpp,internal,262,internal,,,5
141733920788,NAMESPACE_BLOCK,<empty>,,cli/sehwrapper.h,cli/sehwrapper.h:<global>,,<global>,,,1
141733920789,NAMESPACE_BLOCK,<empty>,,cli/signalhandler.cpp,cli/signalhandler.cpp:<global>,,<global>,,,1
141733920790,NAMESPACE_BLOCK,<empty>,,cli/signalhandler.h,cli/signalhandler.h:<global>,,<global>,,,1
141733920791,NAMESPACE_BLOCK,<empty>,,cli/singleexecutor.cpp,cli/singleexecutor.cpp:<global>,,<global>,,,1
141733920792,NAMESPACE_BLOCK,<empty>,,cli/singleexecutor.h,cli/singleexecutor.h:<global>,,<global>,,,1
141733920793,NAMESPACE_BLOCK,<empty>,,cli/stacktrace.cpp,cli/stacktrace.cpp:<global>,,<global>,,,1
141733920794,NAMESPACE_BLOCK,<empty>,,cli/stacktrace.h,cli/stacktrace.h:<global>,,<global>,,,1
141733920795,NAMESPACE_BLOCK,<empty>,,cli/threadexecutor.cpp,cli/threadexecutor.cpp:<global>,,<global>,,,1
141733920796,NAMESPACE_BLOCK,<empty>,,cli/threadexecutor.h,cli/threadexecutor.h:<global>,,<global>,,,1
141733920797,NAMESPACE_BLOCK,<empty>,,democlient/democlient.cpp,democlient/democlient.cpp:<global>,,<global>,,,1
141733920798,NAMESPACE_BLOCK,<empty>,,externals/picojson/picojson.h,externals/picojson/picojson.h:<global>,,<global>,,,1
141733920799,NAMESPACE_BLOCK,<empty>,,externals/simplecpp/simplecpp.cpp,externals/simplecpp/simplecpp.cpp:<global>,,<global>,,,1
141733920800,NAMESPACE_BLOCK,"namespace simplecpp {
    class Macro;
#if __cplusplus >= 201103L
    using MacroMap = std::unordered_map<TokenString,Macro>;
#else
    typedef std::map<TokenString,Macro> MacroMap;
#endif

    class Macro {
    public:
        explicit Macro(std::vector<std::string> &f) : nameTokDef(nullptr), valueToken(nullptr), endToken(nullptr), files(f), tokenListDefine(f), variadic(false), valueDefinedInCode_(false) {}

        Macro(const Token *tok, std::vector<std::string> &f) : nameTokDef(nullptr), files(f), tokenListDefine(f), valueDefinedInCode_(true) {
            if (sameline(tok->previousSkipComments(), tok))
                throw std::runtime_error(""bad macro syntax"");
            if (tok->op != '#')
                throw std::runtime_error(""bad macro syntax"");
            const Token * const hashtok = tok;
            tok = tok->next;
            if (!tok || tok->str() != DEFINE)
                throw std::runtime_error(""bad macro syntax"");
            tok = tok->next;
            i...",1,externals/simplecpp/simplecpp.cpp,simplecpp,1466,simplecpp,,,110
141733920801,NAMESPACE_BLOCK,"namespace simplecpp {

#ifdef __CYGWIN__
    bool startsWith(const std::string &str, const std::string &s)
    {
        return (str.size() >= s.size() && str.compare(0, s.size(), s) == 0);
    }

    std::string convertCygwinToWindowsPath(const std::string &cygwinPath)
    {
        std::string windowsPath;

        std::string::size_type pos = 0;
        if (cygwinPath.size() >= 11 && startsWith(cygwinPath, ""/cygdrive/"")) {
            const unsigned char driveLetter = cygwinPath[10];
            if (std::isalpha(driveLetter)) {
                if (cygwinPath.size() == 11) {
                    windowsPath = toupper(driveLetter);
                    windowsPath += "":\\\\"";   // volume root directory
                    pos = 11;
                } else if (cygwinPath[11] == '/') {
                    windowsPath = toupper(driveLetter);
                    windowsPath += "":"";
                    pos = 11;
                }
            }
        }

        for (; pos < cygwinPath.size(...",1,externals/simplecpp/simplecpp.cpp,simplecpp,2334,simplecpp,,,111
141733920802,NAMESPACE_BLOCK,"namespace simplecpp {
    /**
     * perform path simplifications for . and ..
     */
    std::string simplifyPath(std::string path)
    {
        if (path.empty())
            return path;

        std::string::size_type pos;

        // replace backslash separators
        std::replace(path.begin(), path.end(), '\\\\', '/');

        const bool unc(path.compare(0,2,""//"") == 0);

        // replace ""//"" with ""/""
        pos = 0;
        while ((pos = path.find(""//"",pos)) != std::string::npos) {
            path.erase(pos,1);
        }

        // remove ""./""
        pos = 0;
        while ((pos = path.find(""./"",pos)) != std::string::npos) {
            if (pos == 0 || path[pos - 1U] == '/')
                path.erase(pos,2);
            else
                pos += 2;
        }

        // remove trailing dot if path ends with ""/.""
        if (endsWith(path,""/.""))
            path.erase(path.size()-1);

        // simplify ""..""
        pos = 1; // don't simplify "".."" if path starts w...",1,externals/simplecpp/simplecpp.cpp,simplecpp,2554,simplecpp,,,123
141733920803,NAMESPACE_BLOCK,<empty>,,externals/simplecpp/simplecpp.h,externals/simplecpp/simplecpp.h:<global>,,<global>,,,1
141733920804,NAMESPACE_BLOCK,<empty>,,externals/tinyxml2/tinyxml2.cpp,externals/tinyxml2/tinyxml2.cpp:<global>,,<global>,,,1
141733920805,NAMESPACE_BLOCK,"namespace tinyxml2
{

struct Entity {
    const char* pattern;
    int length;
    char value;
};

static const int NUM_ENTITIES = 5;
static const Entity entities[NUM_ENTITIES] = {
    { ""quot"", 4,	DOUBLE_QUOTE },
    { ""amp"", 3,		'&'  },
    { ""apos"", 4,	SINGLE_QUOTE },
    { ""lt"",	2, 		'<'	 },
    { ""gt"",	2,		'>'	 }
};


StrPair::~StrPair()
{
    Reset();
}


void StrPair::TransferTo( StrPair* other )
{
    if ( this == other ) {
        return;
    }
    // This in effect implements the assignment operator by ""moving""
    // ownership (as in auto_ptr).

    TIXMLASSERT( other != 0 );
    TIXMLASSERT( other->_flags == 0 );
    TIXMLASSERT( other->_start == 0 );
    TIXMLASSERT( other->_end == 0 );

    other->Reset();

    other->_flags = _flags;
    other->_start = _start;
    other->_end = _end;

    _flags = 0;
    _start = 0;
    _end = 0;
}


void StrPair::Reset()
{
    if ( _flags & NEEDS_DELETE ) {
        delete [] _start;
    }
    _flags = 0;
    _start = 0;
    _end = 0...",1,externals/tinyxml2/tinyxml2.cpp,tinyxml2,138,tinyxml2,,,23
141733920806,NAMESPACE_BLOCK,<empty>,,externals/tinyxml2/tinyxml2.h,externals/tinyxml2/tinyxml2.h:<global>,,<global>,,,1
141733920807,NAMESPACE_BLOCK,<empty>,,gui/aboutdialog.cpp,gui/aboutdialog.cpp:<global>,,<global>,,,1
141733920808,NAMESPACE_BLOCK,<empty>,,gui/aboutdialog.h,gui/aboutdialog.h:<global>,,<global>,,,1
141733920809,NAMESPACE_BLOCK,<empty>,,gui/application.cpp,gui/application.cpp:<global>,,<global>,,,1
141733920810,NAMESPACE_BLOCK,<empty>,,gui/application.h,gui/application.h:<global>,,<global>,,,1
141733920811,NAMESPACE_BLOCK,<empty>,,gui/applicationdialog.cpp,gui/applicationdialog.cpp:<global>,,<global>,,,1
141733920812,NAMESPACE_BLOCK,<empty>,,gui/applicationdialog.h,gui/applicationdialog.h:<global>,,<global>,,,1
141733920813,NAMESPACE_BLOCK,<empty>,,gui/applicationlist.cpp,gui/applicationlist.cpp:<global>,,<global>,,,1
141733920814,NAMESPACE_BLOCK,<empty>,,gui/applicationlist.h,gui/applicationlist.h:<global>,,<global>,,,1
141733920815,NAMESPACE_BLOCK,<empty>,,gui/checkstatistics.cpp,gui/checkstatistics.cpp:<global>,,<global>,,,1
141733920816,NAMESPACE_BLOCK,<empty>,,gui/checkstatistics.h,gui/checkstatistics.h:<global>,,<global>,,,1
141733920817,NAMESPACE_BLOCK,<empty>,,gui/checkthread.cpp,gui/checkthread.cpp:<global>,,<global>,,,1
141733920818,NAMESPACE_BLOCK,<empty>,,gui/checkthread.h,gui/checkthread.h:<global>,,<global>,,,1
141733920819,NAMESPACE_BLOCK,<empty>,,gui/codeeditor.cpp,gui/codeeditor.cpp:<global>,,<global>,,,1
141733920820,NAMESPACE_BLOCK,<empty>,,gui/codeeditor.h,gui/codeeditor.h:<global>,,<global>,,,1
141733920821,NAMESPACE_BLOCK,<empty>,,gui/codeeditorstyle.cpp,gui/codeeditorstyle.cpp:<global>,,<global>,,,1
141733920822,NAMESPACE_BLOCK,<empty>,,gui/codeeditorstyle.h,gui/codeeditorstyle.h:<global>,,<global>,,,1
141733920823,NAMESPACE_BLOCK,<empty>,,gui/codeeditstylecontrols.cpp,gui/codeeditstylecontrols.cpp:<global>,,<global>,,,1
141733920824,NAMESPACE_BLOCK,<empty>,,gui/codeeditstylecontrols.h,gui/codeeditstylecontrols.h:<global>,,<global>,,,1
141733920825,NAMESPACE_BLOCK,<empty>,,gui/codeeditstyledialog.cpp,gui/codeeditstyledialog.cpp:<global>,,<global>,,,1
141733920826,NAMESPACE_BLOCK,<empty>,,gui/codeeditstyledialog.h,gui/codeeditstyledialog.h:<global>,,<global>,,,1
141733920827,NAMESPACE_BLOCK,<empty>,,gui/common.cpp,gui/common.cpp:<global>,,<global>,,,1
141733920828,NAMESPACE_BLOCK,<empty>,,gui/common.h,gui/common.h:<global>,,<global>,,,1
141733920829,NAMESPACE_BLOCK,<empty>,,gui/compliancereportdialog.cpp,gui/compliancereportdialog.cpp:<global>,,<global>,,,1
141733920830,NAMESPACE_BLOCK,<empty>,,gui/compliancereportdialog.h,gui/compliancereportdialog.h:<global>,,<global>,,,1
141733920831,NAMESPACE_BLOCK,<empty>,,gui/cppchecklibrarydata.cpp,gui/cppchecklibrarydata.cpp:<global>,,<global>,,,1
141733920832,NAMESPACE_BLOCK,<empty>,,gui/cppchecklibrarydata.h,gui/cppchecklibrarydata.h:<global>,,<global>,,,1
141733920833,NAMESPACE_BLOCK,<empty>,,gui/csvreport.cpp,gui/csvreport.cpp:<global>,,<global>,,,1
141733920834,NAMESPACE_BLOCK,<empty>,,gui/csvreport.h,gui/csvreport.h:<global>,,<global>,,,1
141733920835,NAMESPACE_BLOCK,<empty>,,gui/erroritem.cpp,gui/erroritem.cpp:<global>,,<global>,,,1
141733920836,NAMESPACE_BLOCK,<empty>,,gui/erroritem.h,gui/erroritem.h:<global>,,<global>,,,1
141733920837,NAMESPACE_BLOCK,<empty>,,gui/filelist.cpp,gui/filelist.cpp:<global>,,<global>,,,1
141733920838,NAMESPACE_BLOCK,<empty>,,gui/filelist.h,gui/filelist.h:<global>,,<global>,,,1
141733920839,NAMESPACE_BLOCK,<empty>,,gui/fileviewdialog.cpp,gui/fileviewdialog.cpp:<global>,,<global>,,,1
141733920840,NAMESPACE_BLOCK,<empty>,,gui/fileviewdialog.h,gui/fileviewdialog.h:<global>,,<global>,,,1
141733920841,NAMESPACE_BLOCK,<empty>,,gui/helpdialog.cpp,gui/helpdialog.cpp:<global>,,<global>,,,1
141733920842,NAMESPACE_BLOCK,<empty>,,gui/helpdialog.h,gui/helpdialog.h:<global>,,<global>,,,1
141733920843,NAMESPACE_BLOCK,<empty>,,gui/libraryaddfunctiondialog.cpp,gui/libraryaddfunctiondialog.cpp:<global>,,<global>,,,1
141733920844,NAMESPACE_BLOCK,<empty>,,gui/libraryaddfunctiondialog.h,gui/libraryaddfunctiondialog.h:<global>,,<global>,,,1
141733920845,NAMESPACE_BLOCK,<empty>,,gui/librarydialog.cpp,gui/librarydialog.cpp:<global>,,<global>,,,1
141733920846,NAMESPACE_BLOCK,"namespace {
    class FunctionListItem : public QListWidgetItem {
    public:
        FunctionListItem(QListWidget *view,
                         CppcheckLibraryData::Function *function,
                         bool selected)
            : QListWidgetItem(view), function(function) {
            setText(function->name);
            setFlags(flags() | Qt::ItemIsEditable);
            setSelected(selected);
        }
        CppcheckLibraryData::Function *function;
    };
}",1,gui/librarydialog.cpp,<namespace>0,50,<namespace>0,,,2
141733920847,NAMESPACE_BLOCK,<empty>,,gui/librarydialog.h,gui/librarydialog.h:<global>,,<global>,,,1
141733920848,NAMESPACE_BLOCK,<empty>,,gui/libraryeditargdialog.cpp,gui/libraryeditargdialog.cpp:<global>,,<global>,,,1
141733920849,NAMESPACE_BLOCK,<empty>,,gui/libraryeditargdialog.h,gui/libraryeditargdialog.h:<global>,,<global>,,,1
141733920850,NAMESPACE_BLOCK,<empty>,,gui/main.cpp,gui/main.cpp:<global>,,<global>,,,1
141733920851,NAMESPACE_BLOCK,<empty>,,gui/mainwindow.cpp,gui/mainwindow.cpp:<global>,,<global>,,,1
141733920852,NAMESPACE_BLOCK,<empty>,,gui/mainwindow.h,gui/mainwindow.h:<global>,,<global>,,,1
141733920853,NAMESPACE_BLOCK,<empty>,,gui/newsuppressiondialog.cpp,gui/newsuppressiondialog.cpp:<global>,,<global>,,,1
141733920854,NAMESPACE_BLOCK,<empty>,,gui/newsuppressiondialog.h,gui/newsuppressiondialog.h:<global>,,<global>,,,1
141733920855,NAMESPACE_BLOCK,<empty>,,gui/platforms.cpp,gui/platforms.cpp:<global>,,<global>,,,1
141733920856,NAMESPACE_BLOCK,<empty>,,gui/platforms.h,gui/platforms.h:<global>,,<global>,,,1
141733920857,NAMESPACE_BLOCK,<empty>,,gui/precompiled.h,gui/precompiled.h:<global>,,<global>,,,1
141733920858,NAMESPACE_BLOCK,<empty>,,gui/precompiled_qmake.h,gui/precompiled_qmake.h:<global>,,<global>,,,1
141733920859,NAMESPACE_BLOCK,<empty>,,gui/printablereport.cpp,gui/printablereport.cpp:<global>,,<global>,,,1
141733920860,NAMESPACE_BLOCK,<empty>,,gui/printablereport.h,gui/printablereport.h:<global>,,<global>,,,1
141733920861,NAMESPACE_BLOCK,<empty>,,gui/projectfile.cpp,gui/projectfile.cpp:<global>,,<global>,,,1
141733920862,NAMESPACE_BLOCK,<empty>,,gui/projectfile.h,gui/projectfile.h:<global>,,<global>,,,1
141733920863,NAMESPACE_BLOCK,<empty>,,gui/projectfiledialog.cpp,gui/projectfiledialog.cpp:<global>,,<global>,,,1
141733920864,NAMESPACE_BLOCK,<empty>,,gui/projectfiledialog.h,gui/projectfiledialog.h:<global>,,<global>,,,1
141733920865,NAMESPACE_BLOCK,<empty>,,gui/report.cpp,gui/report.cpp:<global>,,<global>,,,1
141733920866,NAMESPACE_BLOCK,<empty>,,gui/report.h,gui/report.h:<global>,,<global>,,,1
141733920867,NAMESPACE_BLOCK,<empty>,,gui/resultstree.cpp,gui/resultstree.cpp:<global>,,<global>,,,1
141733920868,NAMESPACE_BLOCK,<empty>,,gui/resultstree.h,gui/resultstree.h:<global>,,<global>,,,1
141733920869,NAMESPACE_BLOCK,<empty>,,gui/resultsview.cpp,gui/resultsview.cpp:<global>,,<global>,,,1
141733920870,NAMESPACE_BLOCK,<empty>,,gui/resultsview.h,gui/resultsview.h:<global>,,<global>,,,1
141733920871,NAMESPACE_BLOCK,<empty>,,gui/scratchpad.cpp,gui/scratchpad.cpp:<global>,,<global>,,,1
141733920872,NAMESPACE_BLOCK,<empty>,,gui/scratchpad.h,gui/scratchpad.h:<global>,,<global>,,,1
141733920873,NAMESPACE_BLOCK,<empty>,,gui/settingsdialog.cpp,gui/settingsdialog.cpp:<global>,,<global>,,,1
141733920874,NAMESPACE_BLOCK,<empty>,,gui/settingsdialog.h,gui/settingsdialog.h:<global>,,<global>,,,1
141733920875,NAMESPACE_BLOCK,<empty>,,gui/showtypes.cpp,gui/showtypes.cpp:<global>,,<global>,,,1
141733920876,NAMESPACE_BLOCK,<empty>,,gui/showtypes.h,gui/showtypes.h:<global>,,<global>,,,1
141733920877,NAMESPACE_BLOCK,<empty>,,gui/statsdialog.cpp,gui/statsdialog.cpp:<global>,,<global>,,,1
141733920878,NAMESPACE_BLOCK,<empty>,,gui/statsdialog.h,gui/statsdialog.h:<global>,,<global>,,,1
141733920879,NAMESPACE_BLOCK,<empty>,,gui/threadhandler.cpp,gui/threadhandler.cpp:<global>,,<global>,,,1
141733920880,NAMESPACE_BLOCK,<empty>,,gui/threadhandler.h,gui/threadhandler.h:<global>,,<global>,,,1
141733920881,NAMESPACE_BLOCK,<empty>,,gui/threadresult.cpp,gui/threadresult.cpp:<global>,,<global>,,,1
141733920882,NAMESPACE_BLOCK,<empty>,,gui/threadresult.h,gui/threadresult.h:<global>,,<global>,,,1
141733920883,NAMESPACE_BLOCK,<empty>,,gui/translationhandler.cpp,gui/translationhandler.cpp:<global>,,<global>,,,1
141733920884,NAMESPACE_BLOCK,<empty>,,gui/translationhandler.h,gui/translationhandler.h:<global>,,<global>,,,1
141733920885,NAMESPACE_BLOCK,<empty>,,gui/txtreport.cpp,gui/txtreport.cpp:<global>,,<global>,,,1
141733920886,NAMESPACE_BLOCK,<empty>,,gui/txtreport.h,gui/txtreport.h:<global>,,<global>,,,1
141733920887,NAMESPACE_BLOCK,<empty>,,gui/xmlreport.cpp,gui/xmlreport.cpp:<global>,,<global>,,,1
141733920888,NAMESPACE_BLOCK,<empty>,,gui/xmlreport.h,gui/xmlreport.h:<global>,,<global>,,,1
141733920889,NAMESPACE_BLOCK,<empty>,,gui/xmlreportv2.cpp,gui/xmlreportv2.cpp:<global>,,<global>,,,1
141733920890,NAMESPACE_BLOCK,<empty>,,gui/xmlreportv2.h,gui/xmlreportv2.h:<global>,,<global>,,,1
141733920891,NAMESPACE_BLOCK,<empty>,,lib/addoninfo.cpp,lib/addoninfo.cpp:<global>,,<global>,,,1
141733920892,NAMESPACE_BLOCK,<empty>,,lib/addoninfo.h,lib/addoninfo.h:<global>,,<global>,,,1
141733920893,NAMESPACE_BLOCK,<empty>,,lib/analyzer.h,lib/analyzer.h:<global>,,<global>,,,1
141733920894,NAMESPACE_BLOCK,<empty>,,lib/analyzerinfo.cpp,lib/analyzerinfo.cpp:<global>,,<global>,,,1
141733920895,NAMESPACE_BLOCK,<empty>,,lib/analyzerinfo.h,lib/analyzerinfo.h:<global>,,<global>,,,1
141733920896,NAMESPACE_BLOCK,<empty>,,lib/astutils.cpp,lib/astutils.cpp:<global>,,<global>,,,1
141733920897,NAMESPACE_BLOCK,"namespace {
    struct ExpressionChangedSimpleFind {
        template<class F>
        const Token* operator()(const Token* start, const Token* end, F f) const
        {
            return findToken(start, end, f);
        }
    };

    struct ExpressionChangedSkipDeadCode {
        const Library& library;
        const std::function<std::vector<MathLib::bigint>(const Token* tok)>* evaluate;
        ExpressionChangedSkipDeadCode(const Library& library,
                                      const std::function<std::vector<MathLib::bigint>(const Token* tok)>& evaluate)
            : library(library), evaluate(&evaluate)
        {}
        template<class F>
        const Token* operator()(const Token* start, const Token* end, F f) const
        {
            return findTokenSkipDeadCode(library, start, end, std::move(f), *evaluate);
        }
    };
}",1,lib/astutils.cpp,<namespace>11,3084,<namespace>11,,,138
141733920898,NAMESPACE_BLOCK,<empty>,,lib/astutils.h,lib/astutils.h:<global>,,<global>,,,1
141733920899,NAMESPACE_BLOCK,<empty>,,lib/calculate.h,lib/calculate.h:<global>,,<global>,,,1
141733920900,NAMESPACE_BLOCK,<empty>,,lib/check.cpp,lib/check.cpp:<global>,,<global>,,,1
141733920901,NAMESPACE_BLOCK,<empty>,,lib/check.h,lib/check.h:<global>,,<global>,,,1
141733920902,NAMESPACE_BLOCK,<empty>,,lib/check64bit.cpp,lib/check64bit.cpp:<global>,,<global>,,,1
141733920903,NAMESPACE_BLOCK,"namespace {
    Check64BitPortability instance;
}",1,lib/check64bit.cpp,<namespace>0,39,<namespace>0,,,3
141733920904,NAMESPACE_BLOCK,<empty>,,lib/check64bit.h,lib/check64bit.h:<global>,,<global>,,,1
141733920905,NAMESPACE_BLOCK,<empty>,,lib/checkassert.cpp,lib/checkassert.cpp:<global>,,<global>,,,1
141733920906,NAMESPACE_BLOCK,"namespace {
    CheckAssert instance;
}",1,lib/checkassert.cpp,<namespace>0,43,<namespace>0,,,3
141733920907,NAMESPACE_BLOCK,<empty>,,lib/checkassert.h,lib/checkassert.h:<global>,,<global>,,,1
141733920908,NAMESPACE_BLOCK,<empty>,,lib/checkautovariables.cpp,lib/checkautovariables.cpp:<global>,,<global>,,,1
141733920909,NAMESPACE_BLOCK,"namespace {
    CheckAutoVariables instance;
}",1,lib/checkautovariables.cpp,<namespace>0,44,<namespace>0,,,1
141733920910,NAMESPACE_BLOCK,<empty>,,lib/checkautovariables.h,lib/checkautovariables.h:<global>,,<global>,,,1
141733920911,NAMESPACE_BLOCK,<empty>,,lib/checkbool.cpp,lib/checkbool.cpp:<global>,,<global>,,,1
141733920912,NAMESPACE_BLOCK,"namespace {
    CheckBool instance;
}",1,lib/checkbool.cpp,<namespace>0,36,<namespace>0,,,1
141733920913,NAMESPACE_BLOCK,<empty>,,lib/checkbool.h,lib/checkbool.h:<global>,,<global>,,,1
141733920914,NAMESPACE_BLOCK,<empty>,,lib/checkbufferoverrun.cpp,lib/checkbufferoverrun.cpp:<global>,,<global>,,,1
141733920915,NAMESPACE_BLOCK,"namespace {
    CheckBufferOverrun instance;
}",1,lib/checkbufferoverrun.cpp,<namespace>0,53,<namespace>0,,,1
141733920916,NAMESPACE_BLOCK,"namespace
#endif
{
    /** data for multifile checking */
    class MyFileInfo : public Check::FileInfo {
    public:
        using Check::FileInfo::FileInfo;
        /** unsafe array index usage */
        std::list<CTU::FileInfo::UnsafeUsage> unsafeArrayIndex;

        /** unsafe pointer arithmetics */
        std::list<CTU::FileInfo::UnsafeUsage> unsafePointerArith;

        /** Convert data into xml string */
        std::string toString() const override
        {
            std::string xml;
            if (!unsafeArrayIndex.empty())
                xml = ""    <array-index>\\n"" + CTU::toString(unsafeArrayIndex) + ""    </array-index>\\n"";
            if (!unsafePointerArith.empty())
                xml += ""    <pointer-arith>\\n"" + CTU::toString(unsafePointerArith) + ""    </pointer-arith>\\n"";
            return xml;
        }
    };
}",1,lib/checkbufferoverrun.cpp,<namespace>9,892,<namespace>9,,,41
141733920917,NAMESPACE_BLOCK,<empty>,,lib/checkbufferoverrun.h,lib/checkbufferoverrun.h:<global>,,<global>,,,1
141733920918,NAMESPACE_BLOCK,<empty>,,lib/checkclass.cpp,lib/checkclass.cpp:<global>,,<global>,,,1
141733920919,NAMESPACE_BLOCK,"namespace {
    CheckClass instance;
}",1,lib/checkclass.cpp,<namespace>0,48,<namespace>0,,,1
141733920920,NAMESPACE_BLOCK,"namespace { // avoid one-definition-rule violation
    struct VarInfo {
        VarInfo(const Variable *_var, const Token *_tok)
            : var(_var), tok(_tok) {}

        const Variable *var;
        const Token *tok;
        std::vector<const Variable*> initArgs;
    };
}",1,lib/checkclass.cpp,<namespace>50,2677,<namespace>50,,,88
141733920921,NAMESPACE_BLOCK,"namespace {
    struct DuplMemberInfo {
        DuplMemberInfo(const Variable* cv, const Variable* pcv, const Type::BaseInfo* pc) : classVar(cv), parentClassVar(pcv), parentClass(pc) {}
        const Variable* classVar;
        const Variable* parentClassVar;
        const Type::BaseInfo* parentClass;
    };
    struct DuplMemberFuncInfo {
        DuplMemberFuncInfo(const Function* cf, const Function* pcf, const Type::BaseInfo* pc) : classFunc(cf), parentClassFunc(pcf), parentClass(pc) {}
        const Function* classFunc;
        const Function* parentClassFunc;
        const Type::BaseInfo* parentClass;
    };
}",1,lib/checkclass.cpp,<namespace>57,3010,<namespace>57,,,99
141733920922,NAMESPACE_BLOCK,"namespace
#endif
{
    /* multifile checking; one definition rule violations */
    class MyFileInfo : public Check::FileInfo {
    public:
        using Check::FileInfo::FileInfo;
        struct NameLoc {
            std::string className;
            std::string fileName;
            int lineNumber;
            int column;
            std::size_t hash;

            bool isSameLocation(const NameLoc& other) const {
                return fileName == other.fileName &&
                       lineNumber == other.lineNumber &&
                       column == other.column;
            }
        };
        std::vector<NameLoc> classDefinitions;

        /** Convert data into xml string */
        std::string toString() const override
        {
            std::string ret;
            for (const NameLoc &nameLoc: classDefinitions) {
                ret += ""<class name=\\"""" + ErrorLogger::toxml(nameLoc.className) +
                       ""\\"" file=\\"""" + ErrorLogger::toxml(nameLoc.fileName) ...",1,lib/checkclass.cpp,<namespace>80,3564,<namespace>80,,,122
141733920923,NAMESPACE_BLOCK,<empty>,,lib/checkclass.h,lib/checkclass.h:<global>,,<global>,,,1
141733920924,NAMESPACE_BLOCK,<empty>,,lib/checkcondition.cpp,lib/checkcondition.cpp:<global>,,<global>,,,1
141733920925,NAMESPACE_BLOCK,"namespace {
    CheckCondition instance;
}",1,lib/checkcondition.cpp,<namespace>0,56,<namespace>0,,,9
141733920926,NAMESPACE_BLOCK,<empty>,,lib/checkcondition.h,lib/checkcondition.h:<global>,,<global>,,,1
141733920927,NAMESPACE_BLOCK,<empty>,,lib/checkers.cpp,lib/checkers.cpp:<global>,,<global>,,,1
141733920928,NAMESPACE_BLOCK,"namespace checkers {
    const std::map<std::string, std::string> allCheckers{
        {""CheckBool::checkIncrementBoolean"",""style""},
        {""CheckBool::checkBitwiseOnBoolean"",""style,inconclusive""},
        {""CheckBool::checkComparisonOfBoolWithInt"",""warning,c++""},
        {""CheckBool::checkComparisonOfFuncReturningBool"",""style,c++""},
        {""CheckBool::checkComparisonOfBoolWithBool"",""style,c++""},
        {""CheckBool::checkAssignBoolToPointer"",""""},
        {""CheckBool::checkComparisonOfBoolExpressionWithInt"",""warning""},
        {""CheckBool::pointerArithBool"",""""},
        {""CheckBool::checkAssignBoolToFloat"",""style,c++""},
        {""CheckBool::returnValueOfFunctionReturningBool"",""style""},
        {""CheckPostfixOperator::postfixOperator"",""performance""},
        {""CheckSizeof::checkSizeofForNumericParameter"",""warning""},
        {""CheckSizeof::checkSizeofForArrayParameter"",""warning""},
        {""CheckSizeof::checkSizeofForPointerSize"",""warning""},
        {""CheckSizeof::sizeofsizeof"",""w...",1,lib/checkers.cpp,checkers,24,checkers,,,1
141733920929,NAMESPACE_BLOCK,<empty>,,lib/checkers.h,lib/checkers.h:<global>,,<global>,,,1
141733920930,NAMESPACE_BLOCK,<empty>,,lib/checkersidmapping.cpp,lib/checkersidmapping.cpp:<global>,,<global>,,,1
141733920931,NAMESPACE_BLOCK,<empty>,,lib/checkersreport.cpp,lib/checkersreport.cpp:<global>,,<global>,,,1
141733920932,NAMESPACE_BLOCK,<empty>,,lib/checkersreport.h,lib/checkersreport.h:<global>,,<global>,,,1
141733920933,NAMESPACE_BLOCK,<empty>,,lib/checkexceptionsafety.cpp,lib/checkexceptionsafety.cpp:<global>,,<global>,,,1
141733920934,NAMESPACE_BLOCK,"namespace {
    CheckExceptionSafety instance;
}",1,lib/checkexceptionsafety.cpp,<namespace>0,38,<namespace>0,,,1
141733920935,NAMESPACE_BLOCK,<empty>,,lib/checkexceptionsafety.h,lib/checkexceptionsafety.h:<global>,,<global>,,,1
141733920936,NAMESPACE_BLOCK,<empty>,,lib/checkfunctions.cpp,lib/checkfunctions.cpp:<global>,,<global>,,,1
141733920937,NAMESPACE_BLOCK,"namespace {
    CheckFunctions instance;
}",1,lib/checkfunctions.cpp,<namespace>0,49,<namespace>0,,,1
141733920938,NAMESPACE_BLOCK,<empty>,,lib/checkfunctions.h,lib/checkfunctions.h:<global>,,<global>,,,1
141733920939,NAMESPACE_BLOCK,<empty>,,lib/checkinternal.cpp,lib/checkinternal.cpp:<global>,,<global>,,,1
141733920940,NAMESPACE_BLOCK,"namespace {
    CheckInternal instance;
}",1,lib/checkinternal.cpp,<namespace>0,36,<namespace>0,,,1
141733920941,NAMESPACE_BLOCK,"namespace {
    const std::set<std::string> knownPatterns = {
        ""%any%""
        , ""%assign%""
        , ""%bool%""
        , ""%char%""
        , ""%comp%""
        , ""%num%""
        , ""%op%""
        , ""%cop%""
        , ""%or%""
        , ""%oror%""
        , ""%str%""
        , ""%type%""
        , ""%name%""
        , ""%var%""
        , ""%varid%""
    };
}",1,lib/checkinternal.cpp,<namespace>1,196,<namespace>1,,,6
141733920942,NAMESPACE_BLOCK,<empty>,,lib/checkinternal.h,lib/checkinternal.h:<global>,,<global>,,,1
141733920943,NAMESPACE_BLOCK,<empty>,,lib/checkio.cpp,lib/checkio.cpp:<global>,,<global>,,,1
141733920944,NAMESPACE_BLOCK,"namespace {
    CheckIO instance;
}",1,lib/checkio.cpp,<namespace>0,49,<namespace>0,,,1
141733920945,NAMESPACE_BLOCK,"namespace {
    struct Filepointer {
        OpenMode mode;
        nonneg int mode_indent{};
        enum class Operation : std::uint8_t {NONE, UNIMPORTANT, READ, WRITE, POSITIONING, OPEN, CLOSE, UNKNOWN_OP} lastOperation = Operation::NONE;
        nonneg int op_indent{};
        enum class AppendMode : std::uint8_t { UNKNOWN_AM, APPEND, APPEND_EX };
        AppendMode append_mode = AppendMode::UNKNOWN_AM;
        std::string filename;
        explicit Filepointer(OpenMode mode_ = OpenMode::UNKNOWN_OM)
            : mode(mode_) {}
    };

    const std::unordered_set<std::string> whitelist = { ""clearerr"", ""feof"", ""ferror"", ""fgetpos"", ""ftell"", ""setbuf"", ""setvbuf"", ""ungetc"", ""ungetwc"" };
}",1,lib/checkio.cpp,<namespace>2,111,<namespace>2,,,22
141733920946,NAMESPACE_BLOCK,"namespace {
    const std::set<std::string> stl_vector = { ""array"", ""vector"" };
    const std::set<std::string> stl_string = { ""string"", ""u16string"", ""u32string"", ""wstring"" };
}",1,lib/checkio.cpp,<namespace>12,1569,<namespace>12,,,39
141733920947,NAMESPACE_BLOCK,<empty>,,lib/checkio.h,lib/checkio.h:<global>,,<global>,,,1
141733920948,NAMESPACE_BLOCK,<empty>,,lib/checkleakautovar.cpp,lib/checkleakautovar.cpp:<global>,,<global>,,,1
141733920949,NAMESPACE_BLOCK,"namespace {
    CheckLeakAutoVar instance;
}",1,lib/checkleakautovar.cpp,<namespace>0,48,<namespace>0,,,1
141733920950,NAMESPACE_BLOCK,<empty>,,lib/checkleakautovar.h,lib/checkleakautovar.h:<global>,,<global>,,,1
141733920951,NAMESPACE_BLOCK,<empty>,,lib/checkmemoryleak.cpp,lib/checkmemoryleak.cpp:<global>,,<global>,,,1
141733920952,NAMESPACE_BLOCK,"namespace {
    CheckMemoryLeakInFunction instance1;
    CheckMemoryLeakInClass instance2;
    CheckMemoryLeakStructMember instance3;
    CheckMemoryLeakNoVar instance4;
}",1,lib/checkmemoryleak.cpp,<namespace>0,40,<namespace>0,,,1
141733920953,NAMESPACE_BLOCK,<empty>,,lib/checkmemoryleak.h,lib/checkmemoryleak.h:<global>,,<global>,,,1
141733920954,NAMESPACE_BLOCK,<empty>,,lib/checknullpointer.cpp,lib/checknullpointer.cpp:<global>,,<global>,,,1
141733920955,NAMESPACE_BLOCK,"namespace {
    CheckNullPointer instance;
}",1,lib/checknullpointer.cpp,<namespace>0,50,<namespace>0,,,5
141733920956,NAMESPACE_BLOCK,"namespace {
    const std::set<std::string> stl_stream = {
        ""fstream"", ""ifstream"", ""iostream"", ""istream"",
        ""istringstream"", ""ofstream"", ""ostream"", ""ostringstream"",
        ""stringstream"", ""wistringstream"", ""wostringstream"", ""wstringstream""
    };
}",1,lib/checknullpointer.cpp,<namespace>1,133,<namespace>1,,,8
141733920957,NAMESPACE_BLOCK,"namespace {
    const std::set<std::string> stl_istream = {
        ""fstream"", ""ifstream"", ""iostream"", ""istream"",
        ""istringstream"", ""stringstream"", ""wistringstream"", ""wstringstream""
    };
}",1,lib/checknullpointer.cpp,<namespace>4,335,<namespace>4,,,14
141733920958,NAMESPACE_BLOCK,"namespace
#endif
{
    /* data for multifile checking */
    class MyFileInfo : public Check::FileInfo {
    public:
        using Check::FileInfo::FileInfo;
        /** function arguments that are dereferenced without checking if they are null */
        std::list<CTU::FileInfo::UnsafeUsage> unsafeUsage;

        /** Convert data into xml string */
        std::string toString() const override
        {
            return CTU::toString(unsafeUsage);
        }
    };
}",1,lib/checknullpointer.cpp,<namespace>8,605,<namespace>8,,,24
141733920959,NAMESPACE_BLOCK,<empty>,,lib/checknullpointer.h,lib/checknullpointer.h:<global>,,<global>,,,1
141733920960,NAMESPACE_BLOCK,<empty>,,lib/checkother.cpp,lib/checkother.cpp:<global>,,<global>,,,1
141733920961,NAMESPACE_BLOCK,"namespace {
    CheckOther instance;
}",1,lib/checkother.cpp,<namespace>0,51,<namespace>0,,,1
141733920962,NAMESPACE_BLOCK,"namespace {
    struct CompareVariables {
        bool operator()(const Variable* a, const Variable* b) const {
            const int fileA = a->nameToken()->fileIndex();
            const int fileB = b->nameToken()->fileIndex();
            if (fileA != fileB)
                return fileA < fileB;
            const int lineA = a->nameToken()->linenr();
            const int lineB = b->nameToken()->linenr();
            if (lineA != lineB)
                return lineA < lineB;
            const int columnA = a->nameToken()->column();
            const int columnB = b->nameToken()->column();
            return columnA < columnB;
        }
    };
}",1,lib/checkother.cpp,<namespace>16,1677,<namespace>16,,,83
141733920963,NAMESPACE_BLOCK,"namespace {
    bool notconst(const Function* func)
    {
        return !func->isConst();
    }

    void getConstFunctions(const SymbolDatabase *symbolDatabase, std::list<const Function*> &constFunctions)
    {
        for (const Scope &scope : symbolDatabase->scopeList) {
            // only add const functions that do not have a non-const overloaded version
            // since it is pretty much impossible to tell which is being called.
            using StringFunctionMap = std::map<std::string, std::list<const Function*>>;
            StringFunctionMap functionsByName;
            for (const Function &func : scope.functionList) {
                functionsByName[func.tokenDef->str()].push_back(&func);
            }
            for (std::pair<const std::string, std::list<const Function*>>& it : functionsByName) {
                const auto nc = std::find_if(it.second.cbegin(), it.second.cend(), notconst);
                if (nc == it.second.cend()) {
                    // ok to ...",1,lib/checkother.cpp,<namespace>22,2603,<namespace>22,,,110
141733920964,NAMESPACE_BLOCK,<empty>,,lib/checkother.h,lib/checkother.h:<global>,,<global>,,,1
141733920965,NAMESPACE_BLOCK,<empty>,,lib/checkpostfixoperator.cpp,lib/checkpostfixoperator.cpp:<global>,,<global>,,,1
141733920966,NAMESPACE_BLOCK,"namespace {
    CheckPostfixOperator instance;
}",1,lib/checkpostfixoperator.cpp,<namespace>0,38,<namespace>0,,,1
141733920967,NAMESPACE_BLOCK,<empty>,,lib/checkpostfixoperator.h,lib/checkpostfixoperator.h:<global>,,<global>,,,1
141733920968,NAMESPACE_BLOCK,<empty>,,lib/checksizeof.cpp,lib/checksizeof.cpp:<global>,,<global>,,,1
141733920969,NAMESPACE_BLOCK,"namespace {
    CheckSizeof instance;
}",1,lib/checksizeof.cpp,<namespace>0,38,<namespace>0,,,1
141733920970,NAMESPACE_BLOCK,<empty>,,lib/checksizeof.h,lib/checksizeof.h:<global>,,<global>,,,1
141733920971,NAMESPACE_BLOCK,<empty>,,lib/checkstl.cpp,lib/checkstl.cpp:<global>,,<global>,,,1
141733920972,NAMESPACE_BLOCK,"namespace {
    CheckStl instance;
}",1,lib/checkstl.cpp,<namespace>0,50,<namespace>0,,,1
141733920973,NAMESPACE_BLOCK,"namespace {
    struct ArgIteratorInfo {
        const Token* tok;
        const Library::ArgumentChecks::IteratorInfo* info;
    };
}",1,lib/checkstl.cpp,<namespace>7,816,<namespace>7,,,58
141733920974,NAMESPACE_BLOCK,"namespace {
    struct InvalidContainerAnalyzer {
        struct Info {
            struct Reference {
                const Token* tok;
                ErrorPath errorPath;
                const Token* ftok;
            };
            std::unordered_map<int, Reference> expressions;

            void add(const std::vector<Reference>& refs) {
                for (const Reference& r : refs) {
                    add(r);
                }
            }
            void add(const Reference& r) {
                if (!r.tok)
                    return;
                expressions.emplace(r.tok->exprId(), r);
            }

            std::vector<Reference> invalidTokens() const {
                std::vector<Reference> result;
                std::transform(expressions.cbegin(), expressions.cend(), std::back_inserter(result), SelectMapValues{});
                return result;
            }
        };
        std::unordered_map<const Function*, Info> invalidMethods;

        std::vector<In...",1,lib/checkstl.cpp,<namespace>14,975,<namespace>14,,,62
141733920975,NAMESPACE_BLOCK,"namespace {
    const std::set<std::string> stl_string_stream = {
        ""istringstream"", ""ostringstream"", ""stringstream"", ""wstringstream""
    };
}",1,lib/checkstl.cpp,<namespace>32,1967,<namespace>32,,,94
141733920976,NAMESPACE_BLOCK,"namespace {
    const std::set<std::string> stl_containers_with_empty_and_clear = {
        ""deque"",  ""forward_list"",  ""list"",
        ""map"",  ""multimap"",  ""multiset"",  ""set"",  ""string"",
        ""unordered_map"",  ""unordered_multimap"",  ""unordered_multiset"",
        ""unordered_set"",  ""vector"",  ""wstring""
    };

}",1,lib/checkstl.cpp,<namespace>37,2233,<namespace>37,,,104
141733920977,NAMESPACE_BLOCK,"namespace {
    struct LoopAnalyzer {
        const Token* bodyTok = nullptr;
        const Token* loopVar = nullptr;
        const Settings* settings = nullptr;
        std::set<nonneg int> varsChanged;

        explicit LoopAnalyzer(const Token* tok, const Settings* psettings)
            : bodyTok(tok->linkAt(1)->next()), settings(psettings)
        {
            const Token* splitTok = tok->next()->astOperand2();
            if (Token::simpleMatch(splitTok, "":"") && splitTok->previous()->varId() != 0) {
                loopVar = splitTok->previous();
            }
            if (valid()) {
                findChangedVariables();
            }
        }
        bool isLoopVarChanged() const {
            return varsChanged.count(loopVar->varId()) > 0;
        }

        bool isModified(const Token* tok) const
        {
            if (tok->variable() && tok->variable()->isConst())
                return false;
            int n = 1 + (astIsPointer(tok) ? 1 : 0);
            for (...",1,lib/checkstl.cpp,<namespace>42,2820,<namespace>42,,,131
141733920978,NAMESPACE_BLOCK,<empty>,,lib/checkstl.h,lib/checkstl.h:<global>,,<global>,,,1
141733920979,NAMESPACE_BLOCK,<empty>,,lib/checkstring.cpp,lib/checkstring.cpp:<global>,,<global>,,,1
141733920980,NAMESPACE_BLOCK,"namespace {
    CheckString instance;
}",1,lib/checkstring.cpp,<namespace>0,40,<namespace>0,,,1
141733920981,NAMESPACE_BLOCK,<empty>,,lib/checkstring.h,lib/checkstring.h:<global>,,<global>,,,1
141733920982,NAMESPACE_BLOCK,<empty>,,lib/checktype.cpp,lib/checktype.cpp:<global>,,<global>,,,1
141733920983,NAMESPACE_BLOCK,"namespace {
    CheckType instance;
}",1,lib/checktype.cpp,<namespace>0,48,<namespace>0,,,1
141733920984,NAMESPACE_BLOCK,<empty>,,lib/checktype.h,lib/checktype.h:<global>,,<global>,,,1
141733920985,NAMESPACE_BLOCK,<empty>,,lib/checkuninitvar.cpp,lib/checkuninitvar.cpp:<global>,,<global>,,,1
141733920986,NAMESPACE_BLOCK,"namespace {
    CheckUninitVar instance;
}",1,lib/checkuninitvar.cpp,<namespace>0,53,<namespace>0,,,3
141733920987,NAMESPACE_BLOCK,"namespace
#endif
{
    /* data for multifile checking */
    class MyFileInfo : public Check::FileInfo {
    public:
        using Check::FileInfo::FileInfo;
        /** function arguments that data are unconditionally read */
        std::list<CTU::FileInfo::UnsafeUsage> unsafeUsage;

        /** Convert data into xml string */
        std::string toString() const override
        {
            return CTU::toString(unsafeUsage);
        }
    };
}",1,lib/checkuninitvar.cpp,<namespace>10,1707,<namespace>10,,,37
141733920988,NAMESPACE_BLOCK,<empty>,,lib/checkuninitvar.h,lib/checkuninitvar.h:<global>,,<global>,,,1
141733920989,NAMESPACE_BLOCK,<empty>,,lib/checkunusedfunctions.cpp,lib/checkunusedfunctions.cpp:<global>,,<global>,,,1
141733920990,NAMESPACE_BLOCK,"namespace {
    struct Location {
        Location() : lineNumber(0) {}
        Location(std::string f, const int l) : fileName(std::move(f)), lineNumber(l) {}
        std::string fileName;
        int lineNumber;
    };
}",1,lib/checkunusedfunctions.cpp,<namespace>5,438,<namespace>5,,,12
141733920991,NAMESPACE_BLOCK,<empty>,,lib/checkunusedfunctions.h,lib/checkunusedfunctions.h:<global>,,<global>,,,1
141733920992,NAMESPACE_BLOCK,<empty>,,lib/checkunusedvar.cpp,lib/checkunusedvar.cpp:<global>,,<global>,,,1
141733920993,NAMESPACE_BLOCK,"namespace {
    CheckUnusedVar instance;
}",1,lib/checkunusedvar.cpp,<namespace>0,43,<namespace>0,,,1
141733920994,NAMESPACE_BLOCK,<empty>,,lib/checkunusedvar.h,lib/checkunusedvar.h:<global>,,<global>,,,1
141733920995,NAMESPACE_BLOCK,<empty>,,lib/checkvaarg.cpp,lib/checkvaarg.cpp:<global>,,<global>,,,1
141733920996,NAMESPACE_BLOCK,"namespace {
    CheckVaarg instance;
}",1,lib/checkvaarg.cpp,<namespace>0,36,<namespace>0,,,1
141733920997,NAMESPACE_BLOCK,<empty>,,lib/checkvaarg.h,lib/checkvaarg.h:<global>,,<global>,,,1
141733920998,NAMESPACE_BLOCK,<empty>,,lib/clangimport.cpp,lib/clangimport.cpp:<global>,,<global>,,,1
141733920999,NAMESPACE_BLOCK,"namespace clangimport {
    struct Data {
        struct Decl {
            explicit Decl(Scope *scope) : scope(scope) {}
            Decl(Token *def, Variable *var) : def(def), var(var) {}
            Decl(Token *def, Function *function) : def(def), function(function) {}
            Decl(Token *def, Enumerator *enumerator) : def(def), enumerator(enumerator) {}
            void ref(Token *tok) const {
                if (enumerator)
                    tok->enumerator(enumerator);
                if (function)
                    tok->function(function);
                if (var) {
                    tok->variable(var);
                    tok->varId(var->declarationId());
                }
            }
            Token* def{};
            Enumerator* enumerator{};
            Function* function{};
            Scope* scope{};
            Variable* var{};
        };

        const Settings *mSettings = nullptr;
        SymbolDatabase *mSymbolDatabase = nullptr;

        int enumVal...",1,lib/clangimport.cpp,clangimport,206,clangimport,,,143
141733921000,NAMESPACE_BLOCK,<empty>,,lib/clangimport.h,lib/clangimport.h:<global>,,<global>,,,1
141733921001,NAMESPACE_BLOCK,<empty>,,lib/color.cpp,lib/color.cpp:<global>,,<global>,,,1
141733921002,NAMESPACE_BLOCK,<empty>,,lib/color.h,lib/color.h:<global>,,<global>,,,1
141733921003,NAMESPACE_BLOCK,<empty>,,lib/config.h,lib/config.h:<global>,,<global>,,,1
141733921004,NAMESPACE_BLOCK,<empty>,,lib/cppcheck.cpp,lib/cppcheck.cpp:<global>,,<global>,,,1
141733921005,NAMESPACE_BLOCK,"namespace {
    class FilesDeleter {
    public:
        FilesDeleter() = default;
        ~FilesDeleter() {
            for (const std::string& fileName: mFilenames)
                std::remove(fileName.c_str());
        }
        void addFile(const std::string& fileName) {
            mFilenames.push_back(fileName);
        }
    private:
        std::vector<std::string> mFilenames;
    };
}",1,lib/cppcheck.cpp,<namespace>1,287,<namespace>1,,,12
141733921006,NAMESPACE_BLOCK,<empty>,,lib/cppcheck.h,lib/cppcheck.h:<global>,,<global>,,,1
141733921007,NAMESPACE_BLOCK,<empty>,,lib/ctu.cpp,lib/ctu.cpp:<global>,,<global>,,,1
141733921008,NAMESPACE_BLOCK,<empty>,,lib/ctu.h,lib/ctu.h:<global>,,<global>,,,1
141733921009,NAMESPACE_BLOCK,<empty>,,lib/errorlogger.cpp,lib/errorlogger.cpp:<global>,,<global>,,,1
141733921010,NAMESPACE_BLOCK,<empty>,,lib/errorlogger.h,lib/errorlogger.h:<global>,,<global>,,,1
141733921011,NAMESPACE_BLOCK,<empty>,,lib/errortypes.cpp,lib/errortypes.cpp:<global>,,<global>,,,1
141733921012,NAMESPACE_BLOCK,<empty>,,lib/errortypes.h,lib/errortypes.h:<global>,,<global>,,,1
141733921013,NAMESPACE_BLOCK,<empty>,,lib/filesettings.h,lib/filesettings.h:<global>,,<global>,,,1
141733921014,NAMESPACE_BLOCK,<empty>,,lib/findtoken.cpp,lib/findtoken.cpp:<global>,,<global>,,,1
141733921015,NAMESPACE_BLOCK,"namespace internal {
    bool findTokensSkipDeadCodeImpl(const Library& library,
                                    Token* start,
                                    const Token* end,
                                    const std::function<bool(const Token*)>& pred,
                                    const std::function<bool(Token*)>& found,
                                    const std::function<std::vector<MathLib::bigint>(const Token*)>& evaluate,
                                    bool skipUnevaluated)
    {
        return ::findTokensSkipDeadCodeImpl(library, start, end, pred, found, evaluate, skipUnevaluated);
    }

    bool findTokensSkipDeadCodeImpl(const Library& library,
                                    const Token* start,
                                    const Token* end,
                                    const std::function<bool(const Token*)>& pred,
                                    const std::function<bool(const Token*)>& found,
                          ...",1,lib/findtoken.cpp,internal,123,internal,,,3
141733921016,NAMESPACE_BLOCK,<empty>,,lib/findtoken.h,lib/findtoken.h:<global>,,<global>,,,1
141733921017,NAMESPACE_BLOCK,<empty>,,lib/forwardanalyzer.cpp,lib/forwardanalyzer.cpp:<global>,,<global>,,,1
141733921018,NAMESPACE_BLOCK,"namespace {
    struct ForwardTraversal {
        enum class Progress : std::uint8_t { Continue, Break, Skip };
        ForwardTraversal(const ValuePtr<Analyzer>& analyzer, const TokenList& tokenList, ErrorLogger& errorLogger, const Settings& settings)
            : analyzer(analyzer), tokenList(tokenList), errorLogger(errorLogger), settings(settings)
        {}
        ValuePtr<Analyzer> analyzer;
        const TokenList& tokenList;
        ErrorLogger& errorLogger;
        const Settings& settings;
        Analyzer::Action actions;
        bool analyzeOnly{};
        bool analyzeTerminate{};
        Analyzer::Terminate terminate = Analyzer::Terminate::None;
        std::vector<Token*> loopEnds;
        int branchCount = 0;

        Progress Break(Analyzer::Terminate t = Analyzer::Terminate::None) {
            if ((!analyzeOnly || analyzeTerminate) && t != Analyzer::Terminate::None)
                terminate = t;
            return Progress::Break;
        }

        struct Branch...",1,lib/forwardanalyzer.cpp,<namespace>0,47,<namespace>0,,,1
141733921019,NAMESPACE_BLOCK,<empty>,,lib/forwardanalyzer.h,lib/forwardanalyzer.h:<global>,,<global>,,,1
141733921020,NAMESPACE_BLOCK,<empty>,,lib/fwdanalysis.cpp,lib/fwdanalysis.cpp:<global>,,<global>,,,1
141733921021,NAMESPACE_BLOCK,<empty>,,lib/fwdanalysis.h,lib/fwdanalysis.h:<global>,,<global>,,,1
141733921022,NAMESPACE_BLOCK,<empty>,,lib/importproject.cpp,lib/importproject.cpp:<global>,,<global>,,,1
141733921023,NAMESPACE_BLOCK,"namespace {
    struct ProjectConfiguration {
        explicit ProjectConfiguration(const tinyxml2::XMLElement *cfg) {
            const char *a = cfg->Attribute(""Include"");
            if (a)
                name = a;
            for (const tinyxml2::XMLElement *e = cfg->FirstChildElement(); e; e = e->NextSiblingElement()) {
                const char * const text = e->GetText();
                if (!text)
                    continue;
                const char * ename = e->Name();
                if (std::strcmp(ename,""Configuration"")==0)
                    configuration = text;
                else if (std::strcmp(ename,""Platform"")==0) {
                    platformStr = text;
                    if (platformStr == ""Win32"")
                        platform = Win32;
                    else if (platformStr == ""x64"")
                        platform = x64;
                    else
                        platform = Unknown;
                }
            }
        }
        std::s...",1,lib/importproject.cpp,<namespace>5,483,<namespace>5,,,12
141733921024,NAMESPACE_BLOCK,<empty>,,lib/importproject.h,lib/importproject.h:<global>,,<global>,,,1
141733921025,NAMESPACE_BLOCK,<empty>,,lib/infer.cpp,lib/infer.cpp:<global>,,<global>,,,1
141733921026,NAMESPACE_BLOCK,"namespace {
    struct Interval {
        std::vector<MathLib::bigint> minvalue, maxvalue;
        std::vector<const ValueFlow::Value*> minRef, maxRef;

        void setMinValue(MathLib::bigint x, const ValueFlow::Value* ref = nullptr)
        {
            minvalue = {x};
            if (ref)
                minRef = {ref};
        }

        void setMaxValue(MathLib::bigint x, const ValueFlow::Value* ref = nullptr)
        {
            maxvalue = {x};
            if (ref)
                maxRef = {ref};
        }

        bool isLessThan(MathLib::bigint x, std::vector<const ValueFlow::Value*>* ref = nullptr) const
        {
            if (!this->maxvalue.empty() && this->maxvalue.front() < x) {
                if (ref)
                    *ref = maxRef;
                return true;
            }
            return false;
        }

        bool isGreaterThan(MathLib::bigint x, std::vector<const ValueFlow::Value*>* ref = nullptr) const
        {
            if (!this->minvalue.em...",1,lib/infer.cpp,<namespace>1,51,<namespace>1,,,2
141733921027,NAMESPACE_BLOCK,"namespace {
    struct IntegralInferModel : InferModel {
        bool match(const ValueFlow::Value& value) const override {
            return value.isIntValue();
        }
        ValueFlow::Value yield(MathLib::bigint value) const override
        {
            ValueFlow::Value result(value);
            result.valueType = ValueFlow::Value::ValueType::INT;
            result.setKnown();
            return result;
        }
    };
}",1,lib/infer.cpp,<namespace>4,392,<namespace>4,,,11
141733921028,NAMESPACE_BLOCK,<empty>,,lib/infer.h,lib/infer.h:<global>,,<global>,,,1
141733921029,NAMESPACE_BLOCK,<empty>,,lib/json.h,lib/json.h:<global>,,<global>,,,1
141733921030,NAMESPACE_BLOCK,<empty>,,lib/keywords.cpp,lib/keywords.cpp:<global>,,<global>,,,1
141733921031,NAMESPACE_BLOCK,<empty>,,lib/keywords.h,lib/keywords.h:<global>,,<global>,,,1
141733921032,NAMESPACE_BLOCK,<empty>,,lib/library.cpp,lib/library.cpp:<global>,,<global>,,,1
141733921033,NAMESPACE_BLOCK,<empty>,,lib/library.h,lib/library.h:<global>,,<global>,,,1
141733921034,NAMESPACE_BLOCK,<empty>,,lib/matchcompiler.h,lib/matchcompiler.h:<global>,,<global>,,,1
141733921035,NAMESPACE_BLOCK,<empty>,,lib/mathlib.cpp,lib/mathlib.cpp:<global>,,<global>,,,1
141733921036,NAMESPACE_BLOCK,<empty>,,lib/mathlib.h,lib/mathlib.h:<global>,,<global>,,,1
141733921037,NAMESPACE_BLOCK,<empty>,,lib/path.cpp,lib/path.cpp:<global>,,<global>,,,1
141733921038,NAMESPACE_BLOCK,<empty>,,lib/path.h,lib/path.h:<global>,,<global>,,,1
141733921039,NAMESPACE_BLOCK,<empty>,,lib/pathanalysis.cpp,lib/pathanalysis.cpp:<global>,,<global>,,,1
141733921040,NAMESPACE_BLOCK,<empty>,,lib/pathanalysis.h,lib/pathanalysis.h:<global>,,<global>,,,1
141733921041,NAMESPACE_BLOCK,<empty>,,lib/pathmatch.cpp,lib/pathmatch.cpp:<global>,,<global>,,,1
141733921042,NAMESPACE_BLOCK,<empty>,,lib/pathmatch.h,lib/pathmatch.h:<global>,,<global>,,,1
141733921043,NAMESPACE_BLOCK,<empty>,,lib/platform.cpp,lib/platform.cpp:<global>,,<global>,,,1
141733921044,NAMESPACE_BLOCK,<empty>,,lib/platform.h,lib/platform.h:<global>,,<global>,,,1
141733921045,NAMESPACE_BLOCK,<empty>,,lib/precompiled.h,lib/precompiled.h:<global>,,<global>,,,1
141733921046,NAMESPACE_BLOCK,<empty>,,lib/preprocessor.cpp,lib/preprocessor.cpp:<global>,,<global>,,,1
141733921047,NAMESPACE_BLOCK,"namespace {
    struct BadInlineSuppression {
        BadInlineSuppression(std::string file, const int line, std::string msg) : file(std::move(file)), line(line), errmsg(std::move(msg)) {}
        std::string file;
        int line;
        std::string errmsg;
    };
}",1,lib/preprocessor.cpp,<namespace>1,75,<namespace>1,,,9
141733921048,NAMESPACE_BLOCK,<empty>,,lib/preprocessor.h,lib/preprocessor.h:<global>,,<global>,,,1
141733921049,NAMESPACE_BLOCK,<empty>,,lib/programmemory.cpp,lib/programmemory.cpp:<global>,,<global>,,,1
141733921050,NAMESPACE_BLOCK,"namespace {
    struct assign {
        template<class T, class U>
        void operator()(T& x, const U& y) const
        {
            x = static_cast<T>(y);
        }
    };
}",1,lib/programmemory.cpp,<namespace>4,590,<namespace>4,,,48
141733921051,NAMESPACE_BLOCK,"namespace {
    struct Executor {
        ProgramMemory* pm;
        const Settings& settings;
        int fdepth = 4;
        int depth = 10;

        Executor(ProgramMemory* pm, const Settings& settings) : pm(pm), settings(settings)
        {
            assert(pm != nullptr);
        }

        static ValueFlow::Value unknown() {
            return ValueFlow::Value::unknown();
        }

        std::unordered_map<nonneg int, ValueFlow::Value> executeAll(const std::vector<const Token*>& toks,
                                                                    const bool* b = nullptr) const
        {
            std::unordered_map<nonneg int, ValueFlow::Value> result;
            auto state = *this;
            for (const Token* tok : toks) {
                ValueFlow::Value r = state.execute(tok);
                if (r.isUninitValue())
                    continue;
                const bool brk = b && isTrueOrFalse(r, *b);
                result.emplace(tok->exprId(), std::move(...",1,lib/programmemory.cpp,<namespace>5,1235,<namespace>5,,,59
141733921052,NAMESPACE_BLOCK,<empty>,,lib/programmemory.h,lib/programmemory.h:<global>,,<global>,,,1
141733921053,NAMESPACE_BLOCK,<empty>,,lib/reverseanalyzer.cpp,lib/reverseanalyzer.cpp:<global>,,<global>,,,1
141733921054,NAMESPACE_BLOCK,"namespace {
    struct ReverseTraversal {
        ReverseTraversal(const ValuePtr<Analyzer>& analyzer, const TokenList& tokenlist, ErrorLogger& errorLogger, const Settings& settings)
            : analyzer(analyzer), tokenlist(tokenlist), errorLogger(errorLogger), settings(settings)
        {}
        ValuePtr<Analyzer> analyzer;
        const TokenList& tokenlist;
        ErrorLogger& errorLogger;
        const Settings& settings;

        std::pair<bool, bool> evalCond(const Token* tok) const {
            std::vector<MathLib::bigint> result = analyzer->evaluate(tok);
            // TODO: We should convert to bool
            const bool checkThen = std::any_of(result.cbegin(), result.cend(), [](MathLib::bigint x) {
                return x == 1;
            });
            const bool checkElse = std::any_of(result.cbegin(), result.cend(), [](MathLib::bigint x) {
                return x == 0;
            });
            return std::make_pair(checkThen, checkElse);
        }

     ...",1,lib/reverseanalyzer.cpp,<namespace>0,38,<namespace>0,,,1
141733921055,NAMESPACE_BLOCK,<empty>,,lib/reverseanalyzer.h,lib/reverseanalyzer.h:<global>,,<global>,,,1
141733921056,NAMESPACE_BLOCK,<empty>,,lib/settings.cpp,lib/settings.cpp:<global>,,<global>,,,1
141733921057,NAMESPACE_BLOCK,<empty>,,lib/settings.h,lib/settings.h:<global>,,<global>,,,1
141733921058,NAMESPACE_BLOCK,<empty>,,lib/smallvector.h,lib/smallvector.h:<global>,,<global>,,,1
141733921059,NAMESPACE_BLOCK,<empty>,,lib/sourcelocation.h,lib/sourcelocation.h:<global>,,<global>,,,1
141733921060,NAMESPACE_BLOCK,<empty>,,lib/standards.cpp,lib/standards.cpp:<global>,,<global>,,,1
141733921061,NAMESPACE_BLOCK,<empty>,,lib/standards.h,lib/standards.h:<global>,,<global>,,,1
141733921062,NAMESPACE_BLOCK,<empty>,,lib/summaries.cpp,lib/summaries.cpp:<global>,,<global>,,,1
141733921063,NAMESPACE_BLOCK,<empty>,,lib/summaries.h,lib/summaries.h:<global>,,<global>,,,1
141733921064,NAMESPACE_BLOCK,<empty>,,lib/suppressions.cpp,lib/suppressions.cpp:<global>,,<global>,,,1
141733921065,NAMESPACE_BLOCK,<empty>,,lib/suppressions.h,lib/suppressions.h:<global>,,<global>,,,1
141733921066,NAMESPACE_BLOCK,<empty>,,lib/symboldatabase.cpp,lib/symboldatabase.cpp:<global>,,<global>,,,1
141733921067,NAMESPACE_BLOCK,"namespace {
    struct ExprIdKey {
        std::string parentOp;
        nonneg int operand1;
        nonneg int operand2;
        bool operator<(const ExprIdKey& k) const {
            return std::tie(parentOp, operand1, operand2) < std::tie(k.parentOp, k.operand1, k.operand2);
        }
    };
    using ExprIdMap = std::map<ExprIdKey, nonneg int>;
    void setParentExprId(Token* tok, ExprIdMap& exprIdMap, nonneg int &id) {
        for (;;) {
            if (!tok->astParent() || tok->astParent()->isControlFlowKeyword())
                break;
            const Token* op1 = tok->astParent()->astOperand1();
            if (op1 && op1->exprId() == 0 && !Token::Match(op1, ""[{[]""))
                break;
            const Token* op2 = tok->astParent()->astOperand2();
            if (op2 && op2->exprId() == 0 &&
                !((tok->astParent()->astParent() && tok->astParent()->isAssignmentOp() && tok->astParent()->astParent()->isAssignmentOp()) ||
                  isLambdaCaptureLis...",1,lib/symboldatabase.cpp,<namespace>37,1570,<namespace>37,,,25
141733921068,NAMESPACE_BLOCK,"namespace {
    const Function* getFunctionForArgumentvariable(const Variable * const var)
    {
        if (const Scope* scope = var->nameToken()->scope()) {
            auto it = std::find_if(scope->functionList.begin(), scope->functionList.end(), [&](const Function& function) {
                for (nonneg int arg = 0; arg < function.argCount(); ++arg) {
                    if (var == function.getArgumentVar(arg))
                        return true;
                }
                return false;
            });
            if (it != scope->functionList.end())
                return &*it;
        }
        return nullptr;
    }
}",1,lib/symboldatabase.cpp,<namespace>44,2120,<namespace>44,,,31
141733921069,NAMESPACE_BLOCK,<empty>,,lib/symboldatabase.h,lib/symboldatabase.h:<global>,,<global>,,,1
141733921070,NAMESPACE_BLOCK,<empty>,,lib/templatesimplifier.cpp,lib/templatesimplifier.cpp:<global>,,<global>,,,1
141733921071,NAMESPACE_BLOCK,"namespace {
    class FindToken {
    public:
        explicit FindToken(const Token *token) : mToken(token) {}
        bool operator()(const TemplateSimplifier::TokenAndName &tokenAndName) const {
            return tokenAndName.token() == mToken;
        }
    private:
        const Token * const mToken;
    };

    class FindName {
    public:
        explicit FindName(std::string name) : mName(std::move(name)) {}
        bool operator()(const TemplateSimplifier::TokenAndName &tokenAndName) const {
            return tokenAndName.name() == mName;
        }
    private:
        const std::string mName;
    };

    class FindFullName {
    public:
        explicit FindFullName(std::string fullName) : mFullName(std::move(fullName)) {}
        bool operator()(const TemplateSimplifier::TokenAndName &tokenAndName) const {
            return tokenAndName.fullName() == mFullName;
        }
    private:
        const std::string mFullName;
    };
}",1,lib/templatesimplifier.cpp,<namespace>0,66,<namespace>0,,,2
141733921072,NAMESPACE_BLOCK,<empty>,,lib/templatesimplifier.h,lib/templatesimplifier.h:<global>,,<global>,,,1
141733921073,NAMESPACE_BLOCK,<empty>,,lib/timer.cpp,lib/timer.cpp:<global>,,<global>,,,1
141733921074,NAMESPACE_BLOCK,"namespace {
    using dataElementType = std::pair<std::string, TimerResultsData>;
    bool more_second_sec(const dataElementType& lhs, const dataElementType& rhs)
    {
        return lhs.second.seconds() > rhs.second.seconds();
    }

    // TODO: remove and print through (synchronized) ErrorLogger instead
    std::mutex stdCoutLock;
}",1,lib/timer.cpp,<namespace>0,28,<namespace>0,,,1
141733921075,NAMESPACE_BLOCK,<empty>,,lib/timer.h,lib/timer.h:<global>,,<global>,,,1
141733921076,NAMESPACE_BLOCK,<empty>,,lib/token.cpp,lib/token.cpp:<global>,,<global>,,,1
141733921077,NAMESPACE_BLOCK,"namespace {
    struct less {
        template<class T, class U>
        bool operator()(const T &x, const U &y) const {
            return x < y;
        }
    };
}",1,lib/token.cpp,<namespace>0,51,<namespace>0,,,1
141733921078,NAMESPACE_BLOCK,<empty>,,lib/token.h,lib/token.h:<global>,,<global>,,,1
141733921079,NAMESPACE_BLOCK,<empty>,,lib/tokenize.cpp,lib/tokenize.cpp:<global>,,<global>,,,1
141733921080,NAMESPACE_BLOCK,"namespace {
    // local struct used in setVarId
    // in order to store information about the scope
    struct VarIdScopeInfo {
        VarIdScopeInfo() = default;
        VarIdScopeInfo(bool isExecutable, bool isStructInit, bool isEnum, nonneg int startVarid)
            : isExecutable(isExecutable), isStructInit(isStructInit), isEnum(isEnum), startVarid(startVarid) {}

        const bool isExecutable{};
        const bool isStructInit{};
        const bool isEnum{};
        const nonneg int startVarid{};
    };
}",1,lib/tokenize.cpp,<namespace>0,65,<namespace>0,,,1
141733921081,NAMESPACE_BLOCK,"namespace {
    struct Space {
        std::string className;
        const Token* bodyEnd{};  // for body contains typedef define
        const Token* bodyEnd2{}; // for body contains typedef using
        bool isNamespace{};
        std::set<std::string> recordTypes;
    };
}",1,lib/tokenize.cpp,<namespace>1,354,<namespace>1,,,12
141733921082,NAMESPACE_BLOCK,"namespace {
    class TypedefSimplifier {
    private:
        Token* mTypedefToken;  // The ""typedef"" token
        Token* mEndToken{nullptr};  // Semicolon
        std::pair<Token*, Token*> mRangeType;
        std::pair<Token*, Token*> mRangeTypeQualifiers;
        std::pair<Token*, Token*> mRangeAfterVar;
        Token* mNameToken{nullptr};
        bool mFail = false;
        bool mReplaceFailed = false;
        bool mUsed = false;

    public:
        explicit TypedefSimplifier(Token* typedefToken) : mTypedefToken(typedefToken) {
            Token* start = typedefToken->next();
            if (Token::simpleMatch(start, ""typename""))
                start = start->next();

            // TODO handle unnamed structs etc
            if (Token::Match(start, ""const| enum|struct|union|class %name%| {"")) {
                const std::pair<Token*, Token*> rangeBefore(start, Token::findsimplematch(start, ""{""));

                // find typedef name token
                Token* nameToken = ...",1,lib/tokenize.cpp,<namespace>3,572,<namespace>3,,,18
141733921083,NAMESPACE_BLOCK,"namespace {
    struct ScopeInfo3 {
        enum Type : std::uint8_t { Global, Namespace, Record, MemberFunction, Other };
        ScopeInfo3() : parent(nullptr), type(Global), bodyStart(nullptr), bodyEnd(nullptr) {}
        ScopeInfo3(ScopeInfo3 *parent_, Type type_, std::string name_, const Token *bodyStart_, const Token *bodyEnd_)
            : parent(parent_), type(type_), name(std::move(name_)), bodyStart(bodyStart_), bodyEnd(bodyEnd_) {
            if (name.empty())
                return;
            fullName = name;
            ScopeInfo3 *scope = parent;
            while (scope && scope->parent) {
                if (scope->name.empty())
                    break;
                fullName = scope->name + "" :: "" + fullName;
                scope = scope->parent;
            }
        }
        ScopeInfo3 *parent;
        std::list<ScopeInfo3> children;
        Type type;
        std::string fullName;
        std::string name;
        const Token * bodyStart;
        const T...",1,lib/tokenize.cpp,<namespace>6,2380,<namespace>6,,,23
141733921084,NAMESPACE_BLOCK,"namespace {
    /** Class used in Tokenizer::setVarIdPass1 */
    class VariableMap {
    private:
        std::unordered_map<std::string, nonneg int> mVariableId;
        std::unordered_map<std::string, nonneg int> mVariableId_global;
        std::stack<std::vector<std::pair<std::string, nonneg int>>> mScopeInfo;
        mutable nonneg int mVarId{};
    public:
        VariableMap() = default;
        void enterScope();
        bool leaveScope();
        void addVariable(const std::string& varname, bool globalNamespace);
        bool hasVariable(const std::string& varname) const {
            return mVariableId.find(varname) != mVariableId.end();
        }

        const std::unordered_map<std::string, nonneg int>& map(bool global) const {
            return global ? mVariableId_global : mVariableId;
        }
        nonneg int& getVarId() {
            return mVarId;
        }
    };
}",1,lib/tokenize.cpp,<namespace>12,4117,<namespace>12,,,54
141733921085,NAMESPACE_BLOCK,"namespace {
    struct Member {
        Member(std::list<std::string> s, std::list<const Token *> ns, Token *t) : usingnamespaces(std::move(ns)), scope(std::move(s)), tok(t) {}
        std::list<const Token *> usingnamespaces;
        std::list<std::string> scope;
        Token *tok;
    };
}",1,lib/tokenize.cpp,<namespace>14,4895,<namespace>14,,,68
141733921086,NAMESPACE_BLOCK,"namespace {
    struct triplet {
        triplet(const char* m, const char* u) :  mbcs(m), unicode(u) {}
        std::string mbcs, unicode;
    };

    const std::map<std::string, triplet> apis = {
        std::make_pair(""_topen"", triplet(""open"", ""_wopen"")),
        std::make_pair(""_tsopen_s"", triplet(""_sopen_s"", ""_wsopen_s"")),
        std::make_pair(""_tfopen"", triplet(""fopen"", ""_wfopen"")),
        std::make_pair(""_tfopen_s"", triplet(""fopen_s"", ""_wfopen_s"")),
        std::make_pair(""_tfreopen"", triplet(""freopen"", ""_wfreopen"")),
        std::make_pair(""_tfreopen_s"", triplet(""freopen_s"", ""_wfreopen_s"")),
        std::make_pair(""_tcscat"", triplet(""strcat"", ""wcscat"")),
        std::make_pair(""_tcschr"", triplet(""strchr"", ""wcschr"")),
        std::make_pair(""_tcscmp"", triplet(""strcmp"", ""wcscmp"")),
        std::make_pair(""_tcsdup"", triplet(""strdup"", ""wcsdup"")),
        std::make_pair(""_tcscpy"", triplet(""strcpy"", ""wcscpy"")),
        std::make_pair(""_tcslen"", triplet(""strlen"", ""wcslen"")),
   ...",1,lib/tokenize.cpp,<namespace>29,10093,<namespace>29,,,165
141733921087,NAMESPACE_BLOCK,<empty>,,lib/tokenize.h,lib/tokenize.h:<global>,,<global>,,,1
141733921088,NAMESPACE_BLOCK,<empty>,,lib/tokenlist.cpp,lib/tokenlist.cpp:<global>,,<global>,,,1
141733921089,NAMESPACE_BLOCK,"namespace {
    struct AST_state {
        std::stack<Token*> op;
        int depth{};
        int inArrayAssignment{};
        bool cpp;
        int assign{};
        bool inCase{}; // true from case to :
        bool inGeneric{};
        bool stopAtColon{}; // help to properly parse ternary operators
        const Token* functionCallEndPar{};
        explicit AST_state(bool cpp) : cpp(cpp) {}
    };
}",1,lib/tokenlist.cpp,<namespace>1,454,<namespace>1,,,23
141733921090,NAMESPACE_BLOCK,"namespace {
    struct OnException {
        std::function<void()> f;

        ~OnException() {
#ifndef _MSC_VER
            if (std::uncaught_exception())
                f();
#endif
        }
    };
}",1,lib/tokenlist.cpp,<namespace>4,1871,<namespace>4,,,60
141733921091,NAMESPACE_BLOCK,<empty>,,lib/tokenlist.h,lib/tokenlist.h:<global>,,<global>,,,1
141733921092,NAMESPACE_BLOCK,<empty>,,lib/tokenrange.h,lib/tokenrange.h:<global>,,<global>,,,1
141733921093,NAMESPACE_BLOCK,<empty>,,lib/utils.cpp,lib/utils.cpp:<global>,,<global>,,,1
141733921094,NAMESPACE_BLOCK,<empty>,,lib/utils.h,lib/utils.h:<global>,,<global>,,,1
141733921095,NAMESPACE_BLOCK,<empty>,,lib/valueflow.cpp,lib/valueflow.cpp:<global>,,<global>,,,1
141733921096,NAMESPACE_BLOCK,<empty>,,lib/valueflow.h,lib/valueflow.h:<global>,,<global>,,,1
141733921097,NAMESPACE_BLOCK,<empty>,,lib/valueptr.h,lib/valueptr.h:<global>,,<global>,,,1
141733921098,NAMESPACE_BLOCK,<empty>,,lib/version.h,lib/version.h:<global>,,<global>,,,1
141733921099,NAMESPACE_BLOCK,<empty>,,lib/vf_analyzers.cpp,lib/vf_analyzers.cpp:<global>,,<global>,,,1
141733921100,NAMESPACE_BLOCK,<empty>,,lib/vf_analyzers.h,lib/vf_analyzers.h:<global>,,<global>,,,1
141733921101,NAMESPACE_BLOCK,<empty>,,lib/vf_common.cpp,lib/vf_common.cpp:<global>,,<global>,,,1
141733921102,NAMESPACE_BLOCK,"namespace ValueFlow
{
    bool getMinMaxValues(const ValueType *vt, const Platform &platform, MathLib::bigint &minValue, MathLib::bigint &maxValue)
    {
        if (!vt || !vt->isIntegral() || vt->pointer)
            return false;

        std::uint8_t bits;
        switch (vt->type) {
        case ValueType::Type::BOOL:
            bits = 1;
            break;
        case ValueType::Type::CHAR:
            bits = platform.char_bit;
            break;
        case ValueType::Type::SHORT:
            bits = platform.short_bit;
            break;
        case ValueType::Type::INT:
            bits = platform.int_bit;
            break;
        case ValueType::Type::LONG:
            bits = platform.long_bit;
            break;
        case ValueType::Type::LONGLONG:
            bits = platform.long_long_bit;
            break;
        default:
            return false;
        }

        if (bits == 1) {
            minValue = 0;
            maxValue = 1;
        } else if (bits < ...",1,lib/vf_common.cpp,ValueFlow,42,ValueFlow,,,1
141733921103,NAMESPACE_BLOCK,<empty>,,lib/vf_common.h,lib/vf_common.h:<global>,,<global>,,,1
141733921104,NAMESPACE_BLOCK,<empty>,,lib/vf_settokenvalue.cpp,lib/vf_settokenvalue.cpp:<global>,,<global>,,,1
141733921105,NAMESPACE_BLOCK,"namespace ValueFlow
{
    static Library::Container::Yield getContainerYield(Token* tok, const Settings& settings, Token*& parent)
    {
        if (Token::Match(tok, "". %name% ("") && tok->astParent() == tok->tokAt(2) && tok->astOperand1() &&
            tok->astOperand1()->valueType()) {
            const Library::Container* c = getLibraryContainer(tok->astOperand1());
            parent = tok->astParent();
            return c ? c->getYield(tok->strAt(1)) : Library::Container::Yield::NO_YIELD;
        }
        if (Token::Match(tok->previous(), ""%name% ("")) {
            parent = tok;
            if (const Library::Function* f = settings.library.getFunction(tok->previous())) {
                return f->containerYield;
            }
        }
        return Library::Container::Yield::NO_YIELD;
    }

    static Value truncateImplicitConversion(Token* parent, const Value& value, const Settings& settings)
    {
        if (!value.isIntValue() && !value.isFloatValue())
            ret...",1,lib/vf_settokenvalue.cpp,ValueFlow,48,ValueFlow,,,1
141733921106,NAMESPACE_BLOCK,<empty>,,lib/vf_settokenvalue.h,lib/vf_settokenvalue.h:<global>,,<global>,,,1
141733921107,NAMESPACE_BLOCK,<empty>,,lib/vfvalue.cpp,lib/vfvalue.cpp:<global>,,<global>,,,1
141733921108,NAMESPACE_BLOCK,"namespace ValueFlow {
    Value::Value(const Token *c, MathLib::bigint val, Bound b)
        : bound(b),
        safe(false),
        conditional(false),
        macro(false),
        defaultArg(false),
        intvalue(val),
        varvalue(val),
        condition(c) {
        errorPath.emplace_back(c, ""Assuming that condition '"" + c->expressionString() + ""' is not redundant"");
    }

    void Value::assumeCondition(const Token *tok) {
        condition = tok;
        errorPath.emplace_back(tok, ""Assuming that condition '"" + tok->expressionString() + ""' is not redundant"");
    }

    std::string Value::toString() const {
        std::stringstream ss;
        if (this->isImpossible())
            ss << ""!"";
        if (this->bound == Bound::Lower)
            ss << "">="";
        if (this->bound == Bound::Upper)
            ss << ""<="";
        switch (this->valueType) {
        case ValueType::INT:
            ss << this->intvalue;
            break;
        case ValueType::TOK:
   ...",1,lib/vfvalue.cpp,ValueFlow,28,ValueFlow,,,1
141733921109,NAMESPACE_BLOCK,<empty>,,lib/vfvalue.h,lib/vfvalue.h:<global>,,<global>,,,1
141733921110,NAMESPACE_BLOCK,<empty>,,lib/xml.h,lib/xml.h:<global>,,<global>,,,1
141733921111,NAMESPACE_BLOCK,<empty>,,oss-fuzz/main.cpp,oss-fuzz/main.cpp:<global>,,<global>,,,1
141733921112,NAMESPACE_BLOCK,<empty>,,oss-fuzz/translate.cpp,oss-fuzz/translate.cpp:<global>,,<global>,,,1
141733921113,NAMESPACE_BLOCK,<empty>,,oss-fuzz/type2.cpp,oss-fuzz/type2.cpp:<global>,,<global>,,,1
141733921114,NAMESPACE_BLOCK,<empty>,,oss-fuzz/type2.h,oss-fuzz/type2.h:<global>,,<global>,,,1
141733921115,NAMESPACE_BLOCK,<empty>,,samples/AssignmentAddressToInteger/bad.c,samples/AssignmentAddressToInteger/bad.c:<global>,,<global>,,,1
141733921116,NAMESPACE_BLOCK,<empty>,,samples/AssignmentAddressToInteger/good.c,samples/AssignmentAddressToInteger/good.c:<global>,,<global>,,,1
141733921117,NAMESPACE_BLOCK,<empty>,,samples/accessMoved/bad.cpp,samples/accessMoved/bad.cpp:<global>,,<global>,,,1
141733921118,NAMESPACE_BLOCK,<empty>,,samples/accessMoved/good.cpp,samples/accessMoved/good.cpp:<global>,,<global>,,,1
141733921119,NAMESPACE_BLOCK,<empty>,,samples/arrayIndexOutOfBounds_1/bad.c,samples/arrayIndexOutOfBounds_1/bad.c:<global>,,<global>,,,1
141733921120,NAMESPACE_BLOCK,<empty>,,samples/arrayIndexOutOfBounds_1/good.c,samples/arrayIndexOutOfBounds_1/good.c:<global>,,<global>,,,1
141733921121,NAMESPACE_BLOCK,<empty>,,samples/arrayIndexOutOfBounds_2/bad.c,samples/arrayIndexOutOfBounds_2/bad.c:<global>,,<global>,,,1
141733921122,NAMESPACE_BLOCK,<empty>,,samples/arrayIndexOutOfBounds_2/good.c,samples/arrayIndexOutOfBounds_2/good.c:<global>,,<global>,,,1
141733921123,NAMESPACE_BLOCK,<empty>,,samples/autoVariables/bad.c,samples/autoVariables/bad.c:<global>,,<global>,,,1
141733921124,NAMESPACE_BLOCK,<empty>,,samples/autoVariables/good.c,samples/autoVariables/good.c:<global>,,<global>,,,1
141733921125,NAMESPACE_BLOCK,<empty>,,samples/bufferAccessOutOfBounds/bad.c,samples/bufferAccessOutOfBounds/bad.c:<global>,,<global>,,,1
141733921126,NAMESPACE_BLOCK,<empty>,,samples/bufferAccessOutOfBounds/good.c,samples/bufferAccessOutOfBounds/good.c:<global>,,<global>,,,1
141733921127,NAMESPACE_BLOCK,<empty>,,samples/incorrectLogicOperator/bad.c,samples/incorrectLogicOperator/bad.c:<global>,,<global>,,,1
141733921128,NAMESPACE_BLOCK,<empty>,,samples/incorrectLogicOperator/good.c,samples/incorrectLogicOperator/good.c:<global>,,<global>,,,1
141733921129,NAMESPACE_BLOCK,<empty>,,samples/invalidContainer/bad.cpp,samples/invalidContainer/bad.cpp:<global>,,<global>,,,1
141733921130,NAMESPACE_BLOCK,<empty>,,samples/invalidContainer/good.cpp,samples/invalidContainer/good.cpp:<global>,,<global>,,,1
141733921131,NAMESPACE_BLOCK,<empty>,,samples/memleak/bad.c,samples/memleak/bad.c:<global>,,<global>,,,1
141733921132,NAMESPACE_BLOCK,<empty>,,samples/memleak/good.c,samples/memleak/good.c:<global>,,<global>,,,1
141733921133,NAMESPACE_BLOCK,<empty>,,samples/multiCondition/bad.c,samples/multiCondition/bad.c:<global>,,<global>,,,1
141733921134,NAMESPACE_BLOCK,<empty>,,samples/multiCondition/good.c,samples/multiCondition/good.c:<global>,,<global>,,,1
141733921135,NAMESPACE_BLOCK,<empty>,,samples/passedByValue_1/bad.cpp,samples/passedByValue_1/bad.cpp:<global>,,<global>,,,1
141733921136,NAMESPACE_BLOCK,<empty>,,samples/passedByValue_1/good.cpp,samples/passedByValue_1/good.cpp:<global>,,<global>,,,1
141733921137,NAMESPACE_BLOCK,<empty>,,samples/passedByValue_2/bad.cpp,samples/passedByValue_2/bad.cpp:<global>,,<global>,,,1
141733921138,NAMESPACE_BLOCK,<empty>,,samples/passedByValue_2/good.cpp,samples/passedByValue_2/good.cpp:<global>,,<global>,,,1
141733921139,NAMESPACE_BLOCK,<empty>,,samples/resourceLeak/bad.c,samples/resourceLeak/bad.c:<global>,,<global>,,,1
141733921140,NAMESPACE_BLOCK,<empty>,,samples/resourceLeak/good.c,samples/resourceLeak/good.c:<global>,,<global>,,,1
141733921141,NAMESPACE_BLOCK,<empty>,,samples/syntaxError/bad.c,samples/syntaxError/bad.c:<global>,,<global>,,,1
141733921142,NAMESPACE_BLOCK,<empty>,,samples/syntaxError/good.c,samples/syntaxError/good.c:<global>,,<global>,,,1
141733921143,NAMESPACE_BLOCK,<empty>,,samples/unreadVariable/bad.cpp,samples/unreadVariable/bad.cpp:<global>,,<global>,,,1
141733921144,NAMESPACE_BLOCK,<empty>,,samples/unreadVariable/good.cpp,samples/unreadVariable/good.cpp:<global>,,<global>,,,1
141733921145,NAMESPACE_BLOCK,<empty>,,tools/defines/float.c,tools/defines/float.c:<global>,,<global>,,,1
141733921146,NAMESPACE_BLOCK,<empty>,,tools/defines/limits.c,tools/defines/limits.c:<global>,,<global>,,,1
141733921147,NAMESPACE_BLOCK,<empty>,,tools/defines/stdint.c,tools/defines/stdint.c:<global>,,<global>,,,1
141733921148,NAMESPACE_BLOCK,<empty>,,tools/dmake/dmake.cpp,tools/dmake/dmake.cpp:<global>,,<global>,,,1
141733921149,NAMESPACE_BLOCK,<empty>,,tools/triage/main.cpp,tools/triage/main.cpp:<global>,,<global>,,,1
141733921150,NAMESPACE_BLOCK,<empty>,,tools/triage/mainwindow.cpp,tools/triage/mainwindow.cpp:<global>,,<global>,,,1
141733921151,NAMESPACE_BLOCK,<empty>,,tools/triage/mainwindow.h,tools/triage/mainwindow.h:<global>,,<global>,,,1
141733921152,NAMESPACE_BLOCK,<empty>,,<includes>,<includes>:<global>,,<global>,,,1
