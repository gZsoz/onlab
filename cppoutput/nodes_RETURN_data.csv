146028888064,RETURN,1,,return false;,13,71,,,1
146028888065,RETURN,-1,,return true;,5,83,,,6
146028888066,RETURN,-1,,return true;,9,104,,,3
146028888067,RETURN,-1,,return false;,5,106,,,4
146028888068,RETURN,1,,return false;,9,113,,,1
146028888069,RETURN,-1,,return true;,5,115,,,4
146028888070,RETURN,-1,,return Path::isHeader(i);,9,185,,,1
146028888071,RETURN,-1,,"return matchglobs(mSettings.fileFilters, fs.filename());",17,205,,,1
146028888072,RETURN,-1,,return !mSettings.library.markupFile(fs.filename()) || !mSettings.library.processMarkupAfterCode(fs.filename());,13,253,,,1
146028888073,RETURN,-1,,return mSettings.library.markupFile(fs.filename()) && mSettings.library.processMarkupAfterCode(fs.filename());,13,257,,,1
146028888074,RETURN,-1,,return entry.path() == name;,21,301,,,1
146028888075,RETURN,-1,,"return matchglobs(mSettings.fileFilters, entry.path());",17,310,,,1
146028888076,RETURN,-1,,return !mSettings.library.markupFile(entry.path()) || !mSettings.library.processMarkupAfterCode(entry.path());,13,358,,,1
146028888077,RETURN,-1,,return mSettings.library.markupFile(entry.path()) && mSettings.library.processMarkupAfterCode(entry.path());,13,362,,,1
146028888078,RETURN,-1,,return true;,9,151,,,7
146028888079,RETURN,-1,,return false;,9,153,,,10
146028888080,RETURN,1,,return false;,9,159,,,1
146028888081,RETURN,1,,return false;,9,162,,,1
146028888082,RETURN,-1,,return false;,17,209,,,2
146028888083,RETURN,-1,,return false;,13,262,,,2
146028888084,RETURN,-1,,return false;,13,291,,,3
146028888085,RETURN,-1,,return false;,17,314,,,2
146028888086,RETURN,-1,,return false;,13,367,,,2
146028888087,RETURN,-1,,return true;,5,371,,,19
146028888088,RETURN,-1,,return Result::Exit;,9,385,,,2
146028888089,RETURN,-1,,return Result::Exit;,13,403,,,4
146028888090,RETURN,1,,return Result::Fail;,17,409,,,1
146028888091,RETURN,-1,,return Result::Exit;,13,416,,,3
146028888092,RETURN,-1,,return Result::Exit;,13,422,,,2
146028888093,RETURN,-1,,return Result::Exit;,13,429,,,1
146028888094,RETURN,1,,return Result::Fail;,17,434,,,1
146028888095,RETURN,-1,,return Result::Exit;,13,437,,,5
146028888096,RETURN,-1,,return Result::Fail;,21,462,,,2
146028888097,RETURN,-1,,return Result::Fail;,21,498,,,2
146028888098,RETURN,-1,,return Result::Fail;,21,526,,,2
146028888099,RETURN,-1,,return Result::Fail;,17,564,,,2
146028888100,RETURN,1,,return Result::Fail;,17,580,,,1
146028888101,RETURN,-1,,return Result::Fail;,17,585,,,2
146028888102,RETURN,1,,return Result::Fail;,17,594,,,1
146028888103,RETURN,-1,,return Result::Fail;,17,615,,,2
146028888104,RETURN,-1,,return Result::Fail;,17,623,,,2
146028888105,RETURN,-1,,return Result::Fail;,17,666,,,2
146028888106,RETURN,-1,,return Result::Fail;,17,686,,,2
146028888107,RETURN,-1,,return Result::Fail;,17,702,,,2
146028888108,RETURN,1,,return Result::Fail;,17,715,,,1
146028888109,RETURN,-1,,return Result::Fail;,13,724,,,2
146028888110,RETURN,-1,,return Result::Fail;,13,740,,,2
146028888111,RETURN,-1,,return Result::Fail;,17,756,,,2
146028888112,RETURN,-1,,return Result::Fail;,17,765,,,2
146028888113,RETURN,-1,,return Result::Fail;,17,770,,,2
146028888114,RETURN,-1,,return Result::Fail;,17,782,,,2
146028888115,RETURN,-1,,return Result::Fail;,17,787,,,2
146028888116,RETURN,-1,,return Result::Fail;,21,797,,,2
146028888117,RETURN,-1,,return Result::Fail;,17,810,,,2
146028888118,RETURN,-1,,return Result::Fail;,21,833,,,2
146028888119,RETURN,-1,,return Result::Fail;,17,857,,,2
146028888120,RETURN,-1,,return Result::Fail;,21,878,,,2
146028888121,RETURN,-1,,return Result::Fail;,17,892,,,2
146028888122,RETURN,-1,,return Result::Fail;,17,899,,,2
146028888123,RETURN,-1,,return Result::Fail;,17,905,,,2
146028888124,RETURN,-1,,return Result::Fail;,13,938,,,2
146028888125,RETURN,-1,,return Result::Fail;,21,951,,,2
146028888126,RETURN,-1,,return Result::Fail;,17,962,,,2
146028888127,RETURN,-1,,return Result::Fail;,21,972,,,2
146028888128,RETURN,1,,return Result::Fail;,17,982,,,1
146028888129,RETURN,-1,,return Result::Fail;,17,985,,,2
146028888130,RETURN,1,,return Result::Fail;,17,997,,,1
146028888131,RETURN,1,,return Result::Fail;,17,1007,,,1
146028888132,RETURN,-1,,return Result::Fail;,17,1040,,,2
146028888133,RETURN,1,,return Result::Fail;,17,1050,,,1
146028888134,RETURN,1,,return Result::Fail;,17,1055,,,1
146028888135,RETURN,1,,return Result::Fail;,17,1060,,,1
146028888136,RETURN,-1,,return Result::Fail;,17,1071,,,2
146028888137,RETURN,-1,,return Result::Fail;,17,1095,,,6
146028888138,RETURN,-1,,return Result::Fail;,17,1139,,,2
146028888139,RETURN,-1,,return Result::Fail;,17,1157,,,2
146028888140,RETURN,-1,,return Result::Fail;,25,1179,,,2
146028888141,RETURN,-1,,return Result::Fail;,25,1190,,,2
146028888142,RETURN,-1,,return Result::Fail;,17,1201,,,2
146028888143,RETURN,-1,,return Result::Fail;,17,1205,,,2
146028888144,RETURN,-1,,return Result::Fail;,17,1209,,,2
146028888145,RETURN,-1,,return Result::Fail;,17,1243,,,2
146028888146,RETURN,1,,return Result::Fail;,17,1254,,,1
146028888147,RETURN,-1,,return Result::Fail;,17,1275,,,2
146028888148,RETURN,-1,,return Result::Fail;,13,1293,,,2
146028888149,RETURN,-1,,return Result::Fail;,13,1380,,,2
146028888150,RETURN,-1,,return Result::Fail;,17,1409,,,2
146028888151,RETURN,-1,,return Result::Fail;,17,1413,,,2
146028888152,RETURN,-1,,return Result::Fail;,17,1422,,,2
146028888153,RETURN,-1,,return Result::Fail;,17,1431,,,2
146028888154,RETURN,-1,,return Result::Fail;,17,1453,,,7
146028888155,RETURN,-1,,return Result::Fail;,17,1458,,,2
146028888156,RETURN,-1,,return Result::Fail;,17,1467,,,2
146028888157,RETURN,1,,return Result::Fail;,17,1508,,,1
146028888158,RETURN,1,,return Result::Fail;,17,1513,,,1
146028888159,RETURN,1,,return Result::Fail;,17,1518,,,1
146028888160,RETURN,1,,return Result::Fail;,17,1533,,,1
146028888161,RETURN,-1,,return Result::Fail;,17,1537,,,2
146028888162,RETURN,-1,,return Result::Fail;,13,1550,,,6
146028888163,RETURN,1,,return Result::Fail;,9,1555,,,1
146028888164,RETURN,-1,,return Result::Fail;,9,1590,,,2
146028888165,RETURN,-1,,return Result::Fail;,9,1595,,,2
146028888166,RETURN,-1,,return Result::Fail;,9,1602,,,2
146028888167,RETURN,-1,,return Result::Fail;,13,1629,,,3
146028888168,RETURN,-1,,return Result::Fail;,9,1637,,,2
146028888169,RETURN,-1,,return Result::Success;,5,1644,,,29
146028888170,RETURN,1,,return mSettings.cppcheckCfgProductName;,9,2026,,,1
146028888171,RETURN,1,,"return std::string(""Cppcheck "") + CppCheck::version() + "" (""+ extraVersion + ')';",9,2029,,,1
146028888172,RETURN,-1,,"return std::string(""Cppcheck "") + CppCheck::version();",5,2030,,,5
146028888173,RETURN,-1,,"return startsWith(mSettings.cppcheckCfgProductName, ""Cppcheck Premium"");",5,2036,,,2
146028888174,RETURN,-1,,return false;,9,2081,,,6
146028888175,RETURN,-1,,return true;,5,2083,,,4
146028888176,RETURN,-1,,return false;,9,2101,,,8
146028888177,RETURN,-1,,return result;,5,2110,,,5
146028888178,RETURN,-1,,return result;,5,2126,,,4
146028888179,RETURN,1,,return true;,9,2132,,,1
146028888180,RETURN,-1,,return false;,9,2136,,,2
146028888181,RETURN,-1,,return true;,5,2138,,,5
146028888182,RETURN,-1,,return ret;,13,127,,,4
146028888183,RETURN,-1,,return ret;,13,147,,,3
146028888184,RETURN,-1,,return results;,13,165,,,3
146028888185,RETURN,-1,,return picojson::value(runs);,13,180,,,13
146028888186,RETURN,-1,,return picojson::value(doc).serialize(true);,13,195,,,11
146028888187,RETURN,1,,"return ""error"";",17,201,,,1
146028888188,RETURN,-1,,"return ""warning"";",17,208,,,11
146028888189,RETURN,-1,,"return ""note"";",17,213,,,20
146028888190,RETURN,-1,,"return ""note"";",13,215,,,3
146028888191,RETURN,1,,"return ""medium"";",17,220,,,1
146028888192,RETURN,-1,,"return ""high"";",13,221,,,2
146028888193,RETURN,-1,,return !mCriticalErrors.empty();,13,286,,,1
146028888194,RETURN,-1,,return mCtuInfo;,13,290,,,1
146028888195,RETURN,-1,,return EXIT_FAILURE;,9,362,,,1
146028888196,RETURN,-1,,return EXIT_SUCCESS;,9,365,,,1
146028888197,RETURN,-1,,return ret;,5,377,,,14
146028888198,RETURN,-1,,"return check_internal(settings, supprs);",5,390,,,1
146028888199,RETURN,-1,,"return s.errorId == ""unmatchedSuppression"" && s.fileName.empty() && s.lineNumber == SuppressionList::Suppression::NO_LINE;",9,396,,,1
146028888200,RETURN,1,,return false;,9,398,,,1
146028888201,RETURN,-1,,return err;,5,422,,,9
146028888202,RETURN,1,,return EXIT_FAILURE;,9,490,,,1
146028888203,RETURN,1,,return settings.exitCode;,9,493,,,1
146028888204,RETURN,-1,,return EXIT_SUCCESS;,5,494,,,19
146028888205,RETURN,-1,,"return s.errorId == ""checkersReport"";",9,510,,,1
146028888206,RETURN,1,,return;,9,504,,,1
146028888207,RETURN,1,,return;,9,601,,,1
146028888208,RETURN,-1,,return;,9,625,,,4
146028888209,RETURN,-1,,return;,9,630,,,2
146028888210,RETURN,1,,return;,9,642,,,1
146028888211,RETURN,1,,return;,9,654,,,1
146028888212,RETURN,-1,,return -1;,9,701,,,1
146028888213,RETURN,-1,,return res;,9,716,,,1
146028888214,RETURN,-1,,return WEXITSTATUS(res);,9,720,,,1
146028888215,RETURN,-1,,return WTERMSIG(res);,9,723,,,1
146028888216,RETURN,-1,,return res;,5,726,,,17
146028888217,RETURN,1,,return true;,9,44,,,1
146028888218,RETURN,1,,return false;,13,51,,,1
146028888219,RETURN,1,,return true;,13,54,,,1
146028888220,RETURN,-1,,return true;,13,58,,,1
146028888221,RETURN,-1,,return false;,5,61,,,3
146028888222,RETURN,-1,,"return """";",9,207,,,2
146028888223,RETURN,1,,"return """";",9,212,,,1
146028888224,RETURN,-1,,"return """";",9,216,,,2
146028888225,RETURN,-1,,"return ""could not open directory '"" + path + ""' (errno: "" + std::to_string(err) + "")"";",9,224,,,3
146028888226,RETURN,-1,,return err;,25,251,,,1
146028888227,RETURN,-1,,"return ""could not stat file '"" + new_path + ""' (errno: "" + std::to_string(err) + "")"";",25,266,,,3
146028888228,RETURN,-1,,"return """";",5,278,,,14
146028888229,RETURN,-1,,return a.path() < b.path();,9,296,,,1
146028888230,RETURN,1,,"return ""no path specified"";",9,284,,,1
146028888231,RETURN,-1,,return err;,5,300,,,10
146028888232,RETURN,-1,,"return addFiles(files, path, extra, true, ignored, debug);",5,307,,,1
146028888233,RETURN,-1,,"return exec.check(argc, argv);",9,90,,,2
146028888234,RETURN,-1,,return suppr_str;,13,116,,,7
146028888235,RETURN,1,,return true;,13,166,,,1
146028888236,RETURN,-1,,return false;,9,172,,,3
146028888237,RETURN,-1,,return res;,5,261,,,22
146028888238,RETURN,-1,,return true;,9,271,,,1
146028888239,RETURN,-1,,return true;,9,277,,,1
146028888240,RETURN,-1,,return true;,9,280,,,1
146028888241,RETURN,-1,,return false;,5,282,,,6
146028888242,RETURN,-1,,return v + p.size();,9,292,,,1
146028888243,RETURN,-1,,return entry.path() == name;,37,390,,,1
146028888244,RETURN,-1,,return result;,5,446,,,18
146028888245,RETURN,-1,,return v + f.size();,9,46,,,1
146028888246,RETURN,-1,,return result;,5,78,,,13
146028888247,RETURN,1,,return;,13,63,,,1
146028888248,RETURN,-1,,return v + p.size();,13,91,,,1
146028888249,RETURN,-1,,return true;,13,102,,,5
146028888250,RETURN,-1,,return true;,13,109,,,5
146028888251,RETURN,-1,,return false;,9,112,,,4
146028888252,RETURN,-1,,return result;,9,146,,,6
146028888253,RETURN,-1,,return v + f.get();,9,212,,,1
146028888254,RETURN,-1,,return result;,5,218,,,9
146028888255,RETURN,-1,,return EXIT_SUCCESS;,9,113,,,2
146028888256,RETURN,-1,,return EXIT_SUCCESS;,5,139,,,30
146028888257,RETURN,-1,,"return s.size()>2 && (s.compare(0,2,""0x"")==0 || s.compare(0,2,""0X"")==0);",5,62,,,1
146028888258,RETURN,-1,,return s.size()>1 && (s[0]=='0') && (s[1] >= '0') && (s[1] < '8');,5,67,,,1
146028888259,RETURN,-1,,"return s.size() > 1 && (s[0]=='\\""') && (*s.rbegin()=='\\""');",5,73,,,1
146028888260,RETURN,-1,,return s.size() > 1 && (s[0]=='\\'') && (*s.rbegin()=='\\'');,5,81,,,1
146028888261,RETURN,-1,,return ostr.str();,5,110,,,3
146028888262,RETURN,-1,,return ret;,5,133,,,10
146028888263,RETURN,-1,,return ret;,5,147,,,10
146028888264,RETURN,-1,,"return (s.size() >= e.size()) && std::equal(e.rbegin(), e.rend(), s.rbegin());",5,152,,,1
146028888265,RETURN,-1,,return tok1 && tok2 && tok1->location.sameline(tok2->location);,5,157,,,1
146028888266,RETURN,-1,,"return (tok->name &&
            tok->str() == alt &&
            tok->previous &&
            tok->next &&
            (tok->previous->number || tok->previous->name || tok->previous->op == ')') &&
            (tok->next->number || tok->next->name || tok->next->op == '('));",5,162,,,1
146028888267,RETURN,-1,,"return ((tok->name && tok->str() == alt) &&
            (!tok->previous || tok->previous->op == '(') &&
            (tok->next && (tok->next->name || tok->next->number)));",5,172,,,1
146028888268,RETURN,-1,,return s;,5,181,,,2
146028888269,RETURN,-1,,return;,9,190,,,2
146028888270,RETURN,-1,,"return (op != '\\0') && (std::strchr(ops, op) != nullptr);",5,206,,,1
146028888271,RETURN,-1,,"return std::strchr(c, string[0]) != nullptr;",5,211,,,1
146028888272,RETURN,-1,,"return std::strchr(c, string[string.size() - 1U]) != nullptr;",5,216,,,1
146028888273,RETURN,-1,,return ch;,9,279,,,5
146028888274,RETURN,-1,,return ch;,9,299,,,5
146028888275,RETURN,-1,,return (bom == 0xfeff) ? (ch<<8 | ch2) : (ch2<<8 | ch);,9,318,,,1
146028888276,RETURN,1,,return byte | static_cast<unsigned char>(get());,17,329,,,1
146028888277,RETURN,-1,,return 0;,13,331,,,6
146028888278,RETURN,-1,,return 0;,21,341,,,2
146028888279,RETURN,-1,,return 0;,9,348,,,5
146028888280,RETURN,-1,,return istr.get();,9,366,,,1
146028888281,RETURN,-1,,return istr.peek();,9,369,,,1
146028888282,RETURN,-1,,return istr.good();,9,375,,,1
146028888283,RETURN,1,,return lastStatus = EOF;,13,395,,,1
146028888284,RETURN,-1,,return str[pos++];,9,396,,,2
146028888285,RETURN,1,,return lastStatus = EOF;,13,400,,,1
146028888286,RETURN,-1,,return str[pos];,9,401,,,2
146028888287,RETURN,-1,,return lastStatus != EOF;,9,407,,,1
146028888288,RETURN,-1,,return lastCh;,9,438,,,2
146028888289,RETURN,-1,,return ch;,9,444,,,4
146028888290,RETURN,-1,,return lastStatus != EOF;,9,450,,,1
146028888291,RETURN,-1,,return *this;,5,531,,,2
146028888292,RETURN,-1,,return *this;,5,546,,,2
146028888293,RETURN,-1,,return ret.str();,5,599,,,5
146028888294,RETURN,-1,,return std::isalnum(ch) || ch == '_' || ch == '$';,5,604,,,1
146028888295,RETURN,-1,,return ostr.str();,5,618,,,5
146028888296,RETURN,1,,return;,9,624,,,1
146028888297,RETURN,-1,,"return str == ""u"" || str == ""U"" || str == ""L"" || str == ""u8"" ||
           str == ""R"" || str == ""uR"" || str == ""UR"" || str == ""LR"" || str == ""u8R"";",5,634,,,1
146028888298,RETURN,-1,,return;,9,643,,,3
146028888299,RETURN,-1,,return;,9,651,,,4
146028888300,RETURN,-1,,return;,13,685,,,3
146028888301,RETURN,-1,,return;,21,844,,,2
146028888302,RETURN,-1,,return;,21,857,,,2
146028888303,RETURN,1,,return;,17,875,,,1
146028888304,RETURN,1,,return;,21,912,,,1
146028888305,RETURN,1,,return false;,9,965,,,1
146028888306,RETURN,-1,,return c == 'f' || c == 'l';,5,967,,,4
146028888307,RETURN,-1,,"return """";",9,1399,,,3
146028888308,RETURN,-1,,return ret;,5,1402,,,9
146028888309,RETURN,1,,"return """";",13,1416,,,1
146028888310,RETURN,-1,,return ret;,5,1430,,,6
146028888311,RETURN,1,,return nullptr;,13,1443,,,1
146028888312,RETURN,-1,,return prevTok;,5,1446,,,6
146028888313,RETURN,-1,,return prevTok && prevTok->op == '#';,5,1452,,,3
146028888314,RETURN,1,,return i;,13,1459,,,1
146028888315,RETURN,-1,,return files.size() - 1U;,5,1462,,,3
146028888316,RETURN,-1,,"return ""Invalid ## usage when expanding \\'"" + macroName + ""\\': "" + message;",17,1662,,,1
146028888317,RETURN,-1,,"return invalidHashHash(loc, macroName, ""Unexpected token '""+ tokenA->str()+""'"");",17,1669,,,1
146028888318,RETURN,-1,,"return invalidHashHash(loc, macroName, ""Combining '""+ tokenA->str()+ ""' and '""+ tokenB->str() + ""' yields an invalid token."");",17,1673,,,1
146028888319,RETURN,-1,,"return invalidHashHash(loc, macroName, ""Unexpected newline"");",17,1677,,,1
146028888320,RETURN,-1,,"return invalidHashHash(loc, macroName, ""Combining '\\\\""+ tokenA->str()+ ""' and '""+ strAB.substr(tokenA->str().size()) + ""' yields universal character '\\\\"" + strAB + ""'. This is undefined behavior according to C standard chapter 5.1.1.2, paragraph 4."");",17,1681,,,1
146028888321,RETURN,-1,,return *this;,13,1518,,,2
146028888322,RETURN,-1,,return valueDefinedInCode_;,13,1522,,,1
146028888323,RETURN,-1,,return rawtok;,13,1621,,,7
146028888324,RETURN,-1,,return nameTokDef->str();,13,1626,,,1
146028888325,RETURN,-1,,return nameTokDef->location;,13,1631,,,1
146028888326,RETURN,-1,,return usageList;,13,1636,,,1
146028888327,RETURN,-1,,"return nameTokDef->next &&
                   nameTokDef->next->op == '(' &&
                   sameline(nameTokDef, nameTokDef->next) &&
                   nameTokDef->next->location.col == nameTokDef->location.col + nameTokDef->str().size();",13,1641,,,1
146028888328,RETURN,-1,,return tok;,13,1692,,,5
146028888329,RETURN,-1,,return false;,17,1701,,,3
146028888330,RETURN,-1,,return false;,21,1724,,,3
146028888331,RETURN,-1,,return true;,13,1737,,,8
146028888332,RETURN,1,,return par;,21,1744,,,1
146028888333,RETURN,-1,,return ~0U;,13,1747,,,4
146028888334,RETURN,1,,return std::vector<const Token *>();,17,1752,,,1
146028888335,RETURN,-1,,return parametertokens;,13,1769,,,7
146028888336,RETURN,1,,return nullptr;,17,1779,,,1
146028888337,RETURN,-1,,"return sameline(lpar,tok) ? tok : nullptr;",13,1807,,,8
146028888338,RETURN,-1,,return nameTokInst->next;,17,1821,,,2
146028888339,RETURN,-1,,return nameTokInst->next;,17,1825,,,2
146028888340,RETURN,-1,,return nameTokInst->next;,17,1829,,,2
146028888341,RETURN,-1,,return nameTokInst->next;,21,1841,,,2
146028888342,RETURN,-1,,return functionLike() ? parametertokens2.back()->next : nameTokInst->next;,13,1963,,,20
146028888343,RETURN,-1,,return tok->next;,17,1969,,,2
146028888344,RETURN,-1,,return tok->next;,17,1974,,,2
146028888345,RETURN,-1,,return tok->next;,17,1980,,,2
146028888346,RETURN,-1,,return tok->next;,17,1986,,,2
146028888347,RETURN,1,,return tok->next;,17,1994,,,1
146028888348,RETURN,-1,,return tok2->next;,13,1998,,,18
146028888349,RETURN,-1,,return tok->next;,17,2005,,,2
146028888350,RETURN,1,,return tok->next->next;,33,2021,,,1
146028888351,RETURN,-1,,"return recursiveExpandToken(output, temp, loc, tok, macros, expandedmacros, parametertokens);",21,2033,,,2
146028888352,RETURN,-1,,"return recursiveExpandToken(output, temp, loc, tok, macros, expandedmacros2, parametertokens);",21,2047,,,4
146028888353,RETURN,-1,,return tok->next;,21,2051,,,2
146028888354,RETURN,-1,,return tok->next;,21,2065,,,2
146028888355,RETURN,-1,,"return recursiveExpandToken(output, temp, loc, tok2, macros, expandedmacros, parametertokens);",17,2069,,,17
146028888356,RETURN,-1,,return lastToken->next;,21,2098,,,7
146028888357,RETURN,-1,,return tok->next;,13,2103,,,8
146028888358,RETURN,1,,return false;,17,2108,,,1
146028888359,RETURN,1,,return false;,17,2112,,,1
146028888360,RETURN,1,,return true;,17,2116,,,1
146028888361,RETURN,-1,,return true;,13,2121,,,7
146028888362,RETURN,1,,return false;,17,2126,,,1
146028888363,RETURN,1,,return false;,17,2129,,,1
146028888364,RETURN,1,,return true;,17,2131,,,1
146028888365,RETURN,-1,,return true;,13,2146,,,8
146028888366,RETURN,-1,,return tok;,13,2172,,,10
146028888367,RETURN,-1,,return nextTok;,13,2293,,,21
146028888368,RETURN,1,,return false;,17,2300,,,1
146028888369,RETURN,-1,,return (it != expandedmacros.end());,13,2302,,,5
146028888370,RETURN,-1,,return path.length() > 1U && path[0] == '/';,5,2550,,,1
146028888371,RETURN,1,,return path;,13,2561,,,1
146028888372,RETURN,-1,,"return strpbrk(path.c_str(), ""*?"") == nullptr ? realFilename(path) : path;",9,2626,,,14
146028888373,RETURN,-1,,"return !std_ver.empty() && (std_ver >= ""201703L"");",5,2681,,,3
146028888374,RETURN,1,,return;,9,2688,,,1
146028888375,RETURN,-1,,return value;,5,2787,,,10
146028888376,RETURN,1,,return static_cast<char>(multivalue);,9,3000,,,1
146028888377,RETURN,1,,return static_cast<int>(multivalue);,9,3004,,,1
146028888378,RETURN,-1,,return multivalue;,5,3008,,,18
146028888379,RETURN,-1,,return expr.cfront() && expr.cfront() == expr.cback() && expr.cfront()->number ? stringToLL(expr.cfront()->str()) : 0LL;,5,3042,,,7
146028888380,RETURN,-1,,return tok;,5,3051,,,6
146028888381,RETURN,1,,return simplePath;,9,3093,,,1
146028888382,RETURN,-1,,"return """";",5,3097,,,5
146028888383,RETURN,1,,"return simplecpp::simplifyPath(sourcefile.substr(0, sourcefile.find_last_of(""\\\\/"") + 1U) + header);",9,3103,,,1
146028888384,RETURN,-1,,return simplecpp::simplifyPath(header);,5,3104,,,2
146028888385,RETURN,-1,,"return openHeader(f, getRelativeFileName(sourcefile, header));",5,3109,,,1
146028888386,RETURN,-1,,return path + header;,5,3117,,,4
146028888387,RETURN,1,,return simplePath;,13,3125,,,1
146028888388,RETURN,-1,,"return """";",5,3127,,,2
146028888389,RETURN,1,,"return openHeader(f, header);",9,3133,,,1
146028888390,RETURN,-1,,return ret;,9,3139,,,2
146028888391,RETURN,1,,"return openHeaderIncludePath(f, dui, header);",9,3144,,,1
146028888392,RETURN,-1,,return ret;,5,3145,,,6
146028888393,RETURN,-1,,"return """";",9,3151,,,1
146028888394,RETURN,-1,,"return (filedata.find(header) != filedata.end()) ? simplecpp::simplifyPath(header) : """";",9,3154,,,1
146028888395,RETURN,1,,return relativeFilename;,13,3160,,,1
146028888396,RETURN,1,,return s;,13,3166,,,1
146028888397,RETURN,1,,return header;,9,3170,,,1
146028888398,RETURN,-1,,"return """";",5,3172,,,6
146028888399,RETURN,-1,,"return !getFileName(filedata, sourcefile, header, dui, systemheader).empty();",5,3177,,,1
146028888400,RETURN,-1,,return ret;,5,3261,,,5
146028888401,RETURN,-1,,return false;,13,3280,,,2
146028888402,RETURN,-1,,return true;,5,3288,,,6
146028888403,RETURN,-1,,"return std::string(""\\"""").append(buf).append(""\\"""");",5,3307,,,4
146028888404,RETURN,-1,,"return std::string(""\\"""").append(buf).append(""\\"""");",5,3314,,,4
146028888405,RETURN,-1,,return;,17,3388,,,3
146028888406,RETURN,-1,,return;,17,3443,,,3
146028888407,RETURN,-1,,return;,21,3461,,,2
146028888408,RETURN,-1,,return;,21,3486,,,3
146028888409,RETURN,-1,,return;,25,3499,,,2
146028888410,RETURN,-1,,return;,21,3526,,,3
146028888411,RETURN,-1,,return;,21,3578,,,3
146028888412,RETURN,-1,,return;,33,3623,,,3
146028888413,RETURN,-1,,return;,33,3665,,,3
146028888414,RETURN,-1,,return;,29,3675,,,2
146028888415,RETURN,-1,,return;,25,3704,,,3
146028888416,RETURN,-1,,return;,13,3760,,,2
146028888417,RETURN,1,,return C89;,9,3805,,,1
146028888418,RETURN,1,,return C99;,9,3807,,,1
146028888419,RETURN,1,,return C11;,9,3809,,,1
146028888420,RETURN,1,,return C17;,9,3811,,,1
146028888421,RETURN,1,,return C23;,9,3813,,,1
146028888422,RETURN,-1,,return CUnknown;,5,3814,,,6
146028888423,RETURN,-1,,"return """";",9,3822,,,3
146028888424,RETURN,-1,,"return ""199901L"";",9,3824,,,6
146028888425,RETURN,-1,,"return ""201112L"";",9,3826,,,9
146028888426,RETURN,-1,,"return ""201710L"";",9,3828,,,12
146028888427,RETURN,-1,,"return ""202311L"";",9,3834,,,15
146028888428,RETURN,-1,,"return """";",9,3836,,,18
146028888429,RETURN,-1,,"return """";",5,3838,,,2
146028888430,RETURN,-1,,return getCStdString(getCStd(std));,5,3843,,,1
146028888431,RETURN,1,,return CPP03;,9,3849,,,1
146028888432,RETURN,1,,return CPP11;,9,3851,,,1
146028888433,RETURN,1,,return CPP14;,9,3853,,,1
146028888434,RETURN,1,,return CPP17;,9,3855,,,1
146028888435,RETURN,1,,return CPP20;,9,3857,,,1
146028888436,RETURN,1,,return CPP23;,9,3859,,,1
146028888437,RETURN,1,,return CPP26;,9,3861,,,1
146028888438,RETURN,-1,,return CPPUnknown;,5,3862,,,8
146028888439,RETURN,-1,,"return ""199711L"";",9,3869,,,3
146028888440,RETURN,-1,,"return ""201103L"";",9,3871,,,6
146028888441,RETURN,-1,,"return ""201402L"";",9,3873,,,9
146028888442,RETURN,-1,,"return ""201703L"";",9,3875,,,12
146028888443,RETURN,-1,,"return ""202002L"";",9,3878,,,15
146028888444,RETURN,-1,,"return ""202302L"";",9,3884,,,18
146028888445,RETURN,-1,,"return ""202400L"";",9,3887,,,21
146028888446,RETURN,-1,,"return """";",9,3889,,,24
146028888447,RETURN,-1,,"return """";",5,3891,,,2
146028888448,RETURN,-1,,return getCppStdString(getCppStd(std));,5,3896,,,1
146028888449,RETURN,-1,,return len;,3,98,,,4
146028888450,RETURN,-1,,return;,9,166,,,1
146028888451,RETURN,-1,,return p + length;,13,226,,,2
146028888452,RETURN,-1,,return 0;,5,233,,,11
146028888453,RETURN,-1,,return 0;,9,240,,,1
146028888454,RETURN,-1,,return 0;,9,243,,,1
146028888455,RETURN,-1,,return p;,5,253,,,8
146028888456,RETURN,-1,,return _start;,5,383,,,5
146028888457,RETURN,-1,,return p;,5,418,,,8
146028888458,RETURN,-1,,return;,9,442,,,2
146028888459,RETURN,-1,,return 0;,17,491,,,1
146028888460,RETURN,-1,,return 0;,17,497,,,1
146028888461,RETURN,-1,,return 0;,21,517,,,1
146028888462,RETURN,-1,,return 0;,17,533,,,1
146028888463,RETURN,-1,,return 0;,17,539,,,1
146028888464,RETURN,-1,,return 0;,21,556,,,1
146028888465,RETURN,-1,,return p + delta + 1;,9,565,,,12
146028888466,RETURN,-1,,return p+1;,5,567,,,3
146028888467,RETURN,-1,,return true;,13,622,,,2
146028888468,RETURN,-1,,return true;,13,627,,,1
146028888469,RETURN,-1,,return false;,5,630,,,2
146028888470,RETURN,-1,,return true;,9,636,,,1
146028888471,RETURN,-1,,return false;,5,638,,,2
146028888472,RETURN,-1,,return true;,9,646,,,2
146028888473,RETURN,-1,,return true;,13,654,,,2
146028888474,RETURN,-1,,return true;,13,660,,,2
146028888475,RETURN,-1,,return false;,5,663,,,10
146028888476,RETURN,-1,,return true;,9,670,,,1
146028888477,RETURN,-1,,return false;,5,672,,,2
146028888478,RETURN,-1,,return true;,9,679,,,1
146028888479,RETURN,-1,,return false;,5,681,,,2
146028888480,RETURN,-1,,return true;,13,691,,,2
146028888481,RETURN,-1,,return true;,13,698,,,2
146028888482,RETURN,-1,,return false;,2,701,,,2
146028888483,RETURN,-1,,return true;,9,709,,,2
146028888484,RETURN,-1,,return false;,5,711,,,4
146028888485,RETURN,-1,,return p;,9,725,,,3
146028888486,RETURN,-1,,return p;,5,791,,,37
146028888487,RETURN,-1,,return visitor->VisitExit( *this );,5,805,,,3
146028888488,RETURN,-1,,return count;,2,844,,,6
146028888489,RETURN,-1,,return count;,2,857,,,6
146028888490,RETURN,1,,return 0;,9,864,,,1
146028888491,RETURN,-1,,return _value.GetStr();,5,865,,,2
146028888492,RETURN,1,,return 0;,14,881,,,1
146028888493,RETURN,-1,,return clone;,2,888,,,5
146028888494,RETURN,-1,,return 0;,9,943,,,2
146028888495,RETURN,-1,,return addThis;,5,964,,,6
146028888496,RETURN,-1,,return 0;,9,973,,,2
146028888497,RETURN,-1,,return addThis;,5,995,,,6
146028888498,RETURN,-1,,return 0;,9,1004,,,2
146028888499,RETURN,-1,,return 0;,9,1011,,,2
146028888500,RETURN,-1,,return addThis;,9,1018,,,1
146028888501,RETURN,-1,,return InsertEndChild( addThis );,9,1023,,,1
146028888502,RETURN,-1,,return addThis;,5,1031,,,13
146028888503,RETURN,-1,,return element;,13,1042,,,1
146028888504,RETURN,-1,,return 0;,5,1045,,,2
146028888505,RETURN,-1,,return element;,13,1054,,,1
146028888506,RETURN,-1,,return 0;,5,1057,,,2
146028888507,RETURN,-1,,return element;,13,1066,,,1
146028888508,RETURN,-1,,return 0;,5,1069,,,2
146028888509,RETURN,-1,,return element;,13,1078,,,1
146028888510,RETURN,-1,,return 0;,5,1081,,,2
146028888511,RETURN,1,,return 0;,3,1106,,,1
146028888512,RETURN,-1,,return p;,17,1171,,,4
146028888513,RETURN,-1,,return 0;,5,1198,,,7
146028888514,RETURN,-1,,return;,9,1204,,,1
146028888515,RETURN,-1,,return 0;,9,1234,,,1
146028888516,RETURN,-1,,return element;,9,1237,,,1
146028888517,RETURN,-1,,return element;,8,1240,,,1
146028888518,RETURN,-1,,return 0;,5,1242,,,6
146028888519,RETURN,-1,,return p;,9,1253,,,3
146028888520,RETURN,-1,,return p-1;,13,1263,,,1
146028888521,RETURN,-1,,return 0;,5,1269,,,2
146028888522,RETURN,-1,,return text;,5,1280,,,5
146028888523,RETURN,-1,,"return ( text && XMLUtil::StringEqual( text->Value(), Value() ) );",5,1288,,,4
146028888524,RETURN,-1,,return visitor->Visit( *this );,5,1295,,,2
146028888525,RETURN,-1,,return p;,5,1318,,,3
146028888526,RETURN,-1,,return comment;,5,1328,,,4
146028888527,RETURN,-1,,"return ( comment && XMLUtil::StringEqual( comment->Value(), Value() ));",5,1336,,,4
146028888528,RETURN,-1,,return visitor->Visit( *this );,5,1343,,,2
146028888529,RETURN,-1,,return p;,5,1367,,,3
146028888530,RETURN,-1,,return dec;,5,1377,,,4
146028888531,RETURN,-1,,"return ( declaration && XMLUtil::StringEqual( declaration->Value(), Value() ));",5,1385,,,4
146028888532,RETURN,-1,,return visitor->Visit( *this );,5,1393,,,2
146028888533,RETURN,-1,,return p;,5,1415,,,3
146028888534,RETURN,-1,,return text;,5,1425,,,4
146028888535,RETURN,-1,,"return ( unknown && XMLUtil::StringEqual( unknown->Value(), Value() ));",5,1433,,,4
146028888536,RETURN,-1,,return visitor->Visit( *this );,5,1440,,,2
146028888537,RETURN,-1,,return _name.GetStr();,5,1447,,,1
146028888538,RETURN,-1,,return _value.GetStr();,5,1452,,,1
146028888539,RETURN,-1,,return 0;,9,1460,,,1
146028888540,RETURN,-1,,return 0;,9,1466,,,1
146028888541,RETURN,-1,,return 0;,9,1472,,,1
146028888542,RETURN,-1,,return p;,5,1479,,,13
146028888543,RETURN,-1,,return XML_SUCCESS;,9,1492,,,1
146028888544,RETURN,-1,,return XML_WRONG_ATTRIBUTE_TYPE;,5,1494,,,2
146028888545,RETURN,-1,,return XML_SUCCESS;,9,1501,,,1
146028888546,RETURN,-1,,return XML_WRONG_ATTRIBUTE_TYPE;,5,1503,,,2
146028888547,RETURN,-1,,return XML_SUCCESS;,3,1510,,,1
146028888548,RETURN,-1,,return XML_WRONG_ATTRIBUTE_TYPE;,2,1512,,,2
146028888549,RETURN,-1,,return XML_SUCCESS;,9,1519,,,1
146028888550,RETURN,-1,,return XML_WRONG_ATTRIBUTE_TYPE;,5,1521,,,2
146028888551,RETURN,-1,,return XML_SUCCESS;,9,1528,,,1
146028888552,RETURN,-1,,return XML_WRONG_ATTRIBUTE_TYPE;,5,1530,,,2
146028888553,RETURN,-1,,return XML_SUCCESS;,9,1537,,,1
146028888554,RETURN,-1,,return XML_WRONG_ATTRIBUTE_TYPE;,5,1539,,,2
146028888555,RETURN,-1,,return XML_SUCCESS;,9,1546,,,1
146028888556,RETURN,-1,,return XML_WRONG_ATTRIBUTE_TYPE;,5,1548,,,2
146028888557,RETURN,-1,,return a;,13,1633,,,1
146028888558,RETURN,-1,,return 0;,5,1636,,,2
146028888559,RETURN,-1,,return 0;,9,1644,,,1
146028888560,RETURN,-1,,return a->Value();,9,1647,,,1
146028888561,RETURN,-1,,return 0;,5,1649,,,5
146028888562,RETURN,-1,,return i;,2,1656,,,4
146028888563,RETURN,-1,,return i;,2,1663,,,4
146028888564,RETURN,-1,,return i;,2,1670,,,4
146028888565,RETURN,-1,,return i;,2,1677,,,4
146028888566,RETURN,-1,,return b;,2,1684,,,4
146028888567,RETURN,-1,,return d;,2,1691,,,4
146028888568,RETURN,-1,,return f;,2,1698,,,4
146028888569,RETURN,-1,,return node->Value();,9,1714,,,1
146028888570,RETURN,-1,,return 0;,5,1716,,,5
146028888571,RETURN,-1,,return XML_SUCCESS;,13,1790,,,1
146028888572,RETURN,-1,,return XML_CAN_NOT_CONVERT_TEXT;,9,1792,,,4
146028888573,RETURN,-1,,return XML_NO_TEXT_NODE;,5,1794,,,2
146028888574,RETURN,-1,,return XML_SUCCESS;,13,1803,,,1
146028888575,RETURN,-1,,return XML_CAN_NOT_CONVERT_TEXT;,9,1805,,,4
146028888576,RETURN,-1,,return XML_NO_TEXT_NODE;,5,1807,,,2
146028888577,RETURN,-1,,return XML_SUCCESS;,4,1816,,,1
146028888578,RETURN,-1,,return XML_CAN_NOT_CONVERT_TEXT;,3,1818,,,4
146028888579,RETURN,-1,,return XML_NO_TEXT_NODE;,2,1820,,,2
146028888580,RETURN,-1,,return XML_SUCCESS;,13,1829,,,1
146028888581,RETURN,-1,,return XML_CAN_NOT_CONVERT_TEXT;,9,1831,,,4
146028888582,RETURN,-1,,return XML_NO_TEXT_NODE;,5,1833,,,2
146028888583,RETURN,-1,,return XML_SUCCESS;,13,1842,,,1
146028888584,RETURN,-1,,return XML_CAN_NOT_CONVERT_TEXT;,9,1844,,,4
146028888585,RETURN,-1,,return XML_NO_TEXT_NODE;,5,1846,,,2
146028888586,RETURN,-1,,return XML_SUCCESS;,13,1855,,,1
146028888587,RETURN,-1,,return XML_CAN_NOT_CONVERT_TEXT;,9,1857,,,4
146028888588,RETURN,-1,,return XML_NO_TEXT_NODE;,5,1859,,,2
146028888589,RETURN,-1,,return XML_SUCCESS;,13,1868,,,1
146028888590,RETURN,-1,,return XML_CAN_NOT_CONVERT_TEXT;,9,1870,,,4
146028888591,RETURN,-1,,return XML_NO_TEXT_NODE;,5,1872,,,2
146028888592,RETURN,-1,,return i;,2,1879,,,4
146028888593,RETURN,-1,,return i;,2,1886,,,4
146028888594,RETURN,-1,,return i;,2,1893,,,4
146028888595,RETURN,-1,,return i;,2,1900,,,4
146028888596,RETURN,-1,,return b;,2,1907,,,4
146028888597,RETURN,-1,,return d;,2,1914,,,4
146028888598,RETURN,-1,,return f;,2,1921,,,4
146028888599,RETURN,-1,,return attrib;,5,1949,,,7
146028888600,RETURN,-1,,return 0;,13,1981,,,2
146028888601,RETURN,-1,,return 0;,17,1996,,,3
146028888602,RETURN,-1,,return p+2;,13,2021,,,2
146028888603,RETURN,-1,,return 0;,13,2025,,,2
146028888604,RETURN,-1,,return p;,5,2028,,,4
146028888605,RETURN,-1,,return;,9,2034,,,1
146028888606,RETURN,-1,,return attrib;,5,2048,,,7
146028888607,RETURN,-1,,return InsertEndChild(node) ? node : 0;,5,2055,,,3
146028888608,RETURN,-1,,return InsertEndChild(node) ? node : 0;,5,2061,,,3
146028888609,RETURN,-1,,return InsertEndChild(node) ? node : 0;,5,2067,,,3
146028888610,RETURN,-1,,return InsertEndChild(node) ? node : 0;,5,2073,,,3
146028888611,RETURN,-1,,return InsertEndChild(node) ? node : 0;,5,2079,,,3
146028888612,RETURN,-1,,return 0;,9,2103,,,1
146028888613,RETURN,-1,,return p;,9,2108,,,1
146028888614,RETURN,-1,,return p;,5,2112,,,8
146028888615,RETURN,-1,,return element;,5,2126,,,5
146028888616,RETURN,-1,,return false;,17,2141,,,1
146028888617,RETURN,-1,,return false;,13,2148,,,1
146028888618,RETURN,-1,,return true;,9,2150,,,7
146028888619,RETURN,-1,,return false;,5,2152,,,5
146028888620,RETURN,-1,,return visitor->VisitExit( *this );,5,2166,,,3
146028888621,RETURN,-1,,return;,9,2275,,,1
146028888622,RETURN,-1,,return ele;,5,2288,,,4
146028888623,RETURN,-1,,return comment;,5,2296,,,4
146028888624,RETURN,-1,,return text;,5,2304,,,4
146028888625,RETURN,-1,,return dec;,5,2312,,,4
146028888626,RETURN,-1,,return unk;,5,2320,,,4
146028888627,RETURN,-1,,return fp;,5,2336,,,5
146028888628,RETURN,-1,,return _errorID;,9,2362,,,3
146028888629,RETURN,-1,,return _errorID;,9,2369,,,2
146028888630,RETURN,-1,,return _errorID;,5,2373,,,8
146028888631,RETURN,-1,,return _errorID;,9,2383,,,2
146028888632,RETURN,-1,,return _errorID;,13,2394,,,2
146028888633,RETURN,-1,,return _errorID;,9,2406,,,2
146028888634,RETURN,-1,,return _errorID;,9,2411,,,2
146028888635,RETURN,-1,,return _errorID;,9,2420,,,2
146028888636,RETURN,-1,,return _errorID;,5,2426,,,20
146028888637,RETURN,-1,,return _errorID;,9,2435,,,3
146028888638,RETURN,-1,,return _errorID;,9,2441,,,2
146028888639,RETURN,-1,,return _errorID;,5,2445,,,7
146028888640,RETURN,-1,,return _errorID;,5,2456,,,5
146028888641,RETURN,-1,,return _errorID;,9,2466,,,2
146028888642,RETURN,-1,,return _errorID;,5,2487,,,10
146028888643,RETURN,-1,,return errorName;,5,2543,,,5
146028888644,RETURN,-1,,"return _errorStr.Empty() ? """" : _errorStr.GetStr();",2,2548,,,1
146028888645,RETURN,-1,,return ErrorIDToName(_errorID);,5,2559,,,1
146028888646,RETURN,-1,,return;,9,2573,,,2
146028888647,RETURN,-1,,return;,9,2747,,,1
146028888648,RETURN,-1,,return;,9,2863,,,1
146028888649,RETURN,-1,,return true;,5,2978,,,3
146028888650,RETURN,-1,,return true;,5,2994,,,8
146028888651,RETURN,-1,,return true;,5,3001,,,2
146028888652,RETURN,-1,,return true;,5,3008,,,2
146028888653,RETURN,-1,,return true;,5,3015,,,2
146028888654,RETURN,-1,,return true;,5,3021,,,2
146028888655,RETURN,-1,,return true;,5,3028,,,2
146028888656,RETURN,-1,,return succeeded;,5,98,,,15
146028888657,RETURN,-1,,return mApplications.size();,5,123,,,1
146028888658,RETURN,-1,,return mApplications[index];,9,129,,,1
146028888659,RETURN,-1,,return dummy;,5,133,,,3
146028888660,RETURN,-1,,return mApplications[index];,9,139,,,1
146028888661,RETURN,-1,,return dummy;,5,143,,,3
146028888662,RETURN,-1,,return;,9,149,,,1
146028888663,RETURN,-1,,return;,9,169,,,1
146028888664,RETURN,-1,,return true;,9,194,,,6
146028888665,RETURN,-1,,return false;,5,196,,,2
146028888666,RETURN,-1,,"return mStyle.value(lower,0);",9,90,,,3
146028888667,RETURN,-1,,"return mWarning.value(lower,0);",9,92,,,6
146028888668,RETURN,-1,,"return mPerformance.value(lower,0);",9,94,,,9
146028888669,RETURN,-1,,"return mPortability.value(lower,0);",9,96,,,12
146028888670,RETURN,-1,,"return mError.value(lower,0);",9,98,,,15
146028888671,RETURN,-1,,"return mInformation.value(lower,0);",9,100,,,18
146028888672,RETURN,-1,,return 0;,9,104,,,23
146028888673,RETURN,-1,,return ret.values();,5,116,,,7
146028888674,RETURN,-1,,return s;,5,62,,,2
146028888675,RETURN,-1,,return process.exitCode();,5,106,,,12
146028888676,RETURN,-1,,"return FileWithDetails{file.toStdString(), Path::identify(file.toStdString(), mSettings.cppHeaderProbe), 0};",13,143,,,1
146028888677,RETURN,-1,,return;,9,148,,,9
146028888678,RETURN,-1,,"return ErrorMessage::FileLocation(path.file.toStdString(), path.info.toStdString(), path.line, path.column);",13,431,,,1
146028888679,RETURN,-1,,return s.isSuppressed(errorMessage);,9,444,,,1
146028888680,RETURN,-1,,"return std::any_of(mSuppressionsUi.cbegin(), mSuppressionsUi.cend(), [&](const SuppressionList::Suppression& s) {
        return s.isSuppressed(errorMessage);
    });",5,443,,,1
146028888681,RETURN,1,,return path;,9,462,,,1
146028888682,RETURN,-1,,return QString();,5,470,,,9
146028888683,RETURN,1,,return path;,9,487,,,1
146028888684,RETURN,-1,,return QString();,5,495,,,9
146028888685,RETURN,1,,return 0;,9,312,,,1
146028888686,RETURN,1,,return pos + 1;,13,318,,,1
146028888687,RETURN,-1,,return fileData.size();,5,320,,,3
146028888688,RETURN,-1,,return space;,5,375,,,8
146028888689,RETURN,-1,,return style;,5,459,,,7
146028888690,RETURN,1,,return false;,43,63,,,1
146028888691,RETURN,1,,return false;,45,64,,,1
146028888692,RETURN,1,,return false;,45,65,,,1
146028888693,RETURN,1,,return false;,51,66,,,1
146028888694,RETURN,1,,return false;,47,67,,,1
146028888695,RETURN,1,,return false;,47,68,,,1
146028888696,RETURN,1,,return false;,43,69,,,1
146028888697,RETURN,1,,return false;,45,70,,,1
146028888698,RETURN,1,,return false;,39,71,,,1
146028888699,RETURN,1,,return false;,41,72,,,1
146028888700,RETURN,1,,return false;,39,73,,,1
146028888701,RETURN,1,,return false;,41,74,,,1
146028888702,RETURN,1,,return false;,43,75,,,1
146028888703,RETURN,1,,return false;,45,76,,,1
146028888704,RETURN,1,,return false;,45,77,,,1
146028888705,RETURN,1,,return false;,45,78,,,1
146028888706,RETURN,1,,return false;,43,79,,,1
146028888707,RETURN,-1,,return true;,5,80,,,18
146028888708,RETURN,-1,,return !(*this == rhs);,5,85,,,1
146028888709,RETURN,-1,,return theStyle;,5,92,,,4
146028888710,RETURN,1,,return theStyle;,9,99,,,1
146028888711,RETURN,1,,return theStyle;,9,102,,,1
146028888712,RETURN,-1,,return theStyle;,9,112,,,2
146028888713,RETURN,-1,,return theStyle;,9,117,,,3
146028888714,RETURN,-1,,return theStyle;,5,170,,,12
146028888715,RETURN,1,,return;,9,177,,,1
146028888716,RETURN,1,,return;,13,182,,,1
146028888717,RETURN,-1,,return mColor;,5,70,,,1
146028888718,RETURN,-1,,return mWeight;,5,127,,,1
146028888719,RETURN,-1,,return mStyleOutgoing;,5,240,,,1
146028888720,RETURN,1,,return QDir::homePath();,13,42,,,1
146028888721,RETURN,-1,,return path;,5,44,,,5
146028888722,RETURN,-1,,"return entries.join("";;"");",5,73,,,5
146028888723,RETURN,1,,return dataDir;,9,81,,,1
146028888724,RETURN,1,,return appPath;,9,84,,,1
146028888725,RETURN,1,,"return appPath.left(appPath.indexOf(""/cppcheck/"", 0, Qt::CaseInsensitive) + 9);",9,86,,,1
146028888726,RETURN,-1,,return appPath;,5,87,,,9
146028888727,RETURN,1,,return;,9,59,,,1
146028888728,RETURN,1,,return;,9,62,,,1
146028888729,RETURN,-1,,return e.toStdString();,9,84,,,1
146028888730,RETURN,-1,,return ret;,5,86,,,3
146028888731,RETURN,1,,return;,9,137,,,1
146028888732,RETURN,-1,,return;,17,181,,,4
146028888733,RETURN,-1,,return container;,5,106,,,10
146028888734,RETURN,-1,,return define;,5,114,,,4
146028888735,RETURN,-1,,"return xmlReader.attributes().value(""name"").toString();",5,119,,,1
146028888736,RETURN,-1,,return smartPointer;,5,138,,,5
146028888737,RETURN,-1,,return typeChecks;,5,155,,,4
146028888738,RETURN,-1,,return arg;,5,201,,,8
146028888739,RETURN,-1,,return function;,5,259,,,6
146028888740,RETURN,-1,,return memoryresource;,5,299,,,5
146028888741,RETURN,-1,,return podtype;,5,312,,,7
146028888742,RETURN,-1,,return platformType;,5,335,,,6
146028888743,RETURN,-1,,return reflection;,5,362,,,4
146028888744,RETURN,-1,,return markup;,5,454,,,7
146028888745,RETURN,-1,,return entrypoint;,5,461,,,3
146028888746,RETURN,-1,,return e.what();,17,509,,,1
146028888747,RETURN,1,,return xmlReader.errorString();,9,518,,,1
146028888748,RETURN,-1,,return QString();,5,519,,,7
146028888749,RETURN,1,,return;,9,525,,,1
146028888750,RETURN,1,,return;,9,548,,,1
146028888751,RETURN,-1,,return outputString;,5,944,,,22
146028888752,RETURN,-1,,return true;,9,37,,,2
146028888753,RETURN,-1,,return false;,5,39,,,2
146028888754,RETURN,-1,,return i1.file == i2.file && i1.column == i2.column && i1.line == i2.line && i1.info == i2.info;,5,34,,,1
146028888755,RETURN,1,,return CLANG_ANALYZER;,9,63,,,1
146028888756,RETURN,1,,return CLANG_TIDY;,9,65,,,1
146028888757,RETURN,1,,"return ""clang"";",9,67,,,1
146028888758,RETURN,-1,,"return ""cppcheck"";",5,68,,,4
146028888759,RETURN,-1,,return str;,5,82,,,8
146028888760,RETURN,1,,return errorItem1.hash == errorItem2.hash;,9,88,,,1
146028888761,RETURN,-1,,"return errorItem1.errorId == errorItem2.errorId &&
           errorItem1.errorPath == errorItem2.errorPath &&
           errorItem1.file0 == errorItem2.file0 &&
           errorItem1.message == errorItem2.message &&
           errorItem1.inconclusive == errorItem2.inconclusive &&
           errorItem1.severity == errorItem2.severity;",5,91,,,2
146028888762,RETURN,-1,,return extensions;,5,35,,,3
146028888763,RETURN,1,,return true;,13,45,,,1
146028888764,RETURN,-1,,return false;,5,47,,,2
146028888765,RETURN,-1,,return names;,9,101,,,3
146028888766,RETURN,-1,,return applyExcludeList();,5,103,,,2
146028888767,RETURN,-1,,return s.toStdString();,9,115,,,1
146028888768,RETURN,-1,,return ret;,5,117,,,3
146028888769,RETURN,-1,,return paths;,5,136,,,5
146028888770,RETURN,-1,,return;,9,62,,,7
146028888771,RETURN,-1,,return;,9,76,,,7
146028888772,RETURN,-1,,return QVariant(mHelpEngine->fileData(QUrl(url)));,9,49,,,4
146028888773,RETURN,-1,,"return QTextBrowser::loadResource(type, name);",5,51,,,2
146028888774,RETURN,1,,return filename;,13,71,,,1
146028888775,RETURN,-1,,return QString();,5,73,,,6
146028888776,RETURN,-1,,return;,9,92,,,7
146028888777,RETURN,-1,,return mUi->functionName->text();,5,47,,,1
146028888778,RETURN,-1,,return mUi->numberOfArguments->value();,5,52,,,1
146028888779,RETURN,1,,return nullptr;,9,89,,,1
146028888780,RETURN,-1,,return dynamic_cast<FunctionListItem *>(selitems.first())->function;,5,90,,,4
146028888781,RETURN,1,,return;,9,106,,,1
146028888782,RETURN,-1,,return;,9,116,,,4
146028888783,RETURN,-1,,return;,9,128,,,4
146028888784,RETURN,1,,return;,9,152,,,1
146028888785,RETURN,1,,return;,9,177,,,1
146028888786,RETURN,1,,return;,9,212,,,1
146028888787,RETURN,-1,,return;,9,249,,,12
146028888788,RETURN,1,,return;,9,309,,,1
146028888789,RETURN,1,,return;,9,313,,,1
146028888790,RETURN,1,,return;,9,327,,,1
146028888791,RETURN,1,,return;,9,330,,,1
146028888792,RETURN,-1,,return s;,5,358,,,11
146028888793,RETURN,-1,,return ret;,5,117,,,9
146028888794,RETURN,-1,,"return arg.startsWith(""--data-dir="");",9,66,,,1
146028888795,RETURN,-1,,return 0;,9,70,,,2
146028888796,RETURN,1,,return 0;,9,77,,,1
146028888797,RETURN,-1,,return QApplication::exec();,5,86,,,21
146028888798,RETURN,-1,,return false;,9,95,,,2
146028888799,RETURN,-1,,return false;,9,99,,,2
146028888800,RETURN,-1,,return true;,5,101,,,3
146028888801,RETURN,-1,,return p;,5,112,,,1
146028888802,RETURN,-1,,return e.toStdString();,13,557,,,1
146028888803,RETURN,-1,,return e.toStdString();,17,566,,,1
146028888804,RETURN,1,,return;,9,548,,,1
146028888805,RETURN,-1,,return s.toStdString();,13,669,,,1
146028888806,RETURN,1,,return;,9,614,,,1
146028888807,RETURN,1,,return;,9,619,,,1
146028888808,RETURN,-1,,return;,9,643,,,4
146028888809,RETURN,1,,return;,9,684,,,1
146028888810,RETURN,-1,,return QStringList();,9,722,,,9
146028888811,RETURN,-1,,return selected;,5,766,,,5
146028888812,RETURN,1,,return;,17,795,,,1
146028888813,RETURN,-1,,return;,9,800,,,5
146028888814,RETURN,1,,return;,9,810,,,1
146028888815,RETURN,1,,return ret;,13,890,,,1
146028888816,RETURN,1,,return ret;,9,899,,,1
146028888817,RETURN,1,,return ret;,9,904,,,1
146028888818,RETURN,1,,return ret;,13,930,,,1
146028888819,RETURN,1,,return ret;,13,935,,,1
146028888820,RETURN,-1,,return ret;,5,940,,,18
146028888821,RETURN,-1,,return true;,13,949,,,2
146028888822,RETURN,-1,,return false;,9,990,,,6
146028888823,RETURN,-1,,return true;,5,992,,,4
146028888824,RETURN,1,,"return tr(""File not found: '%1'"").arg(addon);",9,1000,,,1
146028888825,RETURN,1,,"return tr(""Failed to load/setup addon %1: %2"").arg(addon, QString::fromStdString(errmsg));",9,1026,,,1
146028888826,RETURN,-1,,"return """";",5,1031,,,16
146028888827,RETURN,-1,,return false;,9,1048,,,2
146028888828,RETURN,-1,,return false;,13,1058,,,2
146028888829,RETURN,-1,,return false;,17,1068,,,2
146028888830,RETURN,-1,,return false;,17,1162,,,2
146028888831,RETURN,-1,,return true;,5,1217,,,37
146028888832,RETURN,-1,,return;,9,1224,,,2
146028888833,RETURN,1,,return;,9,1337,,,1
146028888834,RETURN,1,,return;,9,1339,,,1
146028888835,RETURN,-1,,return;,9,1348,,,4
146028888836,RETURN,1,,return;,9,1354,,,1
146028888837,RETURN,1,,return;,9,1384,,,1
146028888838,RETURN,1,,return;,9,1389,,,1
146028888839,RETURN,-1,,return;,13,1441,,,1
146028888840,RETURN,1,,return;,9,1461,,,1
146028888841,RETURN,-1,,return;,9,1675,,,4
146028888842,RETURN,1,,return;,9,1731,,,1
146028888843,RETURN,1,,return QString();,9,1822,,,1
146028888844,RETURN,-1,,"return QFileInfo(mProjectFile->getFilename()).absolutePath() + '/' + mProjectFile->getBuildDir() + ""/lastResults.xml"";",5,1823,,,2
146028888845,RETURN,1,,return false;,9,1830,,,1
146028888846,RETURN,1,,return false;,9,1832,,,1
146028888847,RETURN,-1,,return true;,5,1838,,,10
146028888848,RETURN,-1,,return;,17,1904,,,4
146028888849,RETURN,-1,,return;,17,1952,,,4
146028888850,RETURN,-1,,return;,13,1961,,,4
146028888851,RETURN,-1,,return;,9,1964,,,6
146028888852,RETURN,1,,return;,9,1988,,,1
146028888853,RETURN,-1,,return;,9,2033,,,4
146028888854,RETURN,1,,return;,9,2086,,,1
146028888855,RETURN,1,,return;,9,2183,,,1
146028888856,RETURN,1,,return (ret * 1000000) + (v * 1000) + 500;,17,2215,,,1
146028888857,RETURN,-1,,return ret;,5,2230,,,10
146028888858,RETURN,-1,,return;,9,2238,,,3
146028888859,RETURN,-1,,"return mCppcheckCfgProductName.startsWith(""Cppcheck Premium "");",5,2279,,,1
146028888860,RETURN,-1,,return ret;,5,75,,,7
146028888861,RETURN,-1,,return mPlatforms.count();,5,48,,,1
146028888862,RETURN,-1,,return *iter;,13,56,,,1
146028888863,RETURN,-1,,return mPlatforms.first();,5,60,,,4
146028888864,RETURN,-1,,return true;,5,32,,,1
146028888865,RETURN,-1,,return mFormattedReport;,5,57,,,1
146028888866,RETURN,1,,return false;,9,103,,,1
146028888867,RETURN,-1,,return projectTagFound;,5,262,,,14
146028888868,RETURN,-1,,return;,13,283,,,6
146028888869,RETURN,-1,,return;,13,309,,,6
146028888870,RETURN,-1,,return ret;,13,335,,,6
146028888871,RETURN,-1,,return ret;,13,361,,,6
146028888872,RETURN,-1,,return ret;,13,387,,,6
146028888873,RETURN,1,,return;,17,577,,,1
146028888874,RETURN,-1,,return;,13,604,,,6
146028888875,RETURN,1,,return;,17,648,,,1
146028888876,RETURN,1,,return;,17,682,,,1
146028888877,RETURN,-1,,return result;,5,785,,,7
146028888878,RETURN,-1,,return (it != mWarningTags.end()) ? it->second : QString();,5,824,,,3
146028888879,RETURN,1,,return false;,9,834,,,1
146028888880,RETURN,-1,,return true;,5,1061,,,59
146028888881,RETURN,1,,return;,9,1067,,,1
146028888882,RETURN,-1,,return ret;,5,1083,,,3
146028888883,RETURN,-1,,return ret;,5,1093,,,5
146028888884,RETURN,1,,return;,17,1118,,,1
146028888885,RETURN,1,,return;,9,1139,,,1
146028888886,RETURN,1,,return addon;,9,1163,,,1
146028888887,RETURN,1,,return f;,13,1178,,,1
146028888888,RETURN,-1,,return QString();,5,1181,,,6
146028888889,RETURN,-1,,return paths;,5,79,,,5
146028888890,RETURN,1,,return QStringList();,9,95,,,1
146028888891,RETURN,-1,,return ret;,5,103,,,8
146028888892,RETURN,1,,return QString();,9,557,,,1
146028888893,RETURN,-1,,return selectedDir;,5,570,,,14
146028888894,RETURN,-1,,return configs;,5,639,,,3
146028888895,RETURN,-1,,return mUI->mEditImportProject->text();,5,655,,,1
146028888896,RETURN,1,,return;,9,661,,,1
146028888897,RETURN,1,,return;,9,672,,,1
146028888898,RETURN,1,,return;,9,683,,,1
146028888899,RETURN,-1,,return root;,5,696,,,5
146028888900,RETURN,-1,,return mUI->mEditBuildDir->text();,5,701,,,1
146028888901,RETURN,-1,,return getPaths(mUI->mListIncludeDirs);,5,706,,,1
146028888902,RETURN,-1,,"return mUI->mEditDefines->text().trimmed().split(QRegularExpression(""\\\\s*;\\\\s*""), QString::SkipEmptyParts);",5,714,,,1
146028888903,RETURN,-1,,return undefines;,5,727,,,6
146028888904,RETURN,-1,,return getPaths(mUI->mListCheckPaths);,5,732,,,1
146028888905,RETURN,-1,,return getPaths(mUI->mListExcludedPaths);,5,737,,,1
146028888906,RETURN,-1,,return libraries;,5,748,,,3
146028888907,RETURN,1,,return;,9,922,,,1
146028888908,RETURN,-1,,return sup.getText() == s;,9,949,,,1
146028888909,RETURN,-1,,"return it == mSuppressions.cend() ? -1 : static_cast<int>(std::distance(mSuppressions.cbegin(), it));",5,951,,,5
146028888910,RETURN,-1,,return succeed;,5,41,,,4
146028888911,RETURN,-1,,return succeed;,5,51,,,4
146028888912,RETURN,-1,,return &mFile;,5,62,,,1
146028888913,RETURN,-1,,"return QString::fromStdString(getGuideline(errorId.toStdString(),
                                               reportType, guidelineMapping,
                                               severity));",5,102,,,1
146028888914,RETURN,-1,,"return QString::fromStdString(getClassification(guideline.toStdString(), reportType));",5,108,,,1
146028888915,RETURN,1,,return Severity::error;,9,113,,,1
146028888916,RETURN,1,,return Severity::warning;,9,115,,,1
146028888917,RETURN,1,,return Severity::style;,9,117,,,1
146028888918,RETURN,1,,return Severity::information;,9,119,,,1
146028888919,RETURN,1,,return Severity::error;,9,121,,,1
146028888920,RETURN,1,,return Severity::warning;,9,123,,,1
146028888921,RETURN,1,,return Severity::style;,9,125,,,1
146028888922,RETURN,-1,,return Severity::none;,5,126,,,8
146028888923,RETURN,-1,,"return QStringList{
        QObject::tr(""File""),
        QObject::tr(""Line""),
        QObject::tr(""Severity""),
        QObject::tr(""Classification""),
        QObject::tr(""Level""),
        QObject::tr(""Inconclusive""),
        QObject::tr(""Summary""),
        QObject::tr(""Id""),
        QObject::tr(""Guideline""),
        QObject::tr(""Rule""),
        QObject::tr(""Since date""),
        QObject::tr(""Tags""),
        QObject::tr(""CWE"")};",5,130,,,1
146028888924,RETURN,-1,,return item;,5,227,,,5
146028888925,RETURN,-1,,return item;,5,236,,,6
146028888926,RETURN,-1,,return item;,5,246,,,7
146028888927,RETURN,-1,,return false;,9,252,,,1
146028888928,RETURN,1,,return false;,9,316,,,1
146028888929,RETURN,-1,,return true;,5,370,,,50
146028888930,RETURN,1,,return nullptr;,9,380,,,1
146028888931,RETURN,-1,,return nullptr;,21,398,,,1
146028888932,RETURN,-1,,return list[0];,5,434,,,30
146028888933,RETURN,-1,,"return tr(""style"");",9,441,,,3
146028888934,RETURN,-1,,"return tr(""error"");",9,444,,,6
146028888935,RETURN,-1,,"return tr(""warning"");",9,447,,,9
146028888936,RETURN,-1,,"return tr(""performance"");",9,450,,,12
146028888937,RETURN,-1,,"return tr(""portability"");",9,453,,,15
146028888938,RETURN,-1,,"return tr(""information"");",9,456,,,18
146028888939,RETURN,-1,,"return tr(""debug"");",9,459,,,21
146028888940,RETURN,-1,,"return tr(""internal"");",9,462,,,24
146028888941,RETURN,-1,,return QString();,9,466,,,28
146028888942,RETURN,1,,"return mModel.item(i, COLUMN_FILE);",13,481,,,1
146028888943,RETURN,-1,,return nullptr;,5,483,,,2
146028888944,RETURN,-1,,return item;,9,681,,,2
146028888945,RETURN,-1,,return item;,5,698,,,15
146028888946,RETURN,-1,,return;,9,831,,,4
146028888947,RETURN,-1,,return;,9,845,,,4
146028888948,RETURN,1,,return QString();,9,965,,,1
146028888949,RETURN,1,,return QString();,9,983,,,1
146028888950,RETURN,-1,,return mCheckPath;,5,986,,,16
146028888951,RETURN,1,,return;,9,992,,,1
146028888952,RETURN,1,,return;,9,1024,,,1
146028888953,RETURN,1,,return;,9,1041,,,1
146028888954,RETURN,-1,,return;,17,1060,,,2
146028888955,RETURN,1,,return;,9,1078,,,1
146028888956,RETURN,1,,return;,9,1096,,,1
146028888957,RETURN,1,,return;,9,1134,,,1
146028888958,RETURN,1,,return;,9,1182,,,1
146028888959,RETURN,-1,,return pathStr;,9,1229,,,9
146028888960,RETURN,-1,,return QString();,5,1232,,,2
146028888961,RETURN,-1,,"return "":images/dialog-error.png"";",9,1239,,,3
146028888962,RETURN,-1,,"return "":images/applications-development.png"";",9,1241,,,6
146028888963,RETURN,-1,,"return "":images/dialog-warning.png"";",9,1243,,,9
146028888964,RETURN,-1,,"return "":images/applications-system.png"";",9,1245,,,12
146028888965,RETURN,-1,,"return "":images/utilities-system-monitor.png"";",9,1247,,,15
146028888966,RETURN,-1,,"return "":images/dialog-information.png"";",9,1249,,,18
146028888967,RETURN,-1,,return QString();,9,1251,,,20
146028888968,RETURN,-1,,return;,9,1270,,,1
146028888969,RETURN,-1,,"return ErrorItem::sameCID(item, e);",9,1294,,,1
146028888970,RETURN,-1,,"return it == list.cend() ? -1 : static_cast<int>(std::distance(list.cbegin(), it));",5,1296,,,3
146028888971,RETURN,-1,,return mCheckPath;,5,1412,,,1
146028888972,RETURN,-1,,return QString(path);,9,1418,,,1
146028888973,RETURN,-1,,return dir.relativeFilePath(path);,5,1422,,,4
146028888974,RETURN,-1,,return;,9,1428,,,1
146028888975,RETURN,-1,,return mVisibleErrors;,5,1494,,,1
146028888976,RETURN,-1,,return mModel.rowCount() > 0;,5,1499,,,1
146028888977,RETURN,-1,,return mReportType == ReportType::certC || mReportType == ReportType::certCpp;,5,1532,,,1
146028888978,RETURN,-1,,"return mReportType == ReportType::autosar ||
           mReportType == ReportType::misraC ||
           mReportType == ReportType::misraCpp2008 ||
           mReportType == ReportType::misraCpp2023;",5,1536,,,1
146028888979,RETURN,-1,,return mUI->mTree->mShowSeverities;,5,155,,,1
146028888980,RETURN,-1,,return;,9,172,,,2
146028888981,RETURN,1,,return;,9,178,,,1
146028888982,RETURN,1,,return;,9,195,,,1
146028888983,RETURN,1,,return;,9,254,,,1
146028888984,RETURN,-1,,return;,9,274,,,5
146028888985,RETURN,-1,,return mUI->mTree->getCheckDirectory();,5,307,,,1
146028888986,RETURN,-1,,return mUI->mTree->hasVisibleResults();,5,370,,,1
146028888987,RETURN,-1,,return mUI->mTree->hasResults();,5,375,,,1
146028888988,RETURN,-1,,return;,9,407,,,5
146028888989,RETURN,-1,,return;,9,414,,,5
146028888990,RETURN,-1,,return;,9,451,,,3
146028888991,RETURN,-1,,return;,9,464,,,3
146028888992,RETURN,-1,,return;,9,494,,,2
146028888993,RETURN,-1,,return;,9,500,,,2
146028888994,RETURN,1,,return;,9,548,,,1
146028888995,RETURN,-1,,return mSuccess;,5,590,,,1
146028888996,RETURN,-1,,return Qt::Checked;,9,155,,,1
146028888997,RETURN,-1,,return Qt::Unchecked;,5,157,,,2
146028888998,RETURN,-1,,return state == Qt::Checked;,5,162,,,1
146028888999,RETURN,-1,,return;,9,229,,,3
146028889000,RETURN,-1,,return checkStateToBool(mUI->mShowFullPath->checkState());,5,333,,,1
146028889001,RETURN,-1,,return checkStateToBool(mUI->mSaveFullPath->checkState());,5,338,,,1
146028889002,RETURN,-1,,return checkStateToBool(mUI->mSaveAllErrors->checkState());,5,343,,,1
146028889003,RETURN,-1,,return checkStateToBool(mUI->mShowNoErrorsMessage->checkState());,5,348,,,1
146028889004,RETURN,-1,,return checkStateToBool(mUI->mShowErrorId->checkState());,5,353,,,1
146028889005,RETURN,-1,,return checkStateToBool(mUI->mEnableInconclusive->checkState());,5,358,,,1
146028889006,RETURN,-1,,return ShowTypes::ShowNone;,9,41,,,5
146028889007,RETURN,-1,,return ShowTypes::ShowErrors;,9,43,,,8
146028889008,RETURN,-1,,return ShowTypes::ShowStyle;,9,45,,,11
146028889009,RETURN,-1,,return ShowTypes::ShowWarnings;,9,47,,,14
146028889010,RETURN,-1,,return ShowTypes::ShowPerformance;,9,49,,,17
146028889011,RETURN,-1,,return ShowTypes::ShowPortability;,9,51,,,20
146028889012,RETURN,-1,,return ShowTypes::ShowInformation;,9,53,,,23
146028889013,RETURN,-1,,return ShowTypes::ShowNone;,9,55,,,25
146028889014,RETURN,-1,,return Severity::style;,9,63,,,3
146028889015,RETURN,-1,,return Severity::error;,9,66,,,6
146028889016,RETURN,-1,,return Severity::warning;,9,69,,,9
146028889017,RETURN,-1,,return Severity::performance;,9,72,,,12
146028889018,RETURN,-1,,return Severity::portability;,9,75,,,15
146028889019,RETURN,-1,,return Severity::information;,9,78,,,18
146028889020,RETURN,-1,,return Severity::none;,9,82,,,22
146028889021,RETURN,-1,,return ShowTypes::ShowNone;,9,90,,,1
146028889022,RETURN,-1,,return (ShowTypes::ShowType)value;,5,92,,,4
146028889023,RETURN,-1,,return mVisible[category];,5,119,,,1
146028889024,RETURN,-1,,return isShown(ShowTypes::SeverityToShowType(severity));,5,124,,,1
146028889025,RETURN,1,,return;,9,222,,,1
146028889026,RETURN,-1,,return;,9,91,,,2
146028889027,RETURN,-1,,return mRunningThreadCount > 0;,5,126,,,1
146028889028,RETURN,-1,,return;,9,134,,,1
146028889029,RETURN,-1,,return;,9,174,,,4
146028889030,RETURN,-1,,return !mLastFiles.isEmpty();,5,228,,,1
146028889031,RETURN,-1,,return mLastFiles.size();,5,233,,,1
146028889032,RETURN,-1,,return mScanDuration;,5,238,,,1
146028889033,RETURN,1,,return mLastFiles;,9,244,,,1
146028889034,RETURN,-1,,return files;,5,254,,,6
146028889035,RETURN,1,,return true;,9,260,,,1
146028889036,RETURN,1,,return false;,9,263,,,1
146028889037,RETURN,-1,,return true;,9,266,,,1
146028889038,RETURN,1,,return false;,9,272,,,1
146028889039,RETURN,-1,,return true;,21,288,,,2
146028889040,RETURN,-1,,return false;,5,294,,,11
146028889041,RETURN,-1,,return mCheckStartTime;,5,299,,,1
146028889042,RETURN,-1,,return QString();,9,65,,,1
146028889043,RETURN,-1,,return mFiles.takeFirst();,5,68,,,3
146028889044,RETURN,-1,,return;,9,76,,,1
146028889045,RETURN,-1,,return total + QFile(file).size();,9,93,,,1
146028889046,RETURN,-1,,return v + QFile(QString::fromStdString(fs.filename())).size();,9,111,,,1
146028889047,RETURN,-1,,return mFiles.size() + mFileSettings.size();,5,128,,,2
146028889048,RETURN,-1,,return true;,9,81,,,3
146028889049,RETURN,-1,,return false;,9,136,,,6
146028889050,RETURN,-1,,return true;,5,143,,,11
146028889051,RETURN,-1,,return mCurrentLanguage;,5,148,,,1
146028889052,RETURN,-1,,"return ""en"";",9,162,,,1
146028889053,RETURN,-1,,return language;,5,165,,,6
146028889054,RETURN,-1,,return ti.mCode == code || ti.mCode == code.left(2);,9,181,,,1
146028889055,RETURN,-1,,"return it == mTranslations.cend() ? -1 : static_cast<int>(std::distance(mTranslations.cbegin(), it));",5,183,,,3
146028889056,RETURN,-1,,return true;,9,36,,,2
146028889057,RETURN,-1,,return false;,5,38,,,2
146028889058,RETURN,-1,,return quotedMessage;,5,47,,,8
146028889059,RETURN,-1,,return quotedMessage;,5,58,,,8
146028889060,RETURN,1,,return 0;,9,67,,,1
146028889061,RETURN,-1,,return ver;,21,77,,,3
146028889062,RETURN,-1,,return 1;,17,79,,,4
146028889063,RETURN,-1,,return 0;,5,97,,,9
146028889064,RETURN,-1,,return true;,9,80,,,2
146028889065,RETURN,-1,,return false;,5,82,,,2
146028889066,RETURN,-1,,return true;,9,89,,,2
146028889067,RETURN,-1,,return false;,5,91,,,2
146028889068,RETURN,-1,,return errors;,9,177,,,2
146028889069,RETURN,-1,,return errors;,5,210,,,6
146028889070,RETURN,-1,,return item;,5,295,,,7
146028889071,RETURN,1,,return fileName;,9,34,,,1
146028889072,RETURN,1,,return exepath + fileName;,9,40,,,1
146028889073,RETURN,1,,"return exepath + ""addons/"" + fileName;",9,44,,,1
146028889074,RETURN,-1,,"return """";",5,56,,,9
146028889075,RETURN,-1,,"return ""Loading "" + fileName + "" failed. "" + json_error;",9,62,,,1
146028889076,RETURN,1,,"return ""Loading "" + fileName + "" failed. JSON is not an object."";",9,65,,,1
146028889077,RETURN,1,,"return ""Loading "" + fileName + "" failed. 'args' must be an array."";",17,74,,,1
146028889078,RETURN,1,,"return ""Loading "" + fileName + "" failed. 'args' entry is not a string."";",21,77,,,1
146028889079,RETURN,1,,"return ""Loading "" + fileName + "" failed. 'ctu' must be a boolean."";",17,89,,,1
146028889080,RETURN,-1,,"return ""Loading "" + fileName +"" failed. 'python' must be a string."";",17,103,,,1
146028889081,RETURN,1,,"return ""Loading "" + fileName + "" failed. 'executable' must be a string."";",17,117,,,1
146028889082,RETURN,-1,,"return """";",13,122,,,8
146028889083,RETURN,1,,"return ""Loading "" + fileName + "" failed. 'script' is missing."";",9,128,,,1
146028889084,RETURN,1,,"return ""Loading "" + fileName + "" failed. 'script' must be a string."";",9,132,,,1
146028889085,RETURN,-1,,"return addoninfo.getAddonInfo(val.get<std::string>(), exename);",5,134,,,17
146028889086,RETURN,-1,,"return parseAddonInfo(*this, json, fileName, exename);",9,142,,,5
146028889087,RETURN,1,,"return getAddonInfo(fileName + "".py"", exename, debug);",9,145,,,1
146028889088,RETURN,1,,"return ""Did not find addon "" + fileName;",13,150,,,1
146028889089,RETURN,-1,,"return """";",9,164,,,11
146028889090,RETURN,1,,"return ""Failed to open addon "" + fileName;",9,168,,,1
146028889091,RETURN,1,,"return ""Failed to open "" + fileName;",9,172,,,1
146028889092,RETURN,-1,,"return parseAddonInfo(*this, json, fileName, exename);",5,180,,,11
146028889093,RETURN,-1,,"return fullpath.substr(pos1,pos2);",5,45,,,8
146028889094,RETURN,1,,return false;,9,81,,,1
146028889095,RETURN,1,,return false;,9,85,,,1
146028889096,RETURN,1,,return false;,9,89,,,1
146028889097,RETURN,-1,,return true;,5,96,,,12
146028889098,RETURN,-1,,"return line.substr(0,line.find(':'));",9,108,,,3
146028889099,RETURN,-1,,"return """";",5,110,,,5
146028889100,RETURN,1,,"return Path::join(buildDir, ret);",13,119,,,1
146028889101,RETURN,-1,,"return Path::join(buildDir, filename) + "".analyzerinfo"";",5,128,,,8
146028889102,RETURN,1,,return true;,9,134,,,1
146028889103,RETURN,1,,return false;,9,140,,,1
146028889104,RETURN,-1,,return true;,5,150,,,7
146028889105,RETURN,1,,return nullptr;,9,57,,,1
146028889106,RETURN,1,,return nullptr;,9,59,,,1
146028889107,RETURN,1,,return tok;,13,64,,,1
146028889108,RETURN,-1,,return nullptr;,5,66,,,4
146028889109,RETURN,1,,return -1;,9,73,,,1
146028889110,RETURN,1,,return -1;,13,77,,,1
146028889111,RETURN,1,,return res;,13,79,,,1
146028889112,RETURN,1,,return -1;,13,83,,,1
146028889113,RETURN,-1,,return argn + res;,9,84,,,9
146028889114,RETURN,-1,,return 1;,5,88,,,5
146028889115,RETURN,1,,return argn - 1;,9,95,,,1
146028889116,RETURN,-1,,return -1;,5,96,,,6
146028889117,RETURN,1,,return -1;,9,104,,,1
146028889118,RETURN,-1,,"return findArgumentPos(startTok, tokToFind);",5,108,,,8
146028889119,RETURN,1,,return;,9,116,,,1
146028889120,RETURN,-1,,return result;,5,130,,,3
146028889121,RETURN,-1,,return result;,5,137,,,3
146028889122,RETURN,1,,return 0;,9,144,,,1
146028889123,RETURN,1,,"return astCount(tok->astOperand1(), op, depth) + astCount(tok->astOperand2(), op, depth);",9,146,,,1
146028889124,RETURN,-1,,return 1;,5,147,,,4
146028889125,RETURN,1,,return false;,9,153,,,1
146028889126,RETURN,-1,,return root == tok;,5,156,,,3
146028889127,RETURN,1,,return false;,9,162,,,1
146028889128,RETURN,1,,return true;,9,164,,,1
146028889129,RETURN,-1,,"return astHasVar(tok->astOperand1(), varid) || astHasVar(tok->astOperand2(), varid);",5,165,,,3
146028889130,RETURN,1,,return false;,9,171,,,1
146028889131,RETURN,1,,return true;,9,173,,,1
146028889132,RETURN,-1,,"return astHasExpr(tok->astOperand1(), exprid) || astHasExpr(tok->astOperand2(), exprid);",5,174,,,3
146028889133,RETURN,1,,return false;,9,180,,,1
146028889134,RETURN,1,,return false;,9,183,,,1
146028889135,RETURN,-1,,return valueType->type == ValueType::Type::CHAR && valueType->pointer == 0U && valueType->sign == sign;,5,184,,,5
146028889136,RETURN,-1,,"return astIsCharWithSign(tok, ValueType::Sign::SIGNED);",5,189,,,1
146028889137,RETURN,-1,,"return astIsCharWithSign(tok, ValueType::Sign::UNKNOWN_SIGN);",5,194,,,1
146028889138,RETURN,-1,,return !astIsPointer(tok) && tok && tok->valueType() && (tok->valueType()->type == ValueType::Type::CHAR || tok->valueType()->type == ValueType::Type::WCHAR_T);,5,199,,,1
146028889139,RETURN,1,,return false;,9,206,,,1
146028889140,RETURN,-1,,return vt->isPrimitive();,5,207,,,4
146028889141,RETURN,1,,return unknown;,9,214,,,1
146028889142,RETURN,-1,,return vt->isIntegral() && vt->pointer == 0U;,5,215,,,4
146028889143,RETURN,-1,,return tok && tok->valueType() && tok->valueType()->sign == ValueType::UNSIGNED;,5,220,,,1
146028889144,RETURN,1,,return unknown;,9,227,,,1
146028889145,RETURN,-1,,return vt->type >= ValueType::Type::FLOAT && vt->pointer == 0U;,5,228,,,4
146028889146,RETURN,-1,,return tok && (tok->isBoolean() || (tok->valueType() && tok->valueType()->type == ValueType::Type::BOOL && !tok->valueType()->pointer));,5,233,,,1
146028889147,RETURN,-1,,return tok && tok->valueType() && tok->valueType()->pointer;,5,238,,,1
146028889148,RETURN,-1,,return tok && tok->valueType() && tok->valueType()->smartPointerTypeToken;,5,243,,,1
146028889149,RETURN,1,,return false;,9,249,,,1
146028889150,RETURN,1,,return false;,9,251,,,1
146028889151,RETURN,-1,,return tok->valueType()->smartPointer->unique;,5,252,,,3
146028889152,RETURN,-1,,return tok && tok->valueType() && tok->valueType()->type == ValueType::Type::ITERATOR;,5,257,,,1
146028889153,RETURN,-1,,return getLibraryContainer(tok) != nullptr && !astIsIterator(tok);,5,261,,,1
146028889154,RETURN,-1,,return container && !container->stdStringLike && !astIsIterator(tok);,5,267,,,3
146028889155,RETURN,-1,,return container && !astIsIterator(tok) && container->view;,5,273,,,3
146028889156,RETURN,-1,,return astIsContainer(tok) && !astIsContainerView(tok);,5,277,,,1
146028889157,RETURN,1,,return false;,9,283,,,1
146028889158,RETURN,1,,return false;,9,285,,,1
146028889159,RETURN,1,,return false;,9,288,,,1
146028889160,RETURN,-1,,return container->stdStringLike;,5,289,,,6
146028889161,RETURN,1,,return {};,9,296,,,1
146028889162,RETURN,-1,,"return { parent->next(), cont ? cont : tok->valueType()->container };",9,299,,,1
146028889163,RETURN,-1,,return {};,5,301,,,7
146028889164,RETURN,1,,return Library::Container::Action::NO_ACTION;,9,310,,,1
146028889165,RETURN,-1,,return ftokCont.second->getAction(ftokCont.first->str());,5,311,,,5
146028889166,RETURN,1,,return Library::Container::Yield::NO_YIELD;,9,320,,,1
146028889167,RETURN,-1,,return ftokCont.second->getYield(ftokCont.first->str());,5,321,,,5
146028889168,RETURN,1,,return Library::Container::Yield::NO_YIELD;,9,327,,,1
146028889169,RETURN,1,,return Library::Container::Yield::NO_YIELD;,9,331,,,1
146028889170,RETURN,-1,,return function->containerYield;,5,335,,,6
146028889171,RETURN,-1,,"return Token::simpleMatch(tok->astParent(), "":"") && Token::simpleMatch(tok->astParent()->astParent(), ""("");",5,340,,,1
146028889172,RETURN,1,,"return """";",9,346,,,1
146028889173,RETURN,-1,,return ret;,9,354,,,3
146028889174,RETURN,-1,,"return """";",5,356,,,5
146028889175,RETURN,1,,return true;,9,362,,,1
146028889176,RETURN,1,,return true;,9,364,,,1
146028889177,RETURN,-1,,return false;,5,365,,,3
146028889178,RETURN,1,,return nullptr;,9,371,,,1
146028889179,RETURN,-1,,return ret;,5,410,,,8
146028889180,RETURN,1,,return false;,9,416,,,1
146028889181,RETURN,1,,return false;,9,419,,,1
146028889182,RETURN,1,,return true;,9,421,,,1
146028889183,RETURN,-1,,"return Token::Match(varDeclEndToken, ""; %var%"") && varDeclEndToken->next() == tok;",5,423,,,8
146028889184,RETURN,-1,,"return Token::Match(tok, ""std :: string|wstring|u16string|u32string !!::"") ||
           (Token::simpleMatch(tok, ""std :: basic_string <"") && !Token::simpleMatch(tok->linkAt(3), ""> ::""));",5,428,,,1
146028889185,RETURN,1,,return false;,9,435,,,1
146028889186,RETURN,1,,"return (tok->originalName() != ""->"" && isTemporary(tok->astOperand1(), library)) ||
               isTemporary(tok->astOperand2(), library);",9,437,,,1
146028889187,RETURN,1,,"return isTemporary(tok->astOperand2(), library);",9,440,,,1
146028889188,RETURN,1,,"return isTemporary(tok->astOperand2(), library);",9,442,,,1
146028889189,RETURN,1,,return false;,9,444,,,1
146028889190,RETURN,1,,return false;,9,446,,,1
146028889191,RETURN,1,,return false;,9,448,,,1
146028889192,RETURN,1,,return false;,13,452,,,1
146028889193,RETURN,1,,return false;,13,454,,,1
146028889194,RETURN,-1,,return !branchTok->astOperand1()->valueType()->isTypeEqual(branchTok->astOperand2()->valueType());,9,455,,,5
146028889195,RETURN,1,,return false;,13,460,,,1
146028889196,RETURN,1,,return true;,21,465,,,1
146028889197,RETURN,1,,return true;,21,468,,,1
146028889198,RETURN,-1,,return tok->valueType()->reference == Reference::None && tok->valueType()->pointer == 0;,13,470,,,2
146028889199,RETURN,1,,return false;,13,478,,,1
146028889200,RETURN,1,,"return !Function::returnsReference(f, true);",13,480,,,1
146028889201,RETURN,1,,return true;,13,482,,,1
146028889202,RETURN,-1,,return !returnType.empty() && returnType.back() != '&';,13,485,,,3
146028889203,RETURN,-1,,return unknown;,9,487,,,10
146028889204,RETURN,1,,return false;,9,490,,,1
146028889205,RETURN,1,,return unknown;,9,493,,,1
146028889206,RETURN,1,,"return isTemporary(tok->astOperand1(), library);",9,496,,,1
146028889207,RETURN,-1,,return true;,5,497,,,13
146028889208,RETURN,1,,return true;,9,503,,,1
146028889209,RETURN,1,,return true;,9,505,,,1
146028889210,RETURN,1,,return isFunctionCall(tok->tokAt(2));,9,507,,,1
146028889211,RETURN,-1,,return false;,5,508,,,4
146028889212,RETURN,1,,return true;,13,515,,,1
146028889213,RETURN,-1,,return false;,5,517,,,2
146028889214,RETURN,1,,return nullptr;,9,524,,,1
146028889215,RETURN,-1,,return leftmostLeaf->previous();,5,528,,,5
146028889216,RETURN,-1,,return previousBeforeAstLeftmostLeafGeneric(tok);,5,533,,,1
146028889217,RETURN,-1,,return previousBeforeAstLeftmostLeafGeneric(tok);,5,537,,,1
146028889218,RETURN,1,,return nullptr;,9,545,,,1
146028889219,RETURN,-1,,return rightmostLeaf->next();,5,562,,,7
146028889220,RETURN,-1,,return nextAfterAstRightmostLeafGeneric(tok);,5,567,,,1
146028889221,RETURN,-1,,return nextAfterAstRightmostLeafGeneric(tok);,5,571,,,1
146028889222,RETURN,-1,,return astParentSkipParens(const_cast<Token*>(tok));,5,576,,,1
146028889223,RETURN,1,,return nullptr;,9,581,,,1
146028889224,RETURN,1,,return parent;,9,584,,,1
146028889225,RETURN,1,,return parent;,9,586,,,1
146028889226,RETURN,1,,return parent;,9,589,,,1
146028889227,RETURN,-1,,return astParentSkipParens(parent);,5,590,,,7
146028889228,RETURN,1,,return tok;,9,596,,,1
146028889229,RETURN,1,,return tok;,9,599,,,1
146028889230,RETURN,1,,return parent->astOperand1()->astOperand2();,13,602,,,1
146028889231,RETURN,-1,,return parent->astOperand1();,9,603,,,2
146028889232,RETURN,1,,return tok;,9,607,,,1
146028889233,RETURN,1,,return gparent->astOperand1();,9,609,,,1
146028889234,RETURN,-1,,return tok;,5,610,,,10
146028889235,RETURN,1,,return tok;,9,616,,,1
146028889236,RETURN,1,,return tok;,13,622,,,1
146028889237,RETURN,1,,return tok;,13,624,,,1
146028889238,RETURN,1,,return getParentLifetime(parent);,9,628,,,1
146028889239,RETURN,-1,,return tok;,5,629,,,6
146028889240,RETURN,1,,return {};,9,635,,,1
146028889241,RETURN,1,,return {tok};,9,637,,,1
146028889242,RETURN,-1,,return result;,5,649,,,8
146028889243,RETURN,-1,,return tok;,5,656,,,2
146028889244,RETURN,1,,return var->isLocal() || var->isArgument();,13,668,,,1
146028889245,RETURN,1,,return true;,13,670,,,1
146028889246,RETURN,-1,,"return isTemporary(tok2, &library);",9,671,,,5
146028889247,RETURN,1,,return false;,13,679,,,1
146028889248,RETURN,1,,return false;,13,683,,,1
146028889249,RETURN,1,,return true;,13,685,,,1
146028889250,RETURN,1,,return true;,17,688,,,1
146028889251,RETURN,1,,return true;,17,701,,,1
146028889252,RETURN,-1,,return var && var->isReference();,9,703,,,9
146028889253,RETURN,1,,return tok;,9,663,,,1
146028889254,RETURN,1,,return tok;,9,674,,,1
146028889255,RETURN,1,,return nullptr;,9,705,,,1
146028889256,RETURN,1,,return getParentLifetime(result);,9,708,,,1
146028889257,RETURN,-1,,return result;,5,709,,,11
146028889258,RETURN,1,,return false;,9,715,,,1
146028889259,RETURN,1,,return false;,9,717,,,1
146028889260,RETURN,1,,return false;,9,720,,,1
146028889261,RETURN,1,,return false;,9,722,,,1
146028889262,RETURN,1,,return false;,9,724,,,1
146028889263,RETURN,-1,,"return Token::simpleMatch(parent, "":"") && !Token::simpleMatch(parent->astParent(), ""?"");",5,728,,,9
146028889264,RETURN,1,,return {};,9,734,,,1
146028889265,RETURN,1,,return {};,9,736,,,1
146028889266,RETURN,1,,return {*tok->astParent()->astOperand1()->valueType()};,13,741,,,1
146028889267,RETURN,-1,,return {};,9,742,,,3
146028889268,RETURN,-1,,return result;,17,766,,,6
146028889269,RETURN,1,,return {*typeTok->valueType()};,21,770,,,1
146028889270,RETURN,1,,return {*it->valueType()};,25,779,,,1
146028889271,RETURN,1,,return {};,13,789,,,1
146028889272,RETURN,-1,,return {std::move(vtParent)};,9,791,,,8
146028889273,RETURN,1,,return {};,9,796,,,1
146028889274,RETURN,1,,return {*tok->astParent()->valueType()};,9,801,,,1
146028889275,RETURN,-1,,return {};,5,802,,,11
146028889276,RETURN,1,,return false;,9,808,,,1
146028889277,RETURN,1,,return false;,9,811,,,1
146028889278,RETURN,1,,return false;,9,813,,,1
146028889279,RETURN,1,,return false;,9,815,,,1
146028889280,RETURN,-1,,return parent->astOperand1() == tok;,5,816,,,7
146028889281,RETURN,1,,return false;,9,821,,,1
146028889282,RETURN,1,,return false;,9,824,,,1
146028889283,RETURN,1,,return false;,9,826,,,1
146028889284,RETURN,1,,return false;,9,828,,,1
146028889285,RETURN,-1,,return parent->astOperand2() == tok;,5,829,,,7
146028889286,RETURN,1,,return nullptr;,9,836,,,1
146028889287,RETURN,1,,return getCondTok(tok->previous());,9,838,,,1
146028889288,RETURN,1,,return endTok->tokAt(2)->astOperand2();,13,842,,,1
146028889289,RETURN,1,,return tok->next()->astOperand2()->astOperand2()->astOperand1();,9,846,,,1
146028889290,RETURN,1,,return tok->next()->astOperand2()->astOperand1();,9,848,,,1
146028889291,RETURN,1,,return nullptr;,9,850,,,1
146028889292,RETURN,-1,,return tok->next()->astOperand2();,5,851,,,7
146028889293,RETURN,1,,return nullptr;,9,858,,,1
146028889294,RETURN,1,,return nullptr;,9,861,,,1
146028889295,RETURN,1,,return getCondTok(startBlock->previous());,9,863,,,1
146028889296,RETURN,1,,return getCondTok(startBlock->linkAt(-1));,9,865,,,1
146028889297,RETURN,1,,return getCondTokFromEnd(startBlock->tokAt(-2));,9,867,,,1
146028889298,RETURN,-1,,return nullptr;,5,868,,,8
146028889299,RETURN,1,,return nullptr;,9,875,,,1
146028889300,RETURN,1,,return getInitTokImpl(tok->next());,9,877,,,1
146028889301,RETURN,1,,return nullptr;,9,879,,,1
146028889302,RETURN,1,,return nullptr;,9,881,,,1
146028889303,RETURN,1,,return nullptr;,9,883,,,1
146028889304,RETURN,-1,,return tok->astOperand2()->astOperand1();,5,884,,,6
146028889305,RETURN,1,,return nullptr;,9,891,,,1
146028889306,RETURN,1,,return getStepTokImpl(tok->next());,9,893,,,1
146028889307,RETURN,1,,return nullptr;,9,895,,,1
146028889308,RETURN,1,,return nullptr;,9,897,,,1
146028889309,RETURN,1,,return nullptr;,9,899,,,1
146028889310,RETURN,-1,,return tok->astOperand2()->astOperand2()->astOperand2();,5,900,,,6
146028889311,RETURN,-1,,return getCondTokImpl(tok);,5,905,,,1
146028889312,RETURN,-1,,return getCondTokImpl(tok);,5,909,,,1
146028889313,RETURN,-1,,return getCondTokFromEndImpl(endBlock);,5,914,,,1
146028889314,RETURN,-1,,return getCondTokFromEndImpl(endBlock);,5,918,,,1
146028889315,RETURN,-1,,return getInitTokImpl(tok);,5,922,,,1
146028889316,RETURN,-1,,return getInitTokImpl(tok);,5,925,,,1
146028889317,RETURN,-1,,return getStepTokImpl(tok);,5,929,,,1
146028889318,RETURN,-1,,return getStepTokImpl(tok);,5,932,,,1
146028889319,RETURN,1,,return scope->bodyEnd->linkAt(2)->next();,17,941,,,1
146028889320,RETURN,-1,,return scope->bodyEnd;,13,942,,,2
146028889321,RETURN,-1,,return nullptr;,5,946,,,4
146028889322,RETURN,1,,return ChildrenToVisit::op1_and_op2;,13,979,,,1
146028889323,RETURN,-1,,return ChildrenToVisit::none;,9,984,,,3
146028889324,RETURN,1,,return false;,9,958,,,1
146028889325,RETURN,1,,return false;,9,963,,,1
146028889326,RETURN,1,,return false;,9,972,,,1
146028889327,RETURN,1,,return false;,9,987,,,1
146028889328,RETURN,1,,return false;,9,989,,,1
146028889329,RETURN,-1,,return true;,5,995,,,22
146028889330,RETURN,1,,return nullptr;,9,1002,,,1
146028889331,RETURN,1,,return nullptr;,9,1005,,,1
146028889332,RETURN,1,,return varDeclEndToken->tokAt(2)->astOperand2();,9,1007,,,1
146028889333,RETURN,-1,,return varDeclEndToken->astOperand2();,5,1008,,,6
146028889334,RETURN,-1,,"return Token::Match(top->previous(), ""for|while ("") ? top : nullptr;",5,1014,,,3
146028889335,RETURN,1,,return false;,9,1021,,,1
146028889336,RETURN,1,,return false;,9,1023,,,1
146028889337,RETURN,1,,return true;,9,1025,,,1
146028889338,RETURN,-1,,return tok1->index() < tok2->index();,5,1026,,,4
146028889339,RETURN,1,,return false;,9,1033,,,1
146028889340,RETURN,1,,return false;,9,1035,,,1
146028889341,RETURN,1,,return true;,9,1037,,,1
146028889342,RETURN,-1,,return tok1->index() > tok2->index();,5,1038,,,4
146028889343,RETURN,1,,return false;,9,1044,,,1
146028889344,RETURN,-1,,return true;,13,1056,,,2
146028889345,RETURN,-1,,return false;,5,1059,,,3
146028889346,RETURN,-1,,return aliasTok != childTok && aliasTok->exprId() == childTok->exprId();,25,1083,,,1
146028889347,RETURN,1,,return false;,17,1071,,,1
146028889348,RETURN,-1,,return true;,17,1075,,,2
146028889349,RETURN,-1,,return true;,25,1085,,,1
146028889350,RETURN,-1,,return false;,13,1089,,,4
146028889351,RETURN,-1,,return r;,5,1094,,,5
146028889352,RETURN,1,,return false;,9,1100,,,1
146028889353,RETURN,1,,return true;,13,1103,,,1
146028889354,RETURN,1,,return true;,13,1105,,,1
146028889355,RETURN,-1,,return false;,5,1107,,,3
146028889356,RETURN,1,,return false;,9,1113,,,1
146028889357,RETURN,1,,return true;,9,1115,,,1
146028889358,RETURN,1,,return true;,9,1118,,,1
146028889359,RETURN,1,,"return contains(classScope->findAssociatedScopes(), expr->function()->nestedIn);",17,1134,,,1
146028889360,RETURN,-1,,return false;,13,1135,,,8
146028889361,RETURN,1,,return true;,13,1138,,,1
146028889362,RETURN,-1,,return ((var->isPrivate() || var->isPublic() || var->isProtected()) && !var->isStatic());,9,1142,,,3
146028889363,RETURN,1,,"return exprDependsOnThis(expr->astOperand1(), onVar, depth);",9,1145,,,1
146028889364,RETURN,-1,,"return exprDependsOnThis(expr->astOperand1(), onVar, depth) || exprDependsOnThis(expr->astOperand2(), onVar, depth);",5,1146,,,8
146028889365,RETURN,-1,,return ChildrenToVisit::done;,13,1155,,,2
146028889366,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,9,1157,,,2
146028889367,RETURN,-1,,return result;,5,1159,,,4
146028889368,RETURN,1,,return false;,9,1165,,,1
146028889369,RETURN,-1,,"return tok && (tok->str() == ""["" || Token::simpleMatch(tok->previous(), ""] :""));",5,1169,,,5
146028889370,RETURN,1,,return tok;,9,1178,,,1
146028889371,RETURN,1,,return tok;,9,1181,,,1
146028889372,RETURN,1,,return tok;,9,1184,,,1
146028889373,RETURN,1,,return tok;,9,1187,,,1
146028889374,RETURN,1,,return tok;,9,1190,,,1
146028889375,RETURN,1,,return tok;,9,1194,,,1
146028889376,RETURN,1,,return tok;,9,1196,,,1
146028889377,RETURN,1,,return tok;,9,1198,,,1
146028889378,RETURN,1,,return tok;,9,1200,,,1
146028889379,RETURN,1,,return tok;,9,1202,,,1
146028889380,RETURN,1,,return tok;,9,1204,,,1
146028889381,RETURN,1,,return tok;,9,1206,,,1
146028889382,RETURN,1,,return tok;,9,1209,,,1
146028889383,RETURN,1,,return tok;,9,1214,,,1
146028889384,RETURN,1,,return tok;,9,1216,,,1
146028889385,RETURN,1,,return tok;,13,1222,,,1
146028889386,RETURN,-1,,return tok;,9,1224,,,1
146028889387,RETURN,-1,,return tok;,9,1226,,,1
146028889388,RETURN,-1,,return varTok;,5,1228,,,28
146028889389,RETURN,1,,return;,9,1234,,,1
146028889390,RETURN,1,,return;,9,1236,,,1
146028889391,RETURN,1,,return;,9,1238,,,1
146028889392,RETURN,1,,return;,9,1241,,,1
146028889393,RETURN,1,,return {};,9,1257,,,1
146028889394,RETURN,-1,,return refs_result;,9,1261,,,3
146028889395,RETURN,-1,,return refs_result;,13,1268,,,3
146028889396,RETURN,-1,,return refs_result;,17,1275,,,3
146028889397,RETURN,-1,,return refs_result;,17,1281,,,4
146028889398,RETURN,1,,return {};,21,1285,,,1
146028889399,RETURN,-1,,return refs_result;,21,1292,,,3
146028889400,RETURN,1,,"return followAllReferences(vartok, temporary, inconclusive, std::move(errors), depth - 1);",21,1295,,,1
146028889401,RETURN,-1,,return refs_result;,13,1310,,,3
146028889402,RETURN,-1,,return refs_result;,13,1316,,,3
146028889403,RETURN,-1,,return refs_result;,13,1324,,,3
146028889404,RETURN,-1,,return refs_result;,21,1337,,,3
146028889405,RETURN,-1,,return refs_result;,25,1344,,,3
146028889406,RETURN,-1,,return refs_result;,25,1350,,,3
146028889407,RETURN,-1,,return refs_result;,25,1362,,,3
146028889408,RETURN,-1,,return refs_result;,13,1370,,,3
146028889409,RETURN,-1,,return refs_result;,5,1375,,,8
146028889410,RETURN,1,,return nullptr;,9,1381,,,1
146028889411,RETURN,-1,,return refs.front().token;,9,1386,,,2
146028889412,RETURN,-1,,return nullptr;,5,1388,,,5
146028889413,RETURN,1,,return false;,9,1395,,,1
146028889414,RETURN,1,,return false;,9,1398,,,1
146028889415,RETURN,-1,,return v1.tokvalue == v2.tokvalue;,5,1399,,,7
146028889416,RETURN,-1,,return false;,9,1408,,,1
146028889417,RETURN,1,,return false;,9,1411,,,1
146028889418,RETURN,-1,,return false;,9,1414,,,1
146028889419,RETURN,-1,,return false;,9,1417,,,1
146028889420,RETURN,-1,,"return compare(*v1, *v2, sameLifetime);",5,1420,,,13
146028889421,RETURN,-1,,return r;,9,1430,,,4
146028889422,RETURN,-1,,"return compareKnownValue(tok1, tok2, [&](const ValueFlow::Value& v1, const ValueFlow::Value& v2, bool sameLifetime) {
        bool r = v1.equalValue(v2);
        if (v1.isIteratorValue()) {
            r &= sameLifetime;
        }
        return r;
    });",5,1425,,,1
146028889423,RETURN,-1,,return !r;,9,1441,,,4
146028889424,RETURN,-1,,"return compareKnownValue(tok1, tok2, [&](const ValueFlow::Value& v1, const ValueFlow::Value& v2, bool sameLifetime) {
        bool r = v1.equalValue(v2);
        if (v1.isIteratorValue()) {
            r &= sameLifetime;
        }
        return !r;
    });",5,1436,,,1
146028889425,RETURN,1,,return tok->astOperand2();,13,1452,,,1
146028889426,RETURN,-1,,return tok;,9,1453,,,2
146028889427,RETURN,1,,return false;,9,1448,,,1
146028889428,RETURN,1,,return false;,9,1458,,,1
146028889429,RETURN,1,,return false;,9,1461,,,1
146028889430,RETURN,1,,return false;,9,1464,,,1
146028889431,RETURN,1,,return false;,9,1470,,,1
146028889432,RETURN,-1,,"return isEqualKnownValue(tok1, tok2);",5,1472,,,14
146028889433,RETURN,1,,return false;,9,1479,,,1
146028889434,RETURN,-1,,"return Token::simpleMatch(parent, "";"") && parent->astOperand1() == tok &&
           Token::simpleMatch(parent->astParent(), "";"") &&
           Token::simpleMatch(parent->astParent()->astParent(), ""("") &&
           parent->astParent()->astParent()->astOperand1()->str() == ""for"";",5,1481,,,4
146028889435,RETURN,1,,return false;,9,1490,,,1
146028889436,RETURN,-1,,"return Token::simpleMatch(parent, "";"") && parent->astOperand2() == tok &&
           Token::simpleMatch(parent->astParent(), "";"") &&
           Token::simpleMatch(parent->astParent()->astParent(), ""("") &&
           parent->astParent()->astParent()->astOperand1()->str() == ""for"";",5,1492,,,4
146028889437,RETURN,-1,,return vt.pointer == 0 && vt.type == ValueType::BOOL;,13,1540,,,1
146028889438,RETURN,1,,return false;,9,1501,,,1
146028889439,RETURN,1,,return false;,9,1503,,,1
146028889440,RETURN,1,,return true;,9,1505,,,1
146028889441,RETURN,1,,return true;,9,1507,,,1
146028889442,RETURN,1,,return false;,9,1510,,,1
146028889443,RETURN,1,,return false;,9,1512,,,1
146028889444,RETURN,1,,return false;,9,1514,,,1
146028889445,RETURN,1,,"return isUsedAsBool(parent, settings);",13,1517,,,1
146028889446,RETURN,-1,,return false;,9,1518,,,2
146028889447,RETURN,1,,return true;,9,1521,,,1
146028889448,RETURN,1,,"return !Token::simpleMatch(parent->astOperand1(), ""dynamic_cast"") && isUsedAsBool(parent, settings);",9,1523,,,1
146028889449,RETURN,1,,"return isUsedAsBool(parent, settings);",9,1525,,,1
146028889450,RETURN,1,,return true;,9,1528,,,1
146028889451,RETURN,1,,return true;,9,1530,,,1
146028889452,RETURN,1,,return true;,9,1532,,,1
146028889453,RETURN,1,,return true;,9,1534,,,1
146028889454,RETURN,1,,return false;,13,1537,,,1
146028889455,RETURN,-1,,"return std::any_of(vtParents.cbegin(), vtParents.cend(), [&](const ValueType& vt) {
            return vt.pointer == 0 && vt.type == ValueType::BOOL;
        });",9,1539,,,4
146028889456,RETURN,-1,,return false;,5,1543,,,19
146028889457,RETURN,1,,return false;,13,1549,,,1
146028889458,RETURN,1,,return false;,17,1552,,,1
146028889459,RETURN,1,,return false;,17,1554,,,1
146028889460,RETURN,1,,return false;,13,1557,,,1
146028889461,RETURN,1,,return false;,9,1560,,,1
146028889462,RETURN,1,,return false;,9,1562,,,1
146028889463,RETURN,1,,return false;,9,1564,,,1
146028889464,RETURN,1,,return false;,9,1566,,,1
146028889465,RETURN,-1,,return true;,5,1567,,,6
146028889466,RETURN,-1,,"return astIsBool(tok) || isUsedAsBool(tok, settings);",5,1572,,,1
146028889467,RETURN,1,,return true;,9,1578,,,1
146028889468,RETURN,1,,return false;,9,1580,,,1
146028889469,RETURN,-1,,"return isSameExpression(macro, tok1->astOperand1()->astOperand1(), tok2, settings, pure, followVar, errors);",9,1590,,,1
146028889470,RETURN,-1,,"return isSameExpression(macro, tok1, tok2->astOperand1()->astOperand1(), settings, pure, followVar, errors);",9,1593,,,1
146028889471,RETURN,1,,return false;,9,1597,,,1
146028889472,RETURN,1,,return true;,9,1605,,,1
146028889473,RETURN,-1,,"return isSameExpression(macro, varTok1, followTok2, settings, true, followVar, errors);",13,1612,,,2
146028889474,RETURN,-1,,"return isSameExpression(macro, followTok1, varTok2, settings, true, followVar, errors);",13,1617,,,2
146028889475,RETURN,-1,,"return isSameExpression(macro, varTok1, varTok2, settings, true, followVar, errors);",13,1622,,,3
146028889476,RETURN,1,,return false;,21,1635,,,1
146028889477,RETURN,-1,,"return isSameExpression(macro, refTok1, refTok2, settings, pure, followVar, errors);",13,1637,,,2
146028889478,RETURN,-1,,"return isSameExpression(macro, tok1->astOperand1(), tok2->astOperand2(), settings, pure, followVar, errors) &&
                   isSameExpression(macro, tok1->astOperand2(), tok2->astOperand1(), settings, pure, followVar, errors);",13,1643,,,1
146028889479,RETURN,1,,"return isSameExpression(macro, varTok1, varTok2, settings, pure, followVar, errors);",17,1682,,,1
146028889480,RETURN,-1,,return false;,9,1685,,,8
146028889481,RETURN,1,,return false;,9,1689,,,1
146028889482,RETURN,1,,return false;,21,1698,,,1
146028889483,RETURN,1,,return false;,21,1703,,,1
146028889484,RETURN,1,,return false;,21,1707,,,1
146028889485,RETURN,1,,return false;,17,1712,,,1
146028889486,RETURN,1,,return false;,13,1723,,,1
146028889487,RETURN,1,,return false;,17,1732,,,1
146028889488,RETURN,1,,return false;,13,1737,,,1
146028889489,RETURN,1,,return false;,9,1740,,,1
146028889490,RETURN,1,,return false;,9,1743,,,1
146028889491,RETURN,1,,return false;,13,1758,,,1
146028889492,RETURN,1,,return true;,9,1766,,,1
146028889493,RETURN,1,,return false;,13,1773,,,1
146028889494,RETURN,-1,,return commutativeEquals;,5,1783,,,35
146028889495,RETURN,1,,return false;,9,1789,,,1
146028889496,RETURN,1,,return isZero;,9,1794,,,1
146028889497,RETURN,1,,return true;,9,1796,,,1
146028889498,RETURN,1,,return !isZero;,9,1798,,,1
146028889499,RETURN,1,,return false;,9,1800,,,1
146028889500,RETURN,-1,,return false;,5,1801,,,8
146028889501,RETURN,1,,return false;,9,1807,,,1
146028889502,RETURN,1,,return false;,9,1810,,,1
146028889503,RETURN,1,,return true;,25,1821,,,1
146028889504,RETURN,-1,,"return isOppositeCond(isNot, orCond->astOperand1(), otherCond, settings, pure, followVar, errors) &&
               isOppositeCond(isNot, orCond->astOperand2(), otherCond, settings, pure, followVar, errors);",9,1838,,,7
146028889505,RETURN,1,,"return isSameExpression(true, cond1->astOperand1(), cond2->astOperand2(), settings, pure, followVar, errors);",17,1845,,,1
146028889506,RETURN,1,,"return isSameExpression(true, cond1->astOperand1(), cond2->astOperand1(), settings, pure, followVar, errors);",17,1847,,,1
146028889507,RETURN,1,,return false;,13,1850,,,1
146028889508,RETURN,-1,,"return isSameExpression(true, cond1->astOperand1(), cond2, settings, pure, followVar, errors);",9,1851,,,3
146028889509,RETURN,1,,"return isOppositeCond(isNot, cond2, cond1, settings, pure, followVar, errors);",9,1855,,,1
146028889510,RETURN,1,,"return isDifferentKnownValues(cond1->astOperand2(), cond2->astOperand2());",17,1860,,,1
146028889511,RETURN,1,,"return isDifferentKnownValues(cond1->astOperand1(), cond2->astOperand1());",17,1862,,,1
146028889512,RETURN,-1,,return !isZeroBoundCond(cond2);,13,1874,,,1
146028889513,RETURN,-1,,return !isZeroBoundCond(cond1);,13,1886,,,1
146028889514,RETURN,1,,return false;,9,1892,,,1
146028889515,RETURN,-1,,return false;,13,1936,,,1
146028889516,RETURN,1,,return false;,13,1939,,,1
146028889517,RETURN,1,,"return (op2 == ""=="" || op2 == "">"" || op2 == "">="") && (rhsValue1.intvalue < rhsValue2.intvalue);",13,1945,,,1
146028889518,RETURN,1,,"return (op2 == ""=="" || op2 == ""<"" || op2 == ""<="") && (rhsValue1.intvalue > rhsValue2.intvalue);",13,1947,,,1
146028889519,RETURN,-1,,return false;,9,1949,,,23
146028889520,RETURN,-1,,"return ((comp1 == ""=="" && comp2 == ""!="") ||
            (comp1 == ""!="" && comp2 == ""=="") ||
            (comp1 == ""<"" && comp2 == "">="") ||
            (comp1 == ""<="" && comp2 == "">"") ||
            (comp1 == "">"" && comp2 == ""<="") ||
            (comp1 == "">="" && comp2 == ""<"") ||
            (!isNot && ((comp1 == ""<"" && comp2 == "">"") ||
                        (comp1 == "">"" && comp2 == ""<"") ||
                        (comp1 == ""=="" && (comp2 == ""!="" || comp2 == "">"" || comp2 == ""<"")) ||
                        ((comp1 == ""!="" || comp1 == "">"" || comp1 == ""<"") && comp2 == ""=="")
                        )));",5,1953,,,14
146028889521,RETURN,1,,return false;,9,1969,,,1
146028889522,RETURN,1,,return true;,9,1971,,,1
146028889523,RETURN,1,,"return isSameExpression(true, tok1->astOperand1(), tok2, settings, pure, followVar, errors);",9,1973,,,1
146028889524,RETURN,1,,"return isSameExpression(true, tok2->astOperand1(), tok1, settings, pure, followVar, errors);",9,1975,,,1
146028889525,RETURN,-1,,return false;,5,1976,,,5
146028889526,RETURN,1,,return !var.isConst();,13,1983,,,1
146028889527,RETURN,-1,,return true;,9,1984,,,2
146028889528,RETURN,-1,,"return std::any_of(f->argumentList.cbegin(), f->argumentList.cend(), [](const Variable& var) {
        if (var.isReference() || var.isPointer())
            return !var.isConst();
        return true;
    });",5,1981,,,1
146028889529,RETURN,1,,return false;,25,2011,,,1
146028889530,RETURN,1,,return false;,25,2013,,,1
146028889531,RETURN,1,,return false;,25,2015,,,1
146028889532,RETURN,1,,return true;,25,2017,,,1
146028889533,RETURN,-1,,return false;,21,2018,,,5
146028889534,RETURN,1,,return var->isConst();,17,2061,,,1
146028889535,RETURN,-1,,return false;,13,2062,,,4
146028889536,RETURN,1,,return true;,9,1991,,,1
146028889537,RETURN,1,,return false;,9,1993,,,1
146028889538,RETURN,1,,return true;,13,1996,,,1
146028889539,RETURN,1,,return false;,13,1999,,,1
146028889540,RETURN,1,,return false;,13,2001,,,1
146028889541,RETURN,1,,return true;,17,2005,,,1
146028889542,RETURN,1,,return true;,21,2020,,,1
146028889543,RETURN,-1,,return false;,13,2022,,,3
146028889544,RETURN,1,,return f->isConstexpr();,13,2025,,,1
146028889545,RETURN,-1,,"return Token::Match(ftok, ""get|get_deleter ( )"");",9,2028,,,1
146028889546,RETURN,1,,return false;,13,2032,,,1
146028889547,RETURN,1,,return true;,13,2034,,,1
146028889548,RETURN,1,,return true;,13,2036,,,1
146028889549,RETURN,-1,,return false;,9,2037,,,6
146028889550,RETURN,1,,return true;,13,2040,,,1
146028889551,RETURN,1,,return true;,13,2042,,,1
146028889552,RETURN,1,,return true;,13,2044,,,1
146028889553,RETURN,-1,,return false;,9,2045,,,4
146028889554,RETURN,1,,return false;,13,2057,,,1
146028889555,RETURN,-1,,"return constMember && std::all_of(args.cbegin(), args.cend(), [](const Token* tok) {
            const Variable* var = tok->variable();
            if (var)
                return var->isConst();
            return false;
        });",9,2058,,,9
146028889556,RETURN,-1,,return true;,5,2065,,,4
146028889557,RETURN,1,,return true;,9,2071,,,1
146028889558,RETURN,1,,return false;,9,2073,,,1
146028889559,RETURN,1,,return false;,13,2076,,,1
146028889560,RETURN,1,,return false;,9,2079,,,1
146028889561,RETURN,1,,return false;,9,2081,,,1
146028889562,RETURN,1,,return false;,9,2083,,,1
146028889563,RETURN,1,,return false;,9,2086,,,1
146028889564,RETURN,-1,,"return isConstExpression(tok->astOperand1(), library) && isConstExpression(tok->astOperand2(), library);",5,2087,,,8
146028889565,RETURN,1,,return true;,9,2093,,,1
146028889566,RETURN,1,,return true;,9,2095,,,1
146028889567,RETURN,-1,,return var && ((!var->isClass() && (checkReference || !var->isReference())) || var->isPointer() || (checkArrayAccess ? var->isStlType() && !var->isStlType(CheckClass::stl_containers_not_const) : var->isStlType()));,9,2101,,,3
146028889568,RETURN,-1,,return true;,5,2103,,,5
146028889569,RETURN,1,,return true;,17,2118,,,1
146028889570,RETURN,-1,,return f.argumentList.size() != fun->argumentList.size() || returnType != freturnType || f.name() == fun->name();,13,2121,,,4
146028889571,RETURN,1,,return v.type() && v.type()->name() == varType->name() && v.name() != var->name();,17,2135,,,1
146028889572,RETURN,-1,,"return v.isFloatingType() == var->isFloatingType() &&
                   v.isEnumType() == var->isEnumType() &&
                   v.isClass() == var->isClass() &&
                   v.isArray() == var->isArray() &&
                   v.isPointer() == var->isPointer() &&
                   v.name() != var->name();",13,2136,,,2
146028889573,RETURN,1,,return true;,9,2109,,,1
146028889574,RETURN,1,,return true;,13,2114,,,1
146028889575,RETURN,1,,return false;,13,2123,,,1
146028889576,RETURN,1,,return true;,13,2128,,,1
146028889577,RETURN,1,,return false;,13,2144,,,1
146028889578,RETURN,1,,return false;,17,2147,,,1
146028889579,RETURN,-1,,return false;,9,2150,,,1
146028889580,RETURN,-1,,return isUniqueExpression(tok->astOperand2());,5,2153,,,3
146028889581,RETURN,1,,return true;,9,2159,,,1
146028889582,RETURN,1,,"return Token::simpleMatch(tok, ""throw"");",9,2161,,,1
146028889583,RETURN,-1,,"return Token::Match(tok, ""return|throw"");",5,2162,,,3
146028889584,RETURN,1,,return true;,9,2168,,,1
146028889585,RETURN,1,,"return Token::simpleMatch(tok, ""throw"");",9,2170,,,1
146028889586,RETURN,-1,,"return Token::Match(tok, ""return|goto|throw|continue|break"");",5,2171,,,3
146028889587,RETURN,1,,return false;,9,2177,,,1
146028889588,RETURN,1,,return true;,13,2181,,,1
146028889589,RETURN,1,,return true;,13,2183,,,1
146028889590,RETURN,1,,return true;,13,2186,,,1
146028889591,RETURN,-1,,return false;,5,2188,,,5
146028889592,RETURN,1,,return false;,9,2194,,,1
146028889593,RETURN,1,,return true;,17,2202,,,1
146028889594,RETURN,1,,return true;,17,2204,,,1
146028889595,RETURN,-1,,return true;,13,2206,,,1
146028889596,RETURN,-1,,return true;,13,2208,,,1
146028889597,RETURN,-1,,return false;,9,2212,,,5
146028889598,RETURN,-1,,"return hasNoreturnFunction(tok->astOperand1(), library, unknownFunc) || hasNoreturnFunction(tok->astOperand2(), library, unknownFunc);",9,2215,,,1
146028889599,RETURN,-1,,return false;,5,2218,,,7
146028889600,RETURN,1,,return false;,9,2224,,,1
146028889601,RETURN,1,,"return isReturnScope(prev, library, unknownFunc, functionScope) &&
                   isReturnScope(prev->link()->tokAt(-2), library, unknownFunc, functionScope);",13,2234,,,1
146028889602,RETURN,-1,,"return isReturnScope(prev, library, unknownFunc, functionScope);",13,2240,,,1
146028889603,RETURN,1,,return true;,13,2243,,,1
146028889604,RETURN,1,,"return isReturnScope(prev, library, unknownFunc, functionScope);",13,2245,,,1
146028889605,RETURN,1,,return true;,13,2248,,,1
146028889606,RETURN,-1,,return false;,13,2253,,,2
146028889607,RETURN,1,,return true;,13,2257,,,1
146028889608,RETURN,1,,return true;,13,2259,,,1
146028889609,RETURN,-1,,return prev && prev->isName();,9,2264,,,7
146028889610,RETURN,-1,,return false;,5,2266,,,7
146028889611,RETURN,1,,return false;,9,2272,,,1
146028889612,RETURN,1,,return true;,13,2276,,,1
146028889613,RETURN,-1,,return false;,5,2279,,,5
146028889614,RETURN,1,,return false;,9,2285,,,1
146028889615,RETURN,1,,"return isVariableChangedByFunctionCall(tok, indirect, settings, inconclusive);",9,2287,,,1
146028889616,RETURN,-1,,"return isVariableChangedByFunctionCall(tok->astOperand1(), indirect, varid, settings, inconclusive) ||
           isVariableChangedByFunctionCall(tok->astOperand2(), indirect, varid, settings, inconclusive);",5,2288,,,3
146028889617,RETURN,1,,return false;,9,2295,,,1
146028889618,RETURN,1,,return false;,9,2297,,,1
146028889619,RETURN,1,,return tok->scope()->bodyStart == tok;,9,2299,,,1
146028889620,RETURN,1,,return tok->scope()->bodyEnd == tok;,9,2301,,,1
146028889621,RETURN,-1,,return false;,5,2302,,,5
146028889622,RETURN,1,,return nullptr;,17,2327,,,1
146028889623,RETURN,1,,return nullptr;,13,2329,,,1
146028889624,RETURN,1,,return nullptr;,9,2337,,,1
146028889625,RETURN,1,,return nullptr;,9,2348,,,1
146028889626,RETURN,1,,return nullptr;,9,2350,,,1
146028889627,RETURN,1,,return tok->tokAt(2);,9,2356,,,1
146028889628,RETURN,1,,return nullptr;,9,2372,,,1
146028889629,RETURN,1,,return nullptr;,9,2375,,,1
146028889630,RETURN,-1,,return tok;,5,2376,,,21
146028889631,RETURN,-1,,"return getTokenArgumentFunctionImpl(tok, argn);",5,2380,,,1
146028889632,RETURN,-1,,"return getTokenArgumentFunctionImpl(tok, argn);",5,2384,,,1
146028889633,RETURN,1,,return result;,9,2391,,,1
146028889634,RETURN,1,,return {argvar};,13,2395,,,1
146028889635,RETURN,-1,,return result;,9,2396,,,4
146028889636,RETURN,1,,return result;,13,2401,,,1
146028889637,RETURN,1,,return result;,13,2404,,,1
146028889638,RETURN,-1,,return {&*it};,13,2409,,,3
146028889639,RETURN,-1,,return result;,5,2425,,,5
146028889640,RETURN,1,,return false;,9,2431,,,1
146028889641,RETURN,-1,,"return endsWith(tok->str(), ""_cast"");",5,2432,,,2
146028889642,RETURN,1,,return false;,9,2440,,,1
146028889643,RETURN,1,,return true;,9,2442,,,1
146028889644,RETURN,-1,,return false;,5,2443,,,7
146028889645,RETURN,1,,return false;,9,2449,,,1
146028889646,RETURN,1,,return tok->variable()->isArray();,9,2451,,,1
146028889647,RETURN,1,,return isArray(tok->astOperand2());,9,2453,,,1
146028889648,RETURN,-1,,return false;,5,2454,,,4
146028889649,RETURN,1,,return false;,9,2467,,,1
146028889650,RETURN,1,,return false;,9,2469,,,1
146028889651,RETURN,1,,return false;,9,2471,,,1
146028889652,RETURN,1,,return false;,9,2473,,,1
146028889653,RETURN,1,,return false;,9,2475,,,1
146028889654,RETURN,1,,return false;,9,2477,,,1
146028889655,RETURN,1,,return isMutableExpression(tok->astOperand1());,9,2479,,,1
146028889656,RETURN,1,,return false;,13,2482,,,1
146028889657,RETURN,1,,return false;,13,2484,,,1
146028889658,RETURN,-1,,return true;,5,2486,,,9
146028889659,RETURN,1,,return false;,9,2492,,,1
146028889660,RETURN,1,,return false;,9,2495,,,1
146028889661,RETURN,1,,return true;,9,2509,,,1
146028889662,RETURN,1,,return false;,9,2514,,,1
146028889663,RETURN,1,,return false;,9,2516,,,1
146028889664,RETURN,1,,return false;,9,2518,,,1
146028889665,RETURN,1,,return false;,9,2521,,,1
146028889666,RETURN,1,,return false;,13,2531,,,1
146028889667,RETURN,1,,return true;,17,2537,,,1
146028889668,RETURN,1,,return true;,17,2541,,,1
146028889669,RETURN,1,,return true;,13,2544,,,1
146028889670,RETURN,1,,return false;,13,2548,,,1
146028889671,RETURN,-1,,return false;,13,2553,,,2
146028889672,RETURN,-1,,return true;,9,2556,,,10
146028889673,RETURN,1,,return false;,13,2561,,,1
146028889674,RETURN,1,,return true;,17,2572,,,1
146028889675,RETURN,1,,return true;,17,2574,,,1
146028889676,RETURN,1,,return true;,17,2576,,,1
146028889677,RETURN,1,,return true;,13,2579,,,1
146028889678,RETURN,1,,return true;,13,2589,,,1
146028889679,RETURN,-1,,return false;,5,2594,,,32
146028889680,RETURN,-1,,return tok;,9,2643,,,4
146028889681,RETURN,1,,return false;,9,2600,,,1
146028889682,RETURN,1,,return false;,9,2603,,,1
146028889683,RETURN,1,,return true;,9,2633,,,1
146028889684,RETURN,1,,return true;,13,2649,,,1
146028889685,RETURN,1,,return true;,17,2655,,,1
146028889686,RETURN,1,,return true;,13,2664,,,1
146028889687,RETURN,1,,return false;,13,2668,,,1
146028889688,RETURN,1,,return true;,9,2672,,,1
146028889689,RETURN,1,,return true;,9,2675,,,1
146028889690,RETURN,1,,return false;,13,2682,,,1
146028889691,RETURN,1,,return true;,17,2701,,,1
146028889692,RETURN,1,,"return isVariableChanged(ftok->next(), indirect, settings, depth - 1);",17,2705,,,1
146028889693,RETURN,-1,,"return isVariableChanged(ftok->next(), indirect + 1, settings, depth - 1);",17,2712,,,1
146028889694,RETURN,-1,,return false;,17,2718,,,1
146028889695,RETURN,1,,return false;,13,2722,,,1
146028889696,RETURN,1,,return true;,13,2726,,,1
146028889697,RETURN,-1,,return !fun->isConst();,9,2727,,,11
146028889698,RETURN,1,,return true;,13,2735,,,1
146028889699,RETURN,1,,return true;,9,2738,,,1
146028889700,RETURN,1,,return true;,9,2741,,,1
146028889701,RETURN,1,,return true;,13,2749,,,1
146028889702,RETURN,1,,return true;,13,2760,,,1
146028889703,RETURN,1,,return true;,9,2767,,,1
146028889704,RETURN,1,,return true;,25,2779,,,1
146028889705,RETURN,1,,return true;,13,2788,,,1
146028889706,RETURN,1,,return false;,13,2791,,,1
146028889707,RETURN,1,,return false;,13,2794,,,1
146028889708,RETURN,1,,return true;,13,2796,,,1
146028889709,RETURN,-1,,return false;,9,2797,,,9
146028889710,RETURN,-1,,return true;,17,2809,,,1
146028889711,RETURN,-1,,return false;,5,2814,,,35
146028889712,RETURN,-1,,"return findVariableChanged(start, end, 0, exprid, globalvar, settings, depth) != nullptr;",5,2819,,,1
146028889713,RETURN,-1,,"return findVariableChanged(start, end, indirect, exprid, globalvar, settings, depth) != nullptr;",5,2824,,,1
146028889714,RETURN,1,,return nullptr;,9,2831,,,1
146028889715,RETURN,1,,return nullptr;,9,2834,,,1
146028889716,RETURN,-1,,return tok;,9,2838,,,2
146028889717,RETURN,-1,,return nullptr;,5,2840,,,8
146028889718,RETURN,1,,return nullptr;,9,2846,,,1
146028889719,RETURN,1,,return tok;,13,2860,,,1
146028889720,RETURN,1,,return tok;,13,2864,,,1
146028889721,RETURN,1,,return nullptr;,17,2870,,,1
146028889722,RETURN,-1,,return tok;,9,2873,,,13
146028889723,RETURN,-1,,return nullptr;,5,2875,,,3
146028889724,RETURN,1,,return true;,9,2890,,,1
146028889725,RETURN,1,,return false;,9,2892,,,1
146028889726,RETURN,1,,return true;,17,2897,,,1
146028889727,RETURN,1,,return true;,17,2902,,,1
146028889728,RETURN,1,,return false;,13,2913,,,1
146028889729,RETURN,1,,return true;,13,2915,,,1
146028889730,RETURN,1,,return true;,13,2918,,,1
146028889731,RETURN,-1,,return false;,9,2919,,,13
146028889732,RETURN,-1,,"return (isVariableChanged(tok, indirect, settings, depth));",5,2921,,,4
146028889733,RETURN,-1,,return expr;,9,2932,,,1
146028889734,RETURN,-1,,"return isExpressionChangedAt([&] {
        return expr;
    }, tok, indirect, expr->exprId(), globalvar, settings, depth);",5,2931,,,1
146028889735,RETURN,-1,,"return findExpression(start, exprid);",9,2943,,,1
146028889736,RETURN,1,,return nullptr;,9,2939,,,1
146028889737,RETURN,1,,return start;,9,2941,,,1
146028889738,RETURN,1,,return tok;,13,2947,,,1
146028889739,RETURN,-1,,return nullptr;,5,2949,,,6
146028889740,RETURN,-1,,"return findVariableChanged(const_cast<Token*>(start), end, indirect, exprid, globalvar, settings, depth);",5,2954,,,1
146028889741,RETURN,1,,return false;,9,2960,,,1
146028889742,RETURN,1,,return false;,9,2962,,,1
146028889743,RETURN,1,,return false;,9,2965,,,1
146028889744,RETURN,-1,,"return findExpressionChanged(var->nameToken(), start->next(), var->scope()->bodyEnd, settings, depth);",5,2973,,,8
146028889745,RETURN,-1,,return var->declarationId();,9,2984,,,1
146028889746,RETURN,-1,,return var->isGlobal();,9,2987,,,1
146028889747,RETURN,1,,return true;,17,2993,,,1
146028889748,RETURN,1,,return true;,13,2997,,,1
146028889749,RETURN,-1,,return false;,5,2999,,,6
146028889750,RETURN,-1,,return (!tok->previous()->function()->isConst() && !tok->previous()->function()->isStatic());,13,3007,,,1
146028889751,RETURN,-1,,return true;,13,3010,,,1
146028889752,RETURN,1,,return true;,9,3014,,,1
146028889753,RETURN,-1,,return false;,5,3015,,,3
146028889754,RETURN,1,,return nullptr;,9,3021,,,1
146028889755,RETURN,1,,return tok;,13,3026,,,1
146028889756,RETURN,-1,,return nullptr;,5,3028,,,3
146028889757,RETURN,1,,return true;,25,3070,,,1
146028889758,RETURN,-1,,return false;,17,3072,,,5
146028889759,RETURN,1,,return true;,17,3048,,,1
146028889760,RETURN,1,,return false;,17,3053,,,1
146028889761,RETURN,-1,,return true;,17,3076,,,2
146028889762,RETURN,-1,,return false;,9,3079,,,6
146028889763,RETURN,1,,return start;,9,3040,,,1
146028889764,RETURN,1,,return nullptr;,9,3042,,,1
146028889765,RETURN,-1,,return result;,5,3081,,,6
146028889766,RETURN,-1,,"return findToken(start, end, f);",13,3089,,,1
146028889767,RETURN,-1,,"return findTokenSkipDeadCode(library, start, end, std::move(f), *evaluate);",13,3103,,,1
146028889768,RETURN,-1,,"return findExpressionChangedImpl(expr, start, end, settings, depth, ExpressionChangedSimpleFind{});",5,3114,,,1
146028889769,RETURN,-1,,"return findExpressionChangedImpl(
        expr, start, end, settings, depth, ExpressionChangedSkipDeadCode{settings.library, evaluate});",5,3124,,,1
146028889770,RETURN,1,,return nullptr;,9,3136,,,1
146028889771,RETURN,-1,,return startTok;,5,3140,,,9
146028889772,RETURN,-1,,"return astCount(getArgumentStart(ftok), "","");",5,3144,,,1
146028889773,RETURN,-1,,return arguments;,5,3160,,,7
146028889774,RETURN,-1,,"return astFlatten(getArgumentStart(ftok), "","");",5,3164,,,1
146028889775,RETURN,-1,,return v.nameToken() == var->nameToken();,9,3170,,,1
146028889776,RETURN,1,,return -1;,9,3173,,,1
146028889777,RETURN,-1,,"return std::distance(f->argumentList.cbegin(), arg_it);",5,3174,,,4
146028889778,RETURN,1,,return nullptr;,9,3180,,,1
146028889779,RETURN,1,,return nullptr;,9,3182,,,1
146028889780,RETURN,1,,return iter1;,13,3186,,,1
146028889781,RETURN,1,,return nullptr;,13,3188,,,1
146028889782,RETURN,1,,return iter2;,13,3191,,,1
146028889783,RETURN,1,,return tok->previous()->astOperand1();,13,3194,,,1
146028889784,RETURN,1,,return tok->next()->astOperand2();,13,3197,,,1
146028889785,RETURN,-1,,return nullptr;,5,3199,,,4
146028889786,RETURN,1,,return false;,9,3205,,,1
146028889787,RETURN,1,,return true;,9,3207,,,1
146028889788,RETURN,1,,return true;,13,3215,,,1
146028889789,RETURN,1,,return tok1->exprId() == tok2->exprId();,9,3221,,,1
146028889790,RETURN,-1,,return tok1 || tok2;,5,3222,,,9
146028889791,RETURN,1,,return nullptr;,9,3228,,,1
146028889792,RETURN,1,,return tok->astParent();,9,3233,,,1
146028889793,RETURN,-1,,return nullptr;,5,3234,,,6
146028889794,RETURN,1,,return true;,21,3246,,,1
146028889795,RETURN,1,,return false;,21,3248,,,1
146028889796,RETURN,-1,,return true;,9,3252,,,2
146028889797,RETURN,1,,return nullptr;,9,3256,,,1
146028889798,RETURN,1,,return nullptr;,9,3258,,,1
146028889799,RETURN,1,,return nullptr;,9,3260,,,1
146028889800,RETURN,1,,return nullptr;,9,3265,,,1
146028889801,RETURN,1,,return tok->astOperand1()->link();,9,3271,,,1
146028889802,RETURN,-1,,return nullptr;,5,3272,,,14
146028889803,RETURN,-1,,return findLambdaEndTokenGeneric(first);,5,3277,,,1
146028889804,RETURN,-1,,return findLambdaEndTokenGeneric(first);,5,3281,,,1
146028889805,RETURN,1,,return false;,9,3287,,,1
146028889806,RETURN,1,,return false;,9,3290,,,1
146028889807,RETURN,1,,return false;,9,3293,,,1
146028889808,RETURN,1,,return false;,9,3296,,,1
146028889809,RETURN,-1,,"return !astIsIntegral(stream, false);",5,3298,,,5
146028889810,RETURN,1,,return false;,9,3304,,,1
146028889811,RETURN,1,,return false;,9,3307,,,1
146028889812,RETURN,1,,return false;,9,3310,,,1
146028889813,RETURN,1,,return false;,9,3313,,,1
146028889814,RETURN,1,,return false;,9,3319,,,1
146028889815,RETURN,1,,return false;,9,3321,,,1
146028889816,RETURN,1,,return false;,9,3323,,,1
146028889817,RETURN,-1,,return (!parent->astOperand1()->valueType() || !parent->astOperand1()->valueType()->isIntegral());,5,3324,,,11
146028889818,RETURN,-1,,"return tok && Token::simpleMatch(tok->previous(), ""> ("") && tok->astOperand2() && tok->astOperand1() && isCPPCastKeyword(tok->astOperand1());",5,3329,,,1
146028889819,RETURN,-1,,"return isConstVarExpression(t, skipPredicate);",13,3349,,,1
146028889820,RETURN,1,,return false;,9,3335,,,1
146028889821,RETURN,1,,return isConstVarExpression(tok->astOperand2()->astOperand1()) && isConstVarExpression(tok->astOperand2()->astOperand2());,9,3337,,,1
146028889822,RETURN,1,,return false;,9,3339,,,1
146028889823,RETURN,1,,return true;,9,3341,,,1
146028889824,RETURN,1,,return false;,13,3344,,,1
146028889825,RETURN,1,,return true;,13,3347,,,1
146028889826,RETURN,-1,,"return !args.empty() && std::all_of(args.cbegin(), args.cend(), [&](const Token* t) {
            return isConstVarExpression(t, skipPredicate);
        });",9,3348,,,5
146028889827,RETURN,-1,,"return isConstVarExpression(tok->astOperand2(), skipPredicate);",9,3353,,,1
146028889828,RETURN,1,,"return isConstVarExpression(tok->astOperand1(), skipPredicate);",9,3356,,,1
146028889829,RETURN,1,,"return isConstVarExpression(tok->astOperand2(), skipPredicate);",9,3358,,,1
146028889830,RETURN,1,,return false;,13,3361,,,1
146028889831,RETURN,1,,return false;,13,3363,,,1
146028889832,RETURN,-1,,return true;,9,3364,,,3
146028889833,RETURN,1,,return true;,9,3367,,,1
146028889834,RETURN,1,,return true;,9,3369,,,1
146028889835,RETURN,1,,return tok->variable()->isConst() && tok->variable()->nameToken() && tok->variable()->nameToken()->hasKnownValue();,9,3371,,,1
146028889836,RETURN,-1,,return false;,5,3372,,,13
146028889837,RETURN,-1,,return f.isConstructor();,21,3397,,,1
146028889838,RETURN,1,,return ExprUsage::None;,9,3382,,,1
146028889839,RETURN,1,,return ExprUsage::Used;,13,3388,,,1
146028889840,RETURN,1,,return ExprUsage::Used;,17,3393,,,1
146028889841,RETURN,1,,return ExprUsage::PassedByReference;,21,3411,,,1
146028889842,RETURN,1,,return ExprUsage::PassedByReference;,29,3415,,,1
146028889843,RETURN,1,,return ExprUsage::NotUsed;,29,3417,,,1
146028889844,RETURN,-1,,return ExprUsage::PassedByReference;,25,3418,,,3
146028889845,RETURN,-1,,return ExprUsage::NotUsed;,17,3421,,,3
146028889846,RETURN,1,,return ExprUsage::Used;,13,3425,,,1
146028889847,RETURN,-1,,return ExprUsage::Used;,9,3427,,,1
146028889848,RETURN,-1,,return indirect == 0 ? ExprUsage::Used : ExprUsage::Inconclusive;,9,3429,,,1
146028889849,RETURN,1,,return ExprUsage::Used;,13,3433,,,1
146028889850,RETURN,1,,return ExprUsage::Used;,13,3437,,,1
146028889851,RETURN,-1,,return ExprUsage::Inconclusive;,5,3439,,,11
146028889852,RETURN,1,,return false;,9,3445,,,1
146028889853,RETURN,1,,return false;,9,3448,,,1
146028889854,RETURN,1,,return true;,9,3450,,,1
146028889855,RETURN,-1,,return isLeafDot(parent);,5,3451,,,6
146028889856,RETURN,1,,return ExprUsage::NotUsed;,13,3461,,,1
146028889857,RETURN,1,,return ExprUsage::NotUsed;,13,3463,,,1
146028889858,RETURN,1,,return ExprUsage::NotUsed;,13,3465,,,1
146028889859,RETURN,1,,return ExprUsage::NotUsed;,13,3467,,,1
146028889860,RETURN,1,,"return getExprUsage(parent->astParent(), indirect, settings);",13,3469,,,1
146028889861,RETURN,1,,return ExprUsage::NotUsed;,13,3471,,,1
146028889862,RETURN,1,,return ExprUsage::NotUsed;,9,3474,,,1
146028889863,RETURN,1,,return ExprUsage::Used;,13,3479,,,1
146028889864,RETURN,1,,return ExprUsage::NotUsed;,25,3487,,,1
146028889865,RETURN,1,,return ExprUsage::Used;,21,3489,,,1
146028889866,RETURN,1,,return ExprUsage::NotUsed;,17,3495,,,1
146028889867,RETURN,-1,,return ExprUsage::Used;,13,3496,,,4
146028889868,RETURN,1,,return ExprUsage::Used;,13,3501,,,1
146028889869,RETURN,-1,,"return getFunctionUsage(tok, indirect, settings);",5,3503,,,6
146028889870,RETURN,1,,return;,9,3509,,,1
146028889871,RETURN,1,,return;,13,3513,,,1
146028889872,RETURN,1,,return result;,9,3531,,,1
146028889873,RETURN,1,,return result;,9,3533,,,1
146028889874,RETURN,1,,return {tok->astOperand1()->variable()};,9,3535,,,1
146028889875,RETURN,-1,,return result;,5,3537,,,6
146028889876,RETURN,1,,return nullptr;,9,3543,,,1
146028889877,RETURN,1,,return vartok;,13,3547,,,1
146028889878,RETURN,-1,,return getLHSVariableRecursive(tok->astOperand2());,9,3548,,,4
146028889879,RETURN,1,,return tok->next();,9,3551,,,1
146028889880,RETURN,-1,,return tok;,5,3552,,,4
146028889881,RETURN,1,,return nullptr;,9,3558,,,1
146028889882,RETURN,1,,return nullptr;,9,3560,,,1
146028889883,RETURN,1,,return tok->astOperand1()->variable();,9,3562,,,1
146028889884,RETURN,1,,return nullptr;,9,3565,,,1
146028889885,RETURN,-1,,return vartok->variable();,5,3566,,,7
146028889886,RETURN,1,,return nullptr;,9,3572,,,1
146028889887,RETURN,1,,return nullptr;,9,3574,,,1
146028889888,RETURN,1,,return tok->astOperand1();,9,3576,,,1
146028889889,RETURN,1,,return vartok;,9,3579,,,1
146028889890,RETURN,-1,,return tok->astOperand1();,5,3580,,,7
146028889891,RETURN,1,,return nullptr;,9,3586,,,1
146028889892,RETURN,-1,,"return tok1 ? tok1 : findAllocFuncCallToken(expr->astOperand2(), library);",9,3589,,,3
146028889893,RETURN,1,,"return findAllocFuncCallToken(expr->astOperand2() ? expr->astOperand2() : expr->astOperand1(), library);",9,3592,,,1
146028889894,RETURN,1,,return expr->astOperand1();,9,3594,,,1
146028889895,RETURN,-1,,"return (Token::simpleMatch(expr, ""new"") && expr->astOperand1()) ? expr : nullptr;",5,3595,,,5
146028889896,RETURN,1,,return false;,9,3601,,,1
146028889897,RETURN,1,,"return Token::Match(expr, ""NULL|nullptr"");",9,3605,,,1
146028889898,RETURN,1,,return false;,9,3607,,,1
146028889899,RETURN,-1,,"return Token::Match(castOp, ""NULL|nullptr"") || (MathLib::isInt(castOp->str()) && MathLib::isNullValue(castOp->str()));",5,3609,,,6
146028889900,RETURN,-1,,return ChildrenToVisit::none;,13,3631,,,2
146028889901,RETURN,-1,,return ChildrenToVisit::none;,13,3636,,,2
146028889902,RETURN,-1,,return ChildrenToVisit::none;,17,3644,,,2
146028889903,RETURN,-1,,return ChildrenToVisit::none;,17,3648,,,2
146028889904,RETURN,-1,,return ChildrenToVisit::none;,17,3652,,,2
146028889905,RETURN,-1,,return ChildrenToVisit::none;,13,3657,,,2
146028889906,RETURN,-1,,return ChildrenToVisit::none;,17,3663,,,2
146028889907,RETURN,-1,,return ChildrenToVisit::none;,17,3667,,,2
146028889908,RETURN,-1,,return ChildrenToVisit::none;,17,3671,,,2
146028889909,RETURN,-1,,return ChildrenToVisit::none;,17,3675,,,2
146028889910,RETURN,-1,,return ChildrenToVisit::none;,17,3679,,,2
146028889911,RETURN,-1,,return ChildrenToVisit::none;,13,3685,,,2
146028889912,RETURN,1,,return ChildrenToVisit::op1;,13,3688,,,1
146028889913,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,9,3689,,,9
146028889914,RETURN,1,,return true;,13,3617,,,1
146028889915,RETURN,1,,return true;,13,3619,,,1
146028889916,RETURN,-1,,return globalData || !var;,5,3691,,,7
146028889917,RETURN,-1,,"return Token::Match(tok, ""alignof|_Alignof|_alignof|__alignof|__alignof__|decltype|offsetof|sizeof|typeid|typeof|__typeof__ ("");",5,3696,,,1
146028889918,RETURN,1,,return values;,9,3704,,,1
146028889919,RETURN,-1,,return values;,5,3724,,,7
146028889920,RETURN,-1,,return !e.value_known || switchValues.count(e.value);,13,3750,,,1
146028889921,RETURN,1,,return false;,9,3730,,,1
146028889922,RETURN,1,,return true;,9,3736,,,1
146028889923,RETURN,1,,return true;,9,3742,,,1
146028889924,RETURN,1,,return switchValues.count(0) && switchValues.count(1);,9,3745,,,1
146028889925,RETURN,-1,,"return std::all_of(enumList.cbegin(), enumList.cend(), [&](const Enumerator &e) {
            return !e.value_known || switchValues.count(e.value);
        });",9,3749,,,3
146028889926,RETURN,-1,,return false;,5,3754,,,16
146028889927,RETURN,1,,return true;,17,3772,,,1
146028889928,RETURN,1,,return true;,17,3777,,,1
146028889929,RETURN,1,,return true;,21,3783,,,1
146028889930,RETURN,-1,,return false;,5,3790,,,2
146028889931,RETURN,1,,return true;,9,3796,,,1
146028889932,RETURN,1,,return tok->isTemplateArg() || tok->hasKnownIntValue();,9,3799,,,1
146028889933,RETURN,-1,,"return unknownLeafValuesAreTemplateArgs(tok->astOperand1())
           && unknownLeafValuesAreTemplateArgs(tok->astOperand2());",5,3801,,,3
146028889934,RETURN,1,,return tok;,9,3809,,,1
146028889935,RETURN,1,,return tok;,9,3812,,,1
146028889936,RETURN,1,,return tok;,9,3816,,,1
146028889937,RETURN,-1,,return tok;,5,3823,,,8
146028889938,RETURN,1,,return tok;,9,3829,,,1
146028889939,RETURN,1,,return tok;,9,3833,,,1
146028889940,RETURN,1,,return tok;,9,3837,,,1
146028889941,RETURN,1,,return tok;,9,3840,,,1
146028889942,RETURN,-1,,return tok;,5,3849,,,10
146028889943,RETURN,1,,return tok;,9,3855,,,1
146028889944,RETURN,-1,,return skipUnreachableIfBranch(tok);,9,3858,,,1
146028889945,RETURN,-1,,return skipUnreachableElseBranch(tok);,9,3862,,,1
146028889946,RETURN,-1,,return tok;,5,3865,,,4
146028889947,RETURN,-1,,return !((diff / 2) < diff);,5,36,,,3
146028889948,RETURN,-1,,return i->name() == aname;,13,42,,,1
146028889949,RETURN,-1,,return i->name() > aname;,9,50,,,1
146028889950,RETURN,-1,,return true;,5,88,,,2
146028889951,RETURN,-1,,return _instances;,5,100,,,2
146028889952,RETURN,1,,"return id + std::string(""Cond"");",9,107,,,1
146028889953,RETURN,1,,"return std::string(""safe"") + (char)std::toupper(id[0]) + (id + 1);",9,109,,,1
146028889954,RETURN,-1,,return id;,5,110,,,3
146028889955,RETURN,-1,,return errorPath;,5,128,,,3
146028889956,RETURN,1,,return;,9,46,,,1
146028889957,RETURN,-1,,return ac.second.iteratorInfo.container > 0;,25,72,,,1
146028889958,RETURN,1,,return;,9,50,,,1
146028889959,RETURN,1,,return;,9,153,,,1
146028889960,RETURN,1,,return;,9,156,,,1
146028889961,RETURN,1,,return;,9,159,,,1
146028889962,RETURN,1,,return;,13,167,,,1
146028889963,RETURN,-1,,return;,13,173,,,1
146028889964,RETURN,-1,,return returnTok->scope() == assignTok->scope();,5,183,,,1
146028889965,RETURN,-1,,return (var && var->isArgument() && var->isPointer());,5,55,,,3
146028889966,RETURN,-1,,return (var && var->isArgument() && var->isArray() && !settings.library.isentrypoint(var->scope()->className));,5,61,,,3
146028889967,RETURN,-1,,return (var && var->isArray() && !var->isArgument());,5,67,,,3
146028889968,RETURN,-1,,return (var && var->isArgument() && var->isReference() && var->isPointer());,5,73,,,3
146028889969,RETURN,-1,,return (var && var->isArgument() && !var->isReference() && (var->isPointer() || (var->valueType() && var->valueType()->type >= ValueType::Type::CONTAINER) || var->type()));,5,79,,,3
146028889970,RETURN,1,,return false;,9,87,,,1
146028889971,RETURN,-1,,return false;,9,93,,,1
146028889972,RETURN,1,,return false;,13,101,,,1
146028889973,RETURN,-1,,return true;,5,103,,,6
146028889974,RETURN,1,,return false;,9,109,,,1
146028889975,RETURN,1,,return isAutoVarArray(tok->astOperand1()->astOperand1());,9,113,,,1
146028889976,RETURN,1,,return isAutoVarArray(tok->astOperand1()) || isAutoVarArray(tok->astOperand2());,9,117,,,1
146028889977,RETURN,1,,"return isAutoVarArray(tok->astOperand1()) &&
               tok->astOperand2() &&
               tok->astOperand2()->valueType() &&
               tok->astOperand2()->valueType()->isIntegral();",9,121,,,1
146028889978,RETURN,1,,return false;,9,128,,,1
146028889979,RETURN,1,,return true;,9,132,,,1
146028889980,RETURN,1,,return true;,17,139,,,1
146028889981,RETURN,-1,,return false;,5,143,,,10
146028889982,RETURN,1,,return false;,9,149,,,1
146028889983,RETURN,1,,return isLocalContainerBuffer(tok->astOperand1()) || isLocalContainerBuffer(tok->astOperand2());,9,153,,,1
146028889984,RETURN,1,,return false;,9,156,,,1
146028889985,RETURN,1,,return false;,9,162,,,1
146028889986,RETURN,-1,,return yield == Library::Container::Yield::BUFFER || yield == Library::Container::Yield::BUFFER_NT;,5,166,,,10
146028889987,RETURN,1,,return false;,9,172,,,1
146028889988,RETURN,1,,return isAddressOfLocalVariable(expr->astOperand1()) || isAddressOfLocalVariable(expr->astOperand2());,9,174,,,1
146028889989,RETURN,1,,return isAddressOfLocalVariable(expr->astOperand2() ? expr->astOperand2() : expr->astOperand1());,9,176,,,1
146028889990,RETURN,1,,return false;,17,182,,,1
146028889991,RETURN,-1,,return op && isAutoVar(op) && (!deref || !op->variable()->isPointer());,9,187,,,6
146028889992,RETURN,-1,,return false;,5,189,,,5
146028889993,RETURN,1,,return false;,9,195,,,1
146028889994,RETURN,1,,return true;,13,199,,,1
146028889995,RETURN,1,,return true;,13,202,,,1
146028889996,RETURN,1,,return true;,13,204,,,1
146028889997,RETURN,-1,,return false;,5,206,,,3
146028889998,RETURN,1,,return;,9,214,,,1
146028889999,RETURN,-1,,return isAddressOfLocalVariable(tok) || isAutoVarArray(tok) || isLocalContainerBuffer(tok);,5,241,,,1
146028890000,RETURN,-1,,"return f.name() == ""operator="";",17,256,,,1
146028890001,RETURN,1,,return false;,9,248,,,1
146028890002,RETURN,1,,return false;,13,251,,,1
146028890003,RETURN,1,,return true;,13,253,,,1
146028890004,RETURN,1,,"return std::any_of(vt->typeScope->functionList.begin(), vt->typeScope->functionList.end(), [](const Function& f) { // TODO: compare argument type
                return f.name() == ""operator="";
            });",13,255,,,1
146028890005,RETURN,-1,,return false;,9,258,,,4
146028890006,RETURN,-1,,return true;,5,261,,,5
146028890007,RETURN,-1,,return true;,13,336,,,2
146028890008,RETURN,1,,return false;,17,352,,,1
146028890009,RETURN,-1,,"return checkAutoVariableAssignment(expr, inconclusive, ifStart) || checkAutoVariableAssignment(expr, inconclusive, ifStart->link()->next());",13,357,,,3
146028890010,RETURN,-1,,return false;,5,362,,,3
146028890011,RETURN,1,,return true;,9,407,,,1
146028890012,RETURN,-1,,return !mDiagDanglingTemp.insert(tokvalue).second;,5,408,,,2
146028890013,RETURN,-1,,return argScope && argScope->isNestedIn(scope);,13,431,,,1
146028890014,RETURN,1,,return false;,9,416,,,1
146028890015,RETURN,1,,return false;,9,418,,,1
146028890016,RETURN,1,,return false;,9,421,,,1
146028890017,RETURN,1,,return true;,9,423,,,1
146028890018,RETURN,1,,return false;,9,425,,,1
146028890019,RETURN,1,,return false;,13,429,,,1
146028890020,RETURN,1,,return true;,13,433,,,1
146028890021,RETURN,-1,,return false;,5,435,,,9
146028890022,RETURN,1,,return false;,9,441,,,1
146028890023,RETURN,1,,return false;,9,443,,,1
146028890024,RETURN,1,,return false;,9,446,,,1
146028890025,RETURN,1,,return true;,9,448,,,1
146028890026,RETURN,-1,,return false;,5,449,,,7
146028890027,RETURN,1,,return 0;,9,455,,,1
146028890028,RETURN,1,,return tok->valueType()->pointer;,9,457,,,1
146028890029,RETURN,-1,,return n;,5,463,,,8
146028890030,RETURN,1,,return false;,9,469,,,1
146028890031,RETURN,1,,return false;,13,472,,,1
146028890032,RETURN,1,,return false;,17,480,,,1
146028890033,RETURN,-1,,return true;,5,483,,,3
146028890034,RETURN,1,,return false;,9,489,,,1
146028890035,RETURN,1,,return false;,9,491,,,1
146028890036,RETURN,1,,return false;,9,494,,,1
146028890037,RETURN,1,,return false;,9,496,,,1
146028890038,RETURN,-1,,"return !isTemporary(vartok, nullptr, false);",5,498,,,9
146028890039,RETURN,1,,return false;,9,504,,,1
146028890040,RETURN,1,,return false;,9,507,,,1
146028890041,RETURN,1,,return false;,9,510,,,1
146028890042,RETURN,1,,return false;,9,516,,,1
146028890043,RETURN,-1,,return exprDependsOnThis(parent);,5,517,,,12
146028890044,RETURN,1,,return nullptr;,9,523,,,1
146028890045,RETURN,1,,return getParentVar(tok->astOperand1());,9,525,,,1
146028890046,RETURN,-1,,return tok->variable();,5,526,,,3
146028890047,RETURN,1,,return false;,9,532,,,1
146028890048,RETURN,1,,return false;,9,534,,,1
146028890049,RETURN,1,,return false;,9,537,,,1
146028890050,RETURN,-1,,return !var->isLocal() || var->isStatic();,5,538,,,6
146028890051,RETURN,1,,return;,9,545,,,1
146028890052,RETURN,1,,return;,9,548,,,1
146028890053,RETURN,1,,return;,9,551,,,1
146028890054,RETURN,-1,,"return (var && Token::Match(var->typeEndToken(), ""bool|_Bool""));",5,47,,,1
146028890055,RETURN,1,,return;,9,54,,,1
146028890056,RETURN,1,,return false;,9,83,,,1
146028890057,RETURN,-1,,"return astIsBool(tok->astParent()) || Token::Match(tok->astParent()->previous(), ""if|while ("");",5,84,,,2
146028890058,RETURN,1,,return;,9,94,,,1
146028890059,RETURN,1,,return;,9,99,,,1
146028890060,RETURN,1,,return;,9,156,,,1
146028890061,RETURN,-1,,return true;,13,198,,,1
146028890062,RETURN,-1,,return false;,5,201,,,4
146028890063,RETURN,1,,return tok->previous();,13,221,,,1
146028890064,RETURN,-1,,return nullptr;,9,222,,,4
146028890065,RETURN,1,,return;,9,207,,,1
146028890066,RETURN,1,,return;,9,210,,,1
146028890067,RETURN,1,,return;,9,273,,,1
146028890068,RETURN,1,,return;,9,276,,,1
146028890069,RETURN,1,,return;,9,345,,,1
146028890070,RETURN,1,,return;,9,439,,,1
146028890071,RETURN,-1,,return;,9,443,,,3
146028890072,RETURN,1,,return;,9,446,,,1
146028890073,RETURN,1,,return;,9,468,,,1
146028890074,RETURN,1,,return;,9,470,,,1
146028890075,RETURN,1,,return;,9,491,,,1
146028890076,RETURN,-1,,return it == tokenValues.cend() ? nullptr : &*it;,5,75,,,5
146028890077,RETURN,1,,return 0;,9,81,,,1
146028890078,RETURN,1,,return 0;,9,83,,,1
146028890079,RETURN,-1,,return outputStringSize;,5,186,,,19
146028890080,RETURN,-1,,return ChildrenToVisit::none;,21,204,,,2
146028890081,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,17,206,,,2
146028890082,RETURN,1,,return false;,13,218,,,1
146028890083,RETURN,1,,return false;,13,226,,,1
146028890084,RETURN,-1,,return !dimensions.empty();,5,230,,,5
146028890085,RETURN,-1,,return v;,5,237,,,4
146028890086,RETURN,1,,return indexValues;,9,280,,,1
146028890087,RETURN,-1,,return {};,5,281,,,12
146028890088,RETURN,1,,return MathLib::toString(indexValues[0].intvalue);,9,370,,,1
146028890089,RETURN,-1,,return ret.str();,5,382,,,5
146028890090,RETURN,-1,,"return s + ""["" + MathLib::toString(dim.num) + ""]"";",9,391,,,1
146028890091,RETURN,-1,,return errmsg.str();,5,402,,,7
146028890092,RETURN,-1,,return;,9,412,,,3
146028890093,RETURN,1,,return;,13,419,,,1
146028890094,RETURN,-1,,return;,9,440,,,2
146028890095,RETURN,1,,return;,13,447,,,1
146028890096,RETURN,1,,return;,9,467,,,1
146028890097,RETURN,-1,,return;,9,533,,,3
146028890098,RETURN,-1,,return i1 * dim.num;,9,568,,,1
146028890099,RETURN,1,,return ValueFlow::Value(-1);,9,555,,,1
146028890100,RETURN,1,,return *value;,13,561,,,1
146028890101,RETURN,1,,return ValueFlow::Value(-1);,9,565,,,1
146028890102,RETURN,-1,,return v;,5,582,,,12
146028890103,RETURN,-1,,"return getMinFormatStringOutputLength(args, minsize.arg) < bufferSize;",13,594,,,1
146028890104,RETURN,1,,return Token::getStrLength(strtoken) < bufferSize;,17,598,,,1
146028890105,RETURN,-1,,return myMinsize <= bufferSize;,13,607,,,6
146028890106,RETURN,1,,return (arg->getKnownIntValue() * arg2->getKnownIntValue()) <= bufferSize;,13,616,,,1
146028890107,RETURN,-1,,return myMinsize <= bufferSize;,9,623,,,6
146028890108,RETURN,-1,,return true;,5,628,,,6
146028890109,RETURN,-1,,"return checkBufferSize(tok, minsize, args, bufferSize.intvalue, *mSettings, mTokenizer);",21,680,,,1
146028890110,RETURN,1,,return;,9,699,,,1
146028890111,RETURN,-1,,return value.isContainerSizeValue() && !value.isImpossible();,21,778,,,1
146028890112,RETURN,1,,return;,9,757,,,1
146028890113,RETURN,1,,return;,9,823,,,1
146028890114,RETURN,-1,,return xml;,13,913,,,4
146028890115,RETURN,1,,return false;,9,921,,,1
146028890116,RETURN,1,,return false;,9,923,,,1
146028890117,RETURN,1,,return false;,9,932,,,1
146028890118,RETURN,1,,return false;,9,934,,,1
146028890119,RETURN,-1,,return true;,5,936,,,9
146028890120,RETURN,-1,,"return isCtuUnsafeBufferUsage(settings, argtok, offset, 1);",5,941,,,1
146028890121,RETURN,-1,,"return isCtuUnsafeBufferUsage(settings, argtok, offset, 2);",5,946,,,1
146028890122,RETURN,-1,,return nullptr;,9,955,,,1
146028890123,RETURN,-1,,return fileInfo;,5,960,,,10
146028890124,RETURN,-1,,return nullptr;,9,980,,,2
146028890125,RETURN,-1,,return fileInfo;,5,983,,,9
146028890126,RETURN,1,,return false;,9,994,,,1
146028890127,RETURN,-1,,return foundErrors;,5,1009,,,10
146028890128,RETURN,1,,return false;,9,1026,,,1
146028890129,RETURN,-1,,return true;,5,1053,,,15
146028890130,RETURN,1,,return false;,29,1110,,,1
146028890131,RETURN,-1,,return vidx.path == v.path || vidx.path == 0;,25,1111,,,2
146028890132,RETURN,1,,return (vidx.intvalue == 0);,29,1115,,,1
146028890133,RETURN,-1,,return (vidx.intvalue != 0);,25,1116,,,2
146028890134,RETURN,1,,return false;,9,1152,,,1
146028890135,RETURN,1,,return true;,9,1154,,,1
146028890136,RETURN,-1,,"return tok->astOperand2() &&
               tok->astOperand2()->str() == "":"" &&
               isVLAIndex(tok->astOperand2()->astOperand1()) &&
               isVLAIndex(tok->astOperand2()->astOperand2());",9,1157,,,1
146028890137,RETURN,-1,,return isVLAIndex(tok->astOperand1()) || isVLAIndex(tok->astOperand2());,5,1162,,,4
146028890138,RETURN,-1,,"return ""constructor"";",9,64,,,3
146028890139,RETURN,-1,,"return ""copy constructor"";",9,66,,,6
146028890140,RETURN,-1,,"return ""move constructor"";",9,68,,,9
146028890141,RETURN,-1,,"return ""destructor"";",9,70,,,12
146028890142,RETURN,-1,,"return ""function"";",9,72,,,15
146028890143,RETURN,-1,,"return ""operator="";",9,74,,,18
146028890144,RETURN,-1,,"return ""lambda"";",9,76,,,21
146028890145,RETURN,-1,,"return """";",5,78,,,2
146028890146,RETURN,-1,,return true;,9,92,,,11
146028890147,RETURN,-1,,"return (!var.hasDefault() || isOpEqual) && // default init does not matter for operator=
           (var.isPointer() ||
            (var.type() && var.type()->needInitialization == Type::NeedInitialization::True) ||
            (var.valueType() && var.valueType()->type >= ValueType::Type::CHAR));",5,95,,,4
146028890148,RETURN,1,,return true;,13,107,,,1
146028890149,RETURN,1,,return true;,13,109,,,1
146028890150,RETURN,-1,,return false;,9,110,,,3
146028890151,RETURN,1,,return false;,9,104,,,1
146028890152,RETURN,-1,,"return std::any_of(type->derivedFrom.begin(), type->derivedFrom.end(), [&](const Type::BaseInfo& baseInfo) {
        if (!baseInfo.type)
            return true;
        if (isVclTypeInit(baseInfo.type))
            return true;
        return false;
    });",5,105,,,2
146028890153,RETURN,-1,,return var.type() && var.type()->classScope == scope;,17,144,,,1
146028890154,RETURN,1,,return false;,17,142,,,1
146028890155,RETURN,-1,,"return std::any_of(unionScope.varlist.cbegin(), unionScope.varlist.cend(), [&](const Variable& var) {
                return var.type() && var.type()->classScope == scope;
            });",13,143,,,2
146028890156,RETURN,-1,,return nestedScope->type == ScopeType::eUnion;,17,179,,,1
146028890157,RETURN,1,,return;,9,129,,,1
146028890158,RETURN,-1,,return func.isPure();,13,350,,,1
146028890159,RETURN,1,,return;,9,338,,,1
146028890160,RETURN,1,,return true;,13,390,,,1
146028890161,RETURN,-1,,return true;,17,397,,,2
146028890162,RETURN,-1,,return false;,5,401,,,2
146028890163,RETURN,1,,return;,9,407,,,1
146028890164,RETURN,-1,,return errmsg;,5,559,,,10
146028890165,RETURN,-1,,return constructor && !(publicAssign || publicCopy);,5,598,,,8
146028890166,RETURN,-1,,return constructor && !(publicAssign || publicCopy || publicMove);,5,627,,,10
146028890167,RETURN,-1,,return &var;,9,633,,,1
146028890168,RETURN,-1,,return Usage(var);,9,653,,,1
146028890169,RETURN,-1,,return ret;,5,655,,,6
146028890170,RETURN,-1,,return usage.var->declarationId() == varid;,9,661,,,1
146028890171,RETURN,-1,,return usage.var->name() == vartok->str();,9,675,,,1
146028890172,RETURN,-1,,return;,9,671,,,2
146028890173,RETURN,-1,,return usage.var->declarationId() == varid;,9,684,,,1
146028890174,RETURN,-1,,return func.tokenDef->str() == tok->str() && !func.isStatic() && !func.isConst();,17,731,,,1
146028890175,RETURN,1,,return true;,17,733,,,1
146028890176,RETURN,1,,return true;,17,736,,,1
146028890177,RETURN,1,,return true;,13,741,,,1
146028890178,RETURN,-1,,return false;,5,744,,,2
146028890179,RETURN,-1,,return var.declarationId() == ftok->next()->varId();,17,844,,,1
146028890180,RETURN,1,,return;,9,750,,,1
146028890181,RETURN,-1,,return;,25,774,,,2
146028890182,RETURN,-1,,return;,25,782,,,2
146028890183,RETURN,-1,,return;,13,885,,,2
146028890184,RETURN,-1,,return;,21,918,,,2
146028890185,RETURN,-1,,return;,21,953,,,2
146028890186,RETURN,-1,,return;,21,966,,,2
146028890187,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,17,1183,,,2
146028890188,RETURN,-1,,return ChildrenToVisit::done;,25,1195,,,2
146028890189,RETURN,-1,,return ChildrenToVisit::done;,25,1199,,,2
146028890190,RETURN,-1,,return ChildrenToVisit::done;,21,1203,,,2
146028890191,RETURN,-1,,return ChildrenToVisit::done;,21,1206,,,2
146028890192,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,17,1208,,,4
146028890193,RETURN,1,,return;,9,1141,,,1
146028890194,RETURN,1,,return true;,9,1233,,,1
146028890195,RETURN,1,,return true;,25,1240,,,1
146028890196,RETURN,1,,return true;,21,1247,,,1
146028890197,RETURN,1,,return true;,21,1249,,,1
146028890198,RETURN,1,,return true;,13,1254,,,1
146028890199,RETURN,1,,return true;,13,1260,,,1
146028890200,RETURN,1,,return true;,21,1270,,,1
146028890201,RETURN,-1,,return false;,5,1276,,,5
146028890202,RETURN,1,,return;,9,1282,,,1
146028890203,RETURN,1,,return scope->functionOf;,13,1348,,,1
146028890204,RETURN,-1,,return nullptr;,5,1351,,,2
146028890205,RETURN,1,,return;,9,1455,,,1
146028890206,RETURN,1,,return;,9,1575,,,1
146028890207,RETURN,1,,return;,33,1646,,,1
146028890208,RETURN,-1,,return;,9,1661,,,1
146028890209,RETURN,-1,,return;,9,1671,,,4
146028890210,RETURN,-1,,return;,9,1677,,,2
146028890211,RETURN,1,,return;,9,1719,,,1
146028890212,RETURN,-1,,"return hasAllocation(func, scope, ifStatementScopeStart, end);",5,1764,,,3
146028890213,RETURN,-1,,"return hasAllocation(func, scope, func->functionScope->bodyStart, func->functionScope->bodyEnd);",5,1769,,,1
146028890214,RETURN,1,,return true;,13,1780,,,1
146028890215,RETURN,1,,return true;,21,1796,,,1
146028890216,RETURN,-1,,return false;,5,1801,,,3
146028890217,RETURN,-1,,return tok->hasKnownIntValue() && tok->getKnownIntValue() == 1;,5,1806,,,1
146028890218,RETURN,-1,,return tok->hasKnownIntValue() && tok->getKnownIntValue() == 0;,5,1811,,,1
146028890219,RETURN,-1,,return Bool::BAILOUT;,13,1839,,,1
146028890220,RETURN,1,,return Bool::TRUE;,9,1843,,,1
146028890221,RETURN,-1,,return Bool::FALSE;,5,1844,,,5
146028890222,RETURN,-1,,return nullptr;,13,1853,,,3
146028890223,RETURN,-1,,return top->link()->next();,13,1855,,,6
146028890224,RETURN,-1,,return top->link()->linkAt(1);,13,1857,,,9
146028890225,RETURN,-1,,return nullptr;,5,1860,,,4
146028890226,RETURN,1,,return ChildrenToVisit::op1_and_op2;,17,1876,,,1
146028890227,RETURN,1,,return ChildrenToVisit::op1_and_op2;,17,1882,,,1
146028890228,RETURN,-1,,return ret ? ChildrenToVisit::done : ChildrenToVisit::op1_and_op2;,13,1888,,,5
146028890229,RETURN,1,,return false;,9,1866,,,1
146028890230,RETURN,1,,return ret;,13,1891,,,1
146028890231,RETURN,-1,,return false;,5,1894,,,5
146028890232,RETURN,-1,,return func.hasVirtualSpecifier();,25,1931,,,1
146028890233,RETURN,1,,return;,9,2068,,,1
146028890234,RETURN,1,,return false;,25,2125,,,1
146028890235,RETURN,1,,return false;,29,2137,,,1
146028890236,RETURN,1,,return true;,25,2141,,,1
146028890237,RETURN,-1,,return false;,17,2143,,,6
146028890238,RETURN,1,,return;,9,2098,,,1
146028890239,RETURN,1,,return;,9,2103,,,1
146028890240,RETURN,1,,return nullptr;,9,2213,,,1
146028890241,RETURN,-1,,"return Token::Match(tok, ""%name% ("") ? tok : nullptr;",5,2217,,,4
146028890242,RETURN,1,,return !getFuncTokFromThis(tok);,13,2229,,,1
146028890243,RETURN,1,,return true;,13,2231,,,1
146028890244,RETURN,1,,return false;,9,2248,,,1
146028890245,RETURN,-1,,return !var.isStatic();,17,2272,,,2
146028890246,RETURN,1,,return true;,21,2290,,,1
146028890247,RETURN,1,,return true;,13,2294,,,1
146028890248,RETURN,-1,,return false;,5,2297,,,7
146028890249,RETURN,1,,return true;,21,2317,,,1
146028890250,RETURN,1,,return !tok->function()->isStatic();,9,2321,,,1
146028890251,RETURN,1,,return true;,21,2333,,,1
146028890252,RETURN,-1,,return false;,5,2338,,,3
146028890253,RETURN,1,,return false;,9,2344,,,1
146028890254,RETURN,1,,return tok->function()->isConst();,9,2346,,,1
146028890255,RETURN,1,,return true;,21,2358,,,1
146028890256,RETURN,-1,,return false;,5,2363,,,4
146028890257,RETURN,-1,,return tok;,13,2380,,,2
146028890258,RETURN,-1,,return nullptr;,9,2382,,,5
146028890259,RETURN,1,,return false;,17,2389,,,1
146028890260,RETURN,1,,return false;,25,2407,,,1
146028890261,RETURN,1,,return false;,29,2412,,,1
146028890262,RETURN,-1,,return true;,13,2416,,,6
146028890263,RETURN,1,,return true;,17,2421,,,1
146028890264,RETURN,1,,return false;,21,2433,,,1
146028890265,RETURN,-1,,return true;,9,2436,,,8
146028890266,RETURN,-1,,"return fm.second->isConst() && fm.first == ""operator[]"" && !Function::returnsConst(fm.second);",37,2513,,,1
146028890267,RETURN,-1,,return f.isConst() && f.name() == op;,21,2533,,,1
146028890268,RETURN,1,,return false;,21,2530,,,1
146028890269,RETURN,1,,return false;,21,2536,,,1
146028890270,RETURN,-1,,return func && func->isConst();,17,2538,,,9
146028890271,RETURN,1,,return false;,21,2543,,,1
146028890272,RETURN,1,,return true;,25,2550,,,1
146028890273,RETURN,1,,return true;,25,2553,,,1
146028890274,RETURN,1,,return true;,21,2557,,,1
146028890275,RETURN,-1,,return false;,17,2558,,,6
146028890276,RETURN,1,,return false;,9,2371,,,1
146028890277,RETURN,1,,return false;,21,2450,,,1
146028890278,RETURN,1,,return false;,21,2452,,,1
146028890279,RETURN,1,,return false;,21,2454,,,1
146028890280,RETURN,1,,return false;,17,2461,,,1
146028890281,RETURN,1,,return false;,25,2474,,,1
146028890282,RETURN,1,,return false;,29,2477,,,1
146028890283,RETURN,1,,return false;,21,2483,,,1
146028890284,RETURN,1,,return false;,25,2488,,,1
146028890285,RETURN,1,,return false;,29,2504,,,1
146028890286,RETURN,1,,return false;,37,2515,,,1
146028890287,RETURN,1,,return false;,21,2564,,,1
146028890288,RETURN,1,,return false;,25,2580,,,1
146028890289,RETURN,1,,return false;,17,2586,,,1
146028890290,RETURN,1,,return false;,17,2590,,,1
146028890291,RETURN,1,,return false;,17,2592,,,1
146028890292,RETURN,1,,return false;,17,2596,,,1
146028890293,RETURN,1,,return false;,17,2604,,,1
146028890294,RETURN,1,,return false;,17,2608,,,1
146028890295,RETURN,1,,return false;,17,2616,,,1
146028890296,RETURN,-1,,return false;,13,2621,,,1
146028890297,RETURN,1,,return false;,17,2627,,,1
146028890298,RETURN,-1,,return false;,13,2629,,,1
146028890299,RETURN,-1,,return true;,5,2633,,,7
146028890300,RETURN,1,,return;,9,2691,,,1
146028890301,RETURN,1,,return;,9,2698,,,1
146028890302,RETURN,1,,return;,9,2828,,,1
146028890303,RETURN,1,,return found->second;,9,2860,,,1
146028890304,RETURN,1,,return virtualFunctionCalls;,9,2866,,,1
146028890305,RETURN,-1,,return virtualFunctionCalls;,5,2910,,,9
146028890306,RETURN,-1,,return;,9,2921,,,2
146028890307,RETURN,-1,,return;,9,2926,,,2
146028890308,RETURN,-1,,"return ErrorPathItem(tok, ""Calling "" + tok->str());",9,2945,,,1
146028890309,RETURN,1,,return;,9,2939,,,1
146028890310,RETURN,-1,,"return ErrorPathItem(tok, ""Calling "" + tok->str());",9,2980,,,1
146028890311,RETURN,1,,return;,9,2999,,,1
146028890312,RETURN,-1,,return results;,5,3047,,,3
146028890313,RETURN,-1,,return results;,5,3080,,,3
146028890314,RETURN,-1,,return !var.isStatic();,13,3143,,,1
146028890315,RETURN,1,,return;,9,3136,,,1
146028890316,RETURN,1,,return;,9,3196,,,1
146028890317,RETURN,1,,return;,9,3198,,,1
146028890318,RETURN,1,,return nullptr;,9,3261,,,1
146028890319,RETURN,1,,return ftok->previous();,9,3270,,,1
146028890320,RETURN,-1,,return nullptr;,5,3271,,,10
146028890321,RETURN,-1,,return isEqual;,5,3294,,,8
146028890322,RETURN,1,,return false;,21,3317,,,1
146028890323,RETURN,-1,,return f.name() == func.name();,17,3318,,,2
146028890324,RETURN,-1,,return v.nameToken() && v.nameToken()->str() == t->str();,21,3348,,,1
146028890325,RETURN,1,,return;,9,3300,,,1
146028890326,RETURN,1,,return nullptr;,9,3359,,,1
146028890327,RETURN,1,,return nullptr;,9,3363,,,1
146028890328,RETURN,1,,return nullptr;,9,3365,,,1
146028890329,RETURN,1,,return nullptr;,13,3372,,,1
146028890330,RETURN,-1,,return tok->variable();,5,3375,,,11
146028890331,RETURN,1,,return;,9,3381,,,1
146028890332,RETURN,1,,return;,9,3429,,,1
146028890333,RETURN,1,,return false;,9,3478,,,1
146028890334,RETURN,1,,return false;,9,3482,,,1
146028890335,RETURN,-1,,return true;,17,3497,,,2
146028890336,RETURN,1,,return true;,17,3500,,,1
146028890337,RETURN,-1,,return true;,13,3503,,,2
146028890338,RETURN,-1,,"return tok->str() == ""throw"";",13,3506,,,1
146028890339,RETURN,-1,,return false;,5,3511,,,9
146028890340,RETURN,1,,return;,9,3529,,,1
146028890341,RETURN,-1,,"return fileName == other.fileName &&
                       lineNumber == other.lineNumber &&
                       column == other.column;",17,3579,,,1
146028890342,RETURN,-1,,return ret;,13,3598,,,3
146028890343,RETURN,-1,,return f.hasBody();,13,3621,,,1
146028890344,RETURN,1,,return nullptr;,9,3606,,,1
146028890345,RETURN,1,,return nullptr;,9,3665,,,1
146028890346,RETURN,-1,,return fileInfo;,5,3669,,,8
146028890347,RETURN,-1,,return fileInfo;,5,3697,,,5
146028890348,RETURN,1,,return false;,9,3710,,,1
146028890349,RETURN,-1,,return foundErrors;,5,3749,,,11
146028890350,RETURN,1,,return;,9,3755,,,1
146028890351,RETURN,1,,return false;,9,63,,,1
146028890352,RETURN,-1,,return false;,9,76,,,2
146028890353,RETURN,-1,,return true;,5,78,,,8
146028890354,RETURN,1,,return true;,13,85,,,1
146028890355,RETURN,-1,,return false;,5,87,,,2
146028890356,RETURN,1,,return;,9,93,,,1
146028890357,RETURN,1,,return true;,9,151,,,1
146028890358,RETURN,1,,return true;,9,154,,,1
146028890359,RETURN,1,,return false;,9,156,,,1
146028890360,RETURN,1,,return true;,9,158,,,1
146028890361,RETURN,-1,,return false;,5,159,,,14
146028890362,RETURN,-1,,return true;,13,179,,,1
146028890363,RETURN,1,,return true;,13,187,,,1
146028890364,RETURN,1,,return true;,13,189,,,1
146028890365,RETURN,1,,return false;,13,191,,,1
146028890366,RETURN,1,,return false;,13,195,,,1
146028890367,RETURN,1,,return true;,13,197,,,1
146028890368,RETURN,-1,,return true;,21,213,,,1
146028890369,RETURN,-1,,return true;,21,226,,,1
146028890370,RETURN,1,,return true;,17,235,,,1
146028890371,RETURN,-1,,return false;,5,238,,,4
146028890372,RETURN,1,,return;,9,244,,,1
146028890373,RETURN,-1,,"return Token::Match(ret, ""bool|_Bool"");",13,292,,,4
146028890374,RETURN,-1,,return false;,5,295,,,5
146028890375,RETURN,1,,return true;,9,301,,,1
146028890376,RETURN,1,,return true;,9,303,,,1
146028890377,RETURN,1,,return true;,9,305,,,1
146028890378,RETURN,-1,,return false;,5,306,,,4
146028890379,RETURN,1,,return;,9,312,,,1
146028890380,RETURN,1,,return;,9,360,,,1
146028890381,RETURN,1,,return false;,9,439,,,1
146028890382,RETURN,1,,return true;,9,443,,,1
146028890383,RETURN,1,,return false;,13,450,,,1
146028890384,RETURN,1,,return false;,13,454,,,1
146028890385,RETURN,1,,return false;,13,457,,,1
146028890386,RETURN,1,,return false;,13,463,,,1
146028890387,RETURN,1,,return false;,13,466,,,1
146028890388,RETURN,1,,return ((value1 & value2) == value2);,13,471,,,1
146028890389,RETURN,-1,,return ((value1 & value2) > 0);,9,472,,,21
146028890390,RETURN,-1,,return false;,5,474,,,4
146028890391,RETURN,1,,return;,9,480,,,1
146028890392,RETURN,1,,return;,9,519,,,1
146028890393,RETURN,1,,return;,9,531,,,1
146028890394,RETURN,1,,return;,9,574,,,1
146028890395,RETURN,1,,return;,9,585,,,1
146028890396,RETURN,1,,return false;,9,605,,,1
146028890397,RETURN,1,,return true;,9,610,,,1
146028890398,RETURN,1,,return false;,9,612,,,1
146028890399,RETURN,1,,return false;,9,614,,,1
146028890400,RETURN,-1,,return true;,5,615,,,8
146028890401,RETURN,1,,return ChildrenToVisit::done;,21,659,,,1
146028890402,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,17,676,,,1
146028890403,RETURN,-1,,return ChildrenToVisit::none;,13,678,,,3
146028890404,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,13,692,,,2
146028890405,RETURN,1,,return ChildrenToVisit::none;,33,730,,,1
146028890406,RETURN,1,,return ChildrenToVisit::op1_and_op2;,37,733,,,1
146028890407,RETURN,-1,,return ChildrenToVisit::none;,29,743,,,4
146028890408,RETURN,1,,return ChildrenToVisit::op1_and_op2;,33,748,,,1
146028890409,RETURN,-1,,return ChildrenToVisit::done;,37,754,,,2
146028890410,RETURN,-1,,return ChildrenToVisit::none;,29,757,,,3
146028890411,RETURN,-1,,"return isVariableChanged(tok1, tok2, varid, nonlocal, *mSettings);",25,791,,,1
146028890412,RETURN,1,,return;,9,623,,,1
146028890413,RETURN,1,,"return ""if"";",9,839,,,1
146028890414,RETURN,1,,return top->astOperand1()->str();,9,842,,,1
146028890415,RETURN,-1,,return top->str();,5,843,,,5
146028890416,RETURN,1,,return;,9,849,,,1
146028890417,RETURN,1,,return;,9,864,,,1
146028890418,RETURN,1,,return;,9,879,,,1
146028890419,RETURN,-1,,return s;,5,922,,,2
146028890420,RETURN,-1,,return static_cast<int>(v > 0) - static_cast<int>(v < 0);,5,927,,,1
146028890421,RETURN,-1,,return res * (isAnd == equal ? 1 : -1);,5,977,,,10
146028890422,RETURN,-1,,"return (op == ""=="" && value1 == value2) ||
           (op == ""!="" && value1 != value2) ||
           (op == "">"" && value1 >  value2) ||
           (op == "">="" && value1 >= value2) ||
           (op == ""<"" && value1 <  value2) ||
           (op == ""<="" && value1 <= value2);",5,983,,,1
146028890423,RETURN,-1,,"return (op == "">"" && value1 >  value2) ||
           (op == "">="" && value1 >= value2) ||
           (op == ""<"" && value1 <  value2) ||
           (op == ""<="" && value1 <= value2);",5,993,,,1
146028890424,RETURN,1,,return min;,9,1004,,,1
146028890425,RETURN,-1,,return min + 1;,5,1005,,,4
146028890426,RETURN,-1,,return (value1 + value2) / 2.0;,5,1011,,,1
146028890427,RETURN,-1,,return std::numeric_limits<T>::lowest();,9,1026,,,3
146028890428,RETURN,-1,,return value1;,9,1028,,,6
146028890429,RETURN,-1,,"return getvalue3<T>(value1, value2);",9,1030,,,9
146028890430,RETURN,-1,,return value2;,9,1032,,,12
146028890431,RETURN,-1,,return std::numeric_limits<T>::max();,9,1034,,,15
146028890432,RETURN,-1,,return 0;,5,1036,,,2
146028890433,RETURN,1,,return false;,9,1048,,,1
146028890434,RETURN,1,,return false;,13,1058,,,1
146028890435,RETURN,1,,return false;,13,1067,,,1
146028890436,RETURN,-1,,return MathLib::isInt(value) || MathLib::isFloat(value) || (value[0] == '\\'');,5,1083,,,10
146028890437,RETURN,1,,"return std::string(not1 ? ""!("" : """") + expr1->expressionString() +
               "" "" +
               op +
               "" "" +
               value1 +
               (not1 ? "")"" : """");",9,1089,,,1
146028890438,RETURN,-1,,"return std::string(not1 ? ""!"" : """") + expr1->expressionString();",5,1096,,,2
146028890439,RETURN,1,,"return """";",9,1102,,,1
146028890440,RETURN,-1,,"return conditionString(not_, expr, op, value);",13,1109,,,1
146028890441,RETURN,1,,"return conditionString(tok->astOperand1()) + "" "" + tok->str() + "" "" + conditionString(tok->astOperand2());",13,1114,,,1
146028890442,RETURN,-1,,"return tok->str() + ""("" + conditionString(tok->astOperand1()) + "")"";",9,1115,,,2
146028890443,RETURN,-1,,return tok->expressionString();,5,1118,,,4
146028890444,RETURN,-1,,"return Token::simpleMatch(top->astOperand1(), ""if"") && top->astOperand1()->isConstexpr();",5,1123,,,3
146028890445,RETURN,1,,return;,9,1131,,,1
146028890446,RETURN,1,,return;,9,1341,,,1
146028890447,RETURN,1,,return;,9,1358,,,1
146028890448,RETURN,1,,return;,9,1368,,,1
146028890449,RETURN,1,,return;,9,1398,,,1
146028890450,RETURN,1,,return -1;,13,1412,,,1
146028890451,RETURN,-1,,return par;,5,1414,,,4
146028890452,RETURN,1,,return;,9,1424,,,1
146028890453,RETURN,-1,,"return Token::Match(tok, ""[|(|&|+|-|*|/|%|^|>>|<<"") && !Token::simpleMatch(tok, ""( )"");",17,1572,,,1
146028890454,RETURN,1,,return ChildrenToVisit::none;,21,1590,,,1
146028890455,RETURN,-1,,return ChildrenToVisit::done;,21,1593,,,2
146028890456,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,17,1595,,,3
146028890457,RETURN,1,,return ChildrenToVisit::none;,21,1612,,,1
146028890458,RETURN,1,,return ChildrenToVisit::none;,21,1614,,,1
146028890459,RETURN,-1,,return ChildrenToVisit::none;,21,1617,,,2
146028890460,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,21,1620,,,1
146028890461,RETURN,-1,,return ChildrenToVisit::none;,17,1622,,,5
146028890462,RETURN,1,,return;,9,1491,,,1
146028890463,RETURN,1,,return;,9,1662,,,1
146028890464,RETURN,1,,return;,9,1752,,,1
146028890465,RETURN,1,,return;,9,1799,,,1
146028890466,RETURN,1,,return;,9,1878,,,1
146028890467,RETURN,1,,return;,9,1925,,,1
146028890468,RETURN,1,,return;,9,1929,,,1
146028890469,RETURN,-1,,"return (settings.cppcheckCfgProductName.compare(0, 16, ""Cppcheck Premium"") == 0);",5,34,,,1
146028890470,RETURN,-1,,"return addonInfo.name == ""misra"";",9,45,,,1
146028890471,RETURN,1,,return 2012;,9,39,,,1
146028890472,RETURN,1,,return 2023;,9,41,,,1
146028890473,RETURN,1,,return 2012;,9,43,,,1
146028890474,RETURN,1,,return 2012;,9,48,,,1
146028890475,RETURN,-1,,return 0;,5,49,,,7
146028890476,RETURN,1,,return true;,9,54,,,1
146028890477,RETURN,1,,return true;,9,56,,,1
146028890478,RETURN,1,,return true;,9,58,,,1
146028890479,RETURN,1,,"return activeCheckers.count(""CheckCondition::alwaysTrueFalse"") != 0;",9,60,,,1
146028890480,RETURN,1,,"return activeCheckers.count(""CheckOther::checkUnusedLabel"") != 0;",9,62,,,1
146028890481,RETURN,1,,"return activeCheckers.count(""CheckUnusedVar::checkFunctionVariableUsage"") != 0;",9,64,,,1
146028890482,RETURN,1,,"return activeCheckers.count(""CheckOther::checkShadowVariables"") != 0;",9,66,,,1
146028890483,RETURN,1,,"return activeCheckers.count(""CheckOther::checkConstPointer"") != 0;",9,68,,,1
146028890484,RETURN,1,,return true;,9,70,,,1
146028890485,RETURN,1,,"return activeCheckers.count(""CheckOther::checkConstPointer"") != 0;",9,72,,,1
146028890486,RETURN,1,,"return activeCheckers.count(""CheckCondition::alwaysTrueFalse"") != 0;",9,74,,,1
146028890487,RETURN,1,,"return activeCheckers.count(""CheckBufferOverrun::argumentSize"") != 0;",9,76,,,1
146028890488,RETURN,1,,"return activeCheckers.count(""CheckBufferOverrun::pointerArithmetic"") != 0;",9,78,,,1
146028890489,RETURN,1,,"return activeCheckers.count(""CheckOther::checkComparePointers"") != 0;",9,80,,,1
146028890490,RETURN,1,,"return activeCheckers.count(""CheckOther::checkComparePointers"") != 0;",9,82,,,1
146028890491,RETURN,1,,return true;,9,84,,,1
146028890492,RETURN,1,,"return activeCheckers.count(""CheckOther::checkOverlappingWrite"") != 0;",9,86,,,1
146028890493,RETURN,1,,return true;,9,88,,,1
146028890494,RETURN,1,,"return activeCheckers.count(""CheckFunctions::invalidFunctionUsage"") != 0;",9,90,,,1
146028890495,RETURN,1,,"return activeCheckers.count(""CheckBufferOverrun::bufferOverflow"") != 0;",9,92,,,1
146028890496,RETURN,1,,"return activeCheckers.count(""CheckBufferOverrun::bufferOverflow"") != 0;",9,94,,,1
146028890497,RETURN,1,,return true;,9,96,,,1
146028890498,RETURN,1,,"return activeCheckers.count(""CheckAutoVariables::autoVariables"") != 0;",9,98,,,1
146028890499,RETURN,1,,"return activeCheckers.count(""CheckIO::checkFileUsage"") != 0;",9,100,,,1
146028890500,RETURN,1,,"return activeCheckers.count(""CheckIO::checkFileUsage"") != 0;",9,102,,,1
146028890501,RETURN,1,,"return activeCheckers.count(""CheckIO::checkFileUsage"") != 0;",9,104,,,1
146028890502,RETURN,-1,,return false;,5,106,,,27
146028890503,RETURN,-1,,return mActiveCheckersCount;,5,118,,,2
146028890504,RETURN,-1,,return mAllCheckersCount;,5,126,,,2
146028890505,RETURN,-1,,return;,13,204,,,2
146028890506,RETURN,-1,,return fout.str();,5,291,,,25
146028890507,RETURN,-1,,return ret;,5,309,,,8
146028890508,RETURN,1,,return;,9,51,,,1
146028890509,RETURN,1,,return;,9,99,,,1
146028890510,RETURN,1,,return;,9,174,,,1
146028890511,RETURN,1,,return;,9,218,,,1
146028890512,RETURN,1,,return nullptr;,9,248,,,1
146028890513,RETURN,1,,return nullptr;,9,251,,,1
146028890514,RETURN,1,,return tok;,13,259,,,1
146028890515,RETURN,1,,return tok;,17,264,,,1
146028890516,RETURN,1,,return tok;,17,267,,,1
146028890517,RETURN,1,,return tok;,17,269,,,1
146028890518,RETURN,-1,,return nullptr;,5,273,,,4
146028890519,RETURN,-1,,"return functionThrowsRecursive(function, recursive);",5,280,,,2
146028890520,RETURN,1,,return;,9,334,,,1
146028890521,RETURN,1,,return;,9,416,,,1
146028890522,RETURN,1,,return;,9,253,,,1
146028890523,RETURN,1,,return false;,9,341,,,1
146028890524,RETURN,1,,return true;,13,344,,,1
146028890525,RETURN,1,,return false;,13,346,,,1
146028890526,RETURN,-1,,return false;,5,348,,,3
146028890527,RETURN,1,,return lastStatement ? lastStatement : tok->next();,13,358,,,1
146028890528,RETURN,1,,return nullptr;,21,362,,,1
146028890529,RETURN,1,,return nullptr;,21,364,,,1
146028890530,RETURN,1,,return switchToken;,29,373,,,1
146028890531,RETURN,1,,return tok->link();,21,385,,,1
146028890532,RETURN,1,,"return checkMissingReturnScope(tok, library);",21,389,,,1
146028890533,RETURN,-1,,return tok;,17,390,,,4
146028890534,RETURN,1,,return errorToken;,21,394,,,1
146028890535,RETURN,1,,"return checkMissingReturnScope(tok->tokAt(-2), library);",21,397,,,1
146028890536,RETURN,-1,,return tok;,17,398,,,6
146028890537,RETURN,-1,,return nullptr;,13,401,,,3
146028890538,RETURN,1,,return nullptr;,13,404,,,1
146028890539,RETURN,1,,return nullptr;,13,406,,,1
146028890540,RETURN,-1,,return nullptr;,13,408,,,1
146028890541,RETURN,-1,,return nullptr;,13,411,,,1
146028890542,RETURN,1,,return tok;,13,414,,,1
146028890543,RETURN,-1,,return nullptr;,5,418,,,4
146028890544,RETURN,1,,return;,9,435,,,1
146028890545,RETURN,1,,return;,9,519,,,1
146028890546,RETURN,1,,return;,9,560,,,1
146028890547,RETURN,1,,return;,9,618,,,1
146028890548,RETURN,1,,return;,9,690,,,1
146028890549,RETURN,1,,return;,9,693,,,1
146028890550,RETURN,1,,return;,9,729,,,1
146028890551,RETURN,1,,return;,9,69,,,1
146028890552,RETURN,1,,return OpenMode::RW_MODE;,9,103,,,1
146028890553,RETURN,1,,return OpenMode::WRITE_MODE;,9,105,,,1
146028890554,RETURN,1,,return OpenMode::READ_MODE;,9,107,,,1
146028890555,RETURN,-1,,return OpenMode::UNKNOWN_OM;,5,108,,,4
146028890556,RETURN,1,,return;,9,414,,,1
146028890557,RETURN,-1,,return true;,9,501,,,3
146028890558,RETURN,-1,,return true;,9,519,,,3
146028890559,RETURN,-1,,return false;,5,521,,,6
146028890560,RETURN,-1,,return (iToTest == iTypename) || (iToTest == iOptionalPrefix + iTypename);,5,527,,,1
146028890561,RETURN,1,,return;,13,1325,,,1
146028890562,RETURN,1,,return;,9,1350,,,1
146028890563,RETURN,-1,,return;,13,1404,,,9
146028890564,RETURN,-1,,return;,9,1411,,,2
146028890565,RETURN,-1,,return;,13,1422,,,3
146028890566,RETURN,1,,return;,13,1431,,,1
146028890567,RETURN,-1,,return;,25,1455,,,4
146028890568,RETURN,-1,,return;,21,1474,,,4
146028890569,RETURN,-1,,return;,17,1515,,,4
146028890570,RETURN,-1,,return;,17,1529,,,4
146028890571,RETURN,1,,return;,17,1531,,,1
146028890572,RETURN,-1,,return;,13,1554,,,4
146028890573,RETURN,1,,return false;,9,1577,,,1
146028890574,RETURN,-1,,return true;,9,1581,,,3
146028890575,RETURN,-1,,return true;,9,1590,,,4
146028890576,RETURN,-1,,return true;,17,1599,,,3
146028890577,RETURN,-1,,return true;,17,1608,,,4
146028890578,RETURN,-1,,return true;,25,1618,,,2
146028890579,RETURN,-1,,return false;,5,1625,,,5
146028890580,RETURN,1,,return false;,9,1639,,,1
146028890581,RETURN,-1,,return true;,13,1644,,,2
146028890582,RETURN,-1,,return true;,13,1648,,,2
146028890583,RETURN,-1,,return true;,21,1655,,,2
146028890584,RETURN,-1,,return true;,21,1659,,,2
146028890585,RETURN,-1,,return false;,5,1665,,,3
146028890586,RETURN,1,,return true;,9,1671,,,1
146028890587,RETURN,1,,return variableInfo->isArrayOrPointer();,9,1673,,,1
146028890588,RETURN,-1,,"return tok && tok->strAt(1) == ""*"";",5,1678,,,6
146028890589,RETURN,1,,return (true);,9,1684,,,1
146028890590,RETURN,-1,,"return ((variableInfo->isStlStringType() || (varTypeTok->strAt(1) == ""<"" && varTypeTok->linkAt(1) && varTypeTok->linkAt(1)->strAt(1) != ""::"")) && !variableInfo->isArrayOrPointer());",5,1690,,,5
146028890591,RETURN,1,,return (typeToken->isStandardType() || typeToken->next()->isStandardType() || isComplexType());,9,1696,,,1
146028890592,RETURN,1,,"return (typeToken->isStandardType() || functionInfo->retType || Token::Match(typeToken, ""std :: string|wstring""));",9,1698,,,1
146028890593,RETURN,-1,,"return typeToken->isStandardType() || Token::Match(typeToken, ""std :: string|wstring"");",5,1700,,,3
146028890594,RETURN,-1,,return typeToken && typeToken->isStandardType() && settings.library.podtype(typeToken->str());,5,1705,,,1
146028890595,RETURN,1,,return;,9,1715,,,1
146028890596,RETURN,1,,return;,9,1734,,,1
146028890597,RETURN,1,,return;,9,1749,,,1
146028890598,RETURN,1,,return;,9,1765,,,1
146028890599,RETURN,1,,return;,9,1810,,,1
146028890600,RETURN,1,,return;,9,1829,,,1
146028890601,RETURN,1,,return;,9,1840,,,1
146028890602,RETURN,1,,return;,9,1851,,,1
146028890603,RETURN,1,,return;,9,1901,,,1
146028890604,RETURN,1,,return;,9,1915,,,1
146028890605,RETURN,1,,return;,9,1928,,,1
146028890606,RETURN,-1,,return (argInfo && argInfo->typeToken && !argInfo->typeToken->originalName().empty()) ? Severity::portability : Severity::warning;,5,1941,,,1
146028890607,RETURN,1,,return;,9,1997,,,1
146028890608,RETURN,1,,return;,13,2016,,,1
146028890609,RETURN,-1,,return !v.valueType() || (!v.valueType()->isPrimitive() && !v.valueType()->container);,9,69,,,1
146028890610,RETURN,-1,,return isAutoDeallocType(bi.type);,9,73,,,1
146028890611,RETURN,1,,return true;,9,64,,,1
146028890612,RETURN,1,,return true;,9,66,,,1
146028890613,RETURN,1,,return true;,9,71,,,1
146028890614,RETURN,1,,return false;,9,75,,,1
146028890615,RETURN,-1,,return true;,5,76,,,7
146028890616,RETURN,1,,return false;,9,87,,,1
146028890617,RETURN,-1,,return isAutoDeallocType(var->type());,5,92,,,2
146028890618,RETURN,-1,,"return astIsVariableComparison(tok, op.first, op.second, vartok);",9,100,,,1
146028890619,RETURN,-1,,"return std::any_of(ops.cbegin(), ops.cend(), [&](const std::pair<std::string, std::string>& op) {
        return astIsVariableComparison(tok, op.first, op.second, vartok);
    });",5,99,,,1
146028890620,RETURN,1,,return;,9,170,,,1
146028890621,RETURN,1,,return false;,9,194,,,1
146028890622,RETURN,1,,return true;,9,196,,,1
146028890623,RETURN,1,,return false;,9,198,,,1
146028890624,RETURN,-1,,"return isVarUsedInTree(tok->astOperand1(), varid) || isVarUsedInTree(tok->astOperand2(), varid);",5,199,,,4
146028890625,RETURN,1,,return true;,13,208,,,1
146028890626,RETURN,1,,return false;,13,210,,,1
146028890627,RETURN,-1,,return false;,5,212,,,2
146028890628,RETURN,1,,return true;,9,220,,,1
146028890629,RETURN,1,,return false;,9,222,,,1
146028890630,RETURN,1,,return false;,9,226,,,1
146028890631,RETURN,1,,return false;,13,232,,,1
146028890632,RETURN,1,,return false;,13,234,,,1
146028890633,RETURN,-1,,return true;,5,236,,,7
146028890634,RETURN,-1,,return nameToken;,13,259,,,1
146028890635,RETURN,-1,,return nullptr;,5,262,,,2
146028890636,RETURN,1,,return nullptr;,9,268,,,1
146028890637,RETURN,1,,return nullptr;,9,272,,,1
146028890638,RETURN,1,,return ftok;,13,275,,,1
146028890639,RETURN,-1,,return nullptr;,5,277,,,8
146028890640,RETURN,1,,return ftok->next()->astParent()->astOperand1();,13,284,,,1
146028890641,RETURN,-1,,return nullptr;,5,286,,,2
146028890642,RETURN,-1,,return dir == Direction::DIR_OUT;,21,374,,,1
146028890643,RETURN,-1,,"return std::any_of(pair.second.direction.cbegin(), pair.second.direction.cend(), [](const Direction dir) {
                    return dir == Direction::DIR_OUT;
                });",17,373,,,1
146028890644,RETURN,-1,,return dir == Direction::DIR_IN;,25,383,,,1
146028890645,RETURN,1,,return top;,21,409,,,1
146028890646,RETURN,-1,,return nullptr;,13,411,,,2
146028890647,RETURN,1,,return false;,33,599,,,1
146028890648,RETURN,-1,,return ret && vartok && ret->varId() && ret->varId() == vartok->varId();,29,601,,,4
146028890649,RETURN,1,,return ChildrenToVisit::none;,25,566,,,1
146028890650,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,25,569,,,1
146028890651,RETURN,-1,,return ChildrenToVisit::op2;,25,572,,,1
146028890652,RETURN,-1,,return ChildrenToVisit::none;,25,586,,,4
146028890653,RETURN,-1,,return ChildrenToVisit::none;,21,609,,,8
146028890654,RETURN,-1,,return false;,25,620,,,2
146028890655,RETURN,-1,,return false;,13,682,,,2
146028890656,RETURN,-1,,return false;,13,767,,,2
146028890657,RETURN,-1,,return true;,5,859,,,14
146028890658,RETURN,1,,return openingPar;,13,924,,,1
146028890659,RETURN,-1,,return isCPPCast(tok->astParent()) ? openingPar : openingPar->link();,9,925,,,10
146028890660,RETURN,-1,,return nullptr;,5,928,,,5
146028890661,RETURN,-1,,return;,13,962,,,2
146028890662,RETURN,1,,return;,9,995,,,1
146028890663,RETURN,1,,return;,9,997,,,1
146028890664,RETURN,-1,,return;,9,1002,,,1
146028890665,RETURN,1,,return No;,9,67,,,1
146028890666,RETURN,1,,return No;,9,73,,,1
146028890667,RETURN,1,,return reallocType;,13,79,,,1
146028890668,RETURN,1,,return No;,17,83,,,1
146028890669,RETURN,1,,return NewArray;,17,85,,,1
146028890670,RETURN,1,,return No;,17,96,,,1
146028890671,RETURN,-1,,return New;,13,97,,,10
146028890672,RETURN,1,,return No;,21,106,,,1
146028890673,RETURN,1,,return No;,21,110,,,1
146028890674,RETURN,-1,,return Fd;,17,111,,,5
146028890675,RETURN,1,,return Pipe;,17,115,,,1
146028890676,RETURN,1,,return Malloc;,17,122,,,1
146028890677,RETURN,1,,return File;,17,124,,,1
146028890678,RETURN,-1,,return Library::ismemory(alloctype) ? OtherMem : OtherRes;,13,125,,,3
146028890679,RETURN,1,,return No;,9,135,,,1
146028890680,RETURN,1,,return No;,9,139,,,1
146028890681,RETURN,-1,,"return functionReturnType(func, callstack);",5,146,,,15
146028890682,RETURN,1,,return No;,9,159,,,1
146028890683,RETURN,1,,return No;,9,162,,,1
146028890684,RETURN,1,,return No;,9,166,,,1
146028890685,RETURN,1,,return No;,9,169,,,1
146028890686,RETURN,1,,return No;,9,176,,,1
146028890687,RETURN,1,,return Malloc;,13,181,,,1
146028890688,RETURN,1,,return File;,13,183,,,1
146028890689,RETURN,-1,,return Library::ismemory(realloctype) ? OtherMem : OtherRes;,9,184,,,3
146028890690,RETURN,-1,,return No;,5,186,,,18
146028890691,RETURN,1,,return NewArray;,17,199,,,1
146028890692,RETURN,-1,,return New;,13,200,,,2
146028890693,RETURN,1,,return File;,13,209,,,1
146028890694,RETURN,1,,return Malloc;,21,219,,,1
146028890695,RETURN,1,,return Fd;,25,223,,,1
146028890696,RETURN,1,,return Pipe;,25,225,,,1
146028890697,RETURN,1,,return Malloc;,25,232,,,1
146028890698,RETURN,1,,return File;,25,234,,,1
146028890699,RETURN,-1,,return Library::ismemory(dealloctype) ? OtherMem : OtherRes;,21,235,,,3
146028890700,RETURN,-1,,return No;,5,242,,,4
146028890701,RETURN,1,,return true;,17,252,,,1
146028890702,RETURN,-1,,return false;,5,255,,,2
146028890703,RETURN,1,,return true;,13,263,,,1
146028890704,RETURN,-1,,return false;,5,265,,,2
146028890705,RETURN,1,,return No;,9,335,,,1
146028890706,RETURN,1,,return allocType;,17,347,,,1
146028890707,RETURN,1,,return No;,17,350,,,1
146028890708,RETURN,1,,return No;,9,362,,,1
146028890709,RETURN,1,,return No;,9,368,,,1
146028890710,RETURN,-1,,return No;,13,378,,,1
146028890711,RETURN,-1,,return No;,13,381,,,1
146028890712,RETURN,-1,,return No;,13,384,,,1
146028890713,RETURN,-1,,return No;,13,387,,,1
146028890714,RETURN,1,,return No;,13,390,,,1
146028890715,RETURN,-1,,return allocType;,5,393,,,12
146028890716,RETURN,1,,return false;,9,400,,,1
146028890717,RETURN,1,,"return notvar(tok->astOperand1(),varid) || notvar(tok->astOperand2(),varid);",9,402,,,1
146028890718,RETURN,1,,"return notvar(tok->astOperand2(), varid);",9,404,,,1
146028890719,RETURN,-1,,return vartok && (vartok->varId() == varid);,5,406,,,6
146028890720,RETURN,1,,return false;,9,412,,,1
146028890721,RETURN,1,,return false;,9,417,,,1
146028890722,RETURN,-1,,return (vartok && vartok->varId() == varid);,5,420,,,8
146028890723,RETURN,1,,return;,25,587,,,1
146028890724,RETURN,1,,return;,25,593,,,1
146028890725,RETURN,-1,,return;,21,641,,,1
146028890726,RETURN,1,,return;,9,657,,,1
146028890727,RETURN,1,,return;,9,673,,,1
146028890728,RETURN,1,,return;,9,705,,,1
146028890729,RETURN,1,,return;,9,722,,,1
146028890730,RETURN,1,,return false;,9,741,,,1
146028890731,RETURN,1,,return false;,13,746,,,1
146028890732,RETURN,-1,,return alloc;,5,750,,,7
146028890733,RETURN,1,,return false;,13,773,,,1
146028890734,RETURN,-1,,return deallocated;,9,792,,,7
146028890735,RETURN,1,,return {};,13,798,,,1
146028890736,RETURN,1,,return {};,17,802,,,1
146028890737,RETURN,1,,return {};,13,806,,,1
146028890738,RETURN,1,,return {};,13,811,,,1
146028890739,RETURN,-1,,"return { dot->astOperand2(), top->next() };",9,812,,,10
146028890740,RETURN,1,,return;,9,756,,,1
146028890741,RETURN,1,,return;,13,761,,,1
146028890742,RETURN,-1,,return;,9,764,,,1
146028890743,RETURN,1,,return;,9,1140,,,1
146028890744,RETURN,1,,return;,9,1143,,,1
146028890745,RETURN,-1,,return !func || (func->argCount() >= arg && func->getArgumentVar(arg - 1) && func->getArgumentVar(arg - 1)->isPointer());,5,58,,,1
146028890746,RETURN,1,,return;,9,71,,,1
146028890747,RETURN,1,,return;,13,89,,,1
146028890748,RETURN,1,,return;,13,96,,,1
146028890749,RETURN,1,,return;,25,118,,,1
146028890750,RETURN,-1,,"return isPointerDeRef(tok, unknown, *mSettings);",5,152,,,1
146028890751,RETURN,-1,,return true;,17,171,,,1
146028890752,RETURN,1,,return false;,9,177,,,1
146028890753,RETURN,1,,return false;,9,181,,,1
146028890754,RETURN,1,,"return isPointerDeRef(parent, unknown, settings);",9,184,,,1
146028890755,RETURN,1,,return false;,9,188,,,1
146028890756,RETURN,1,,return false;,13,195,,,1
146028890757,RETURN,1,,return true;,13,197,,,1
146028890758,RETURN,1,,return true;,9,202,,,1
146028890759,RETURN,1,,return false;,9,209,,,1
146028890760,RETURN,1,,return true;,9,213,,,1
146028890761,RETURN,1,,return true;,9,218,,,1
146028890762,RETURN,1,,return true;,9,222,,,1
146028890763,RETURN,1,,return true;,9,226,,,1
146028890764,RETURN,1,,return true;,13,230,,,1
146028890765,RETURN,1,,return true;,17,243,,,1
146028890766,RETURN,1,,return true;,21,247,,,1
146028890767,RETURN,1,,return true;,9,260,,,1
146028890768,RETURN,-1,,return false;,5,263,,,32
146028890769,RETURN,1,,return false;,9,270,,,1
146028890770,RETURN,1,,return false;,9,272,,,1
146028890771,RETURN,1,,return true;,9,274,,,1
146028890772,RETURN,1,,return true;,9,276,,,1
146028890773,RETURN,1,,return isNullablePointer(tok->astOperand2());,9,278,,,1
146028890774,RETURN,-1,,return (var->isPointer() || var->isSmartPointer());,9,280,,,1
146028890775,RETURN,-1,,return false;,5,282,,,7
146028890776,RETURN,1,,return false;,17,293,,,1
146028890777,RETURN,1,,return false;,17,296,,,1
146028890778,RETURN,1,,return false;,17,300,,,1
146028890779,RETURN,1,,return false;,17,305,,,1
146028890780,RETURN,1,,return false;,17,308,,,1
146028890781,RETURN,-1,,return true;,13,310,,,8
146028890782,RETURN,-1,,return;,9,455,,,6
146028890783,RETURN,-1,,return;,9,460,,,2
146028890784,RETURN,1,,return;,9,464,,,1
146028890785,RETURN,1,,"return ""subtraction"";",9,537,,,1
146028890786,RETURN,1,,"return ""addition"";",9,539,,,1
146028890787,RETURN,-1,,"return ""arithmetic"";",5,540,,,3
146028890788,RETURN,-1,,"return CheckNullPointer::isPointerDeRef(vartok, unknown, settings);",5,597,,,4
146028890789,RETURN,-1,,return CTU::toString(unsafeUsage);,13,618,,,1
146028890790,RETURN,1,,return nullptr;,9,627,,,1
146028890791,RETURN,-1,,return fileInfo;,5,631,,,7
146028890792,RETURN,1,,return nullptr;,9,638,,,1
146028890793,RETURN,-1,,return fileInfo;,5,642,,,7
146028890794,RETURN,1,,return false;,9,654,,,1
146028890795,RETURN,-1,,return foundErrors;,5,706,,,11
146028890796,RETURN,1,,return;,9,89,,,1
146028890797,RETURN,1,,return;,9,159,,,1
146028890798,RETURN,1,,return;,9,230,,,1
146028890799,RETURN,1,,return;,9,266,,,1
146028890800,RETURN,1,,return;,9,301,,,1
146028890801,RETURN,1,,return;,9,304,,,1
146028890802,RETURN,1,,return;,9,373,,,1
146028890803,RETURN,1,,return;,9,434,,,1
146028890804,RETURN,1,,return ChildrenToVisit::none;,29,517,,,1
146028890805,RETURN,1,,return ChildrenToVisit::none;,29,519,,,1
146028890806,RETURN,1,,return ChildrenToVisit::none;,29,521,,,1
146028890807,RETURN,1,,return ChildrenToVisit::op2;,29,523,,,1
146028890808,RETURN,-1,,return ChildrenToVisit::done;,25,525,,,6
146028890809,RETURN,-1,,return f.name() == op;,29,551,,,1
146028890810,RETURN,1,,return;,9,489,,,1
146028890811,RETURN,-1,,"return Token::Match(tok, ""%name% ("") || Token::Match(tok, ""break|continue|return|exit|goto|throw"");",5,681,,,1
146028890812,RETURN,1,,return;,9,687,,,1
146028890813,RETURN,1,,return;,9,816,,,1
146028890814,RETURN,1,,return true;,13,858,,,1
146028890815,RETURN,-1,,return false;,5,865,,,2
146028890816,RETURN,1,,return false;,9,871,,,1
146028890817,RETURN,1,,return false;,9,873,,,1
146028890818,RETURN,1,,return false;,17,877,,,1
146028890819,RETURN,1,,"return tok3->str() == ""case"";",25,882,,,1
146028890820,RETURN,-1,,return false;,17,884,,,3
146028890821,RETURN,-1,,return false;,5,888,,,4
146028890822,RETURN,1,,return;,9,904,,,1
146028890823,RETURN,1,,return false;,9,1047,,,1
146028890824,RETURN,1,,return true;,9,1049,,,1
146028890825,RETURN,1,,"return isSimpleExpr(tok->astOperand1(), var, settings) && (!tok->astOperand2() || isSimpleExpr(tok->astOperand2(), var, settings));",13,1053,,,1
146028890826,RETURN,-1,,"return (needsCheck && !findExpressionChanged(tok, tok->astParent(), var->scope()->bodyEnd, settings));",5,1067,,,6
146028890827,RETURN,1,,return;,9,1076,,,1
146028890828,RETURN,1,,return;,9,1079,,,1
146028890829,RETURN,1,,return;,9,1086,,,1
146028890830,RETURN,1,,return false;,9,1191,,,1
146028890831,RETURN,1,,return false;,9,1195,,,1
146028890832,RETURN,1,,return false;,9,1199,,,1
146028890833,RETURN,-1,,return !other->isConst(otherPtr);,9,1206,,,1
146028890834,RETURN,-1,,return otherPtr > originalPtr;,5,1210,,,9
146028890835,RETURN,-1,,return tok2->varId() == var->declarationId();,17,1258,,,1
146028890836,RETURN,-1,,"return &other == argvar || !mayDependOn(other.valueType(), argvar->valueType());",33,1307,,,1
146028890837,RETURN,-1,,return false;,21,1232,,,1
146028890838,RETURN,-1,,return false;,17,1235,,,1
146028890839,RETURN,1,,return false;,13,1243,,,1
146028890840,RETURN,1,,return false;,13,1267,,,1
146028890841,RETURN,1,,return false;,13,1270,,,1
146028890842,RETURN,1,,return false;,17,1274,,,1
146028890843,RETURN,1,,return false;,13,1279,,,1
146028890844,RETURN,1,,return false;,13,1282,,,1
146028890845,RETURN,1,,return false;,21,1288,,,1
146028890846,RETURN,1,,return false;,21,1291,,,1
146028890847,RETURN,1,,return false;,29,1298,,,1
146028890848,RETURN,1,,return false;,29,1301,,,1
146028890849,RETURN,1,,return false;,33,1309,,,1
146028890850,RETURN,1,,return false;,17,1316,,,1
146028890851,RETURN,-1,,return true;,5,1320,,,16
146028890852,RETURN,1,,return;,9,1354,,,1
146028890853,RETURN,1,,return true;,9,1398,,,1
146028890854,RETURN,1,,return v->intvalue / 8 > maxByValueSize;,17,1403,,,1
146028890855,RETURN,-1,,return false;,9,1405,,,2
146028890856,RETURN,-1,,return arraySize > maxByValueSize;,5,1410,,,13
146028890857,RETURN,1,,return;,9,1416,,,1
146028890858,RETURN,1,,return false;,9,1502,,,1
146028890859,RETURN,1,,return false;,9,1504,,,1
146028890860,RETURN,1,,return true;,21,1515,,,1
146028890861,RETURN,-1,,return true;,9,1522,,,3
146028890862,RETURN,-1,,return false;,5,1524,,,4
146028890863,RETURN,1,,return true;,21,1588,,,1
146028890864,RETURN,-1,,"return ValueFlow::hasLifetimeToken(getParentLifetime(retTok), var->nameToken(), *mSettings);",17,1595,,,5
146028890865,RETURN,1,,return;,9,1530,,,1
146028890866,RETURN,1,,return p->scope()->bodyStart;,9,1652,,,1
146028890867,RETURN,-1,,return start;,5,1656,,,5
146028890868,RETURN,1,,return false;,13,1666,,,1
146028890869,RETURN,1,,return false;,13,1669,,,1
146028890870,RETURN,1,,return false;,13,1671,,,1
146028890871,RETURN,-1,,return true;,5,1674,,,6
146028890872,RETURN,1,,return fileA < fileB;,17,1683,,,1
146028890873,RETURN,1,,return lineA < lineB;,17,1687,,,1
146028890874,RETURN,-1,,return columnA < columnB;,13,1690,,,15
146028890875,RETURN,1,,return;,9,1702,,,1
146028890876,RETURN,-1,,return;,9,1863,,,8
146028890877,RETURN,1,,return;,9,1896,,,1
146028890878,RETURN,1,,return true;,9,1984,,,1
146028890879,RETURN,1,,return false;,9,1986,,,1
146028890880,RETURN,1,,"return isType(tok->astOperand2(), unknown);",9,1988,,,1
146028890881,RETURN,1,,return true;,9,1990,,,1
146028890882,RETURN,1,,return true;,9,1992,,,1
146028890883,RETURN,-1,,return false;,5,1993,,,6
146028890884,RETURN,1,,return false;,9,1999,,,1
146028890885,RETURN,1,,return true;,9,2002,,,1
146028890886,RETURN,-1,,"return isType(typetok, vartok && vartok->varId() != 0);",5,2004,,,7
146028890887,RETURN,1,,return false;,9,2010,,,1
146028890888,RETURN,1,,return false;,9,2017,,,1
146028890889,RETURN,-1,,return tok->variable()->nameToken() != tok;,5,2018,,,6
146028890890,RETURN,-1,,"return tok && (tok->isEnumerator() || Token::Match(tok, ""%bool%|%num%|%str%|%char%|nullptr|NULL""));",5,2022,,,1
146028890891,RETURN,1,,return false;,9,2028,,,1
146028890892,RETURN,1,,return false;,9,2030,,,1
146028890893,RETURN,1,,return true;,9,2032,,,1
146028890894,RETURN,1,,return true;,9,2034,,,1
146028890895,RETURN,1,,return false;,9,2037,,,1
146028890896,RETURN,1,,return false;,9,2039,,,1
146028890897,RETURN,1,,return false;,13,2043,,,1
146028890898,RETURN,1,,return isConstStatement(tok->astOperand1()) && isConstStatement(tok->astOperand2());,9,2047,,,1
146028890899,RETURN,1,,return true;,9,2049,,,1
146028890900,RETURN,1,,return true;,9,2051,,,1
146028890901,RETURN,1,,return false;,13,2054,,,1
146028890902,RETURN,-1,,return isWithoutSideEffects(tok) && isConstStatement(tok->astOperand2());,9,2055,,,2
146028890903,RETURN,1,,return isWithoutSideEffects(tok->astOperand1()) && isConstStatement(tok->astOperand1());,9,2058,,,1
146028890904,RETURN,1,,return isConstStatement(tok->astOperand2());,9,2060,,,1
146028890905,RETURN,1,,return isConstStatement(tok->astOperand1()) && isConstStatement(tok->astOperand2());,13,2063,,,1
146028890906,RETURN,-1,,return (!stream || !isLikelyStream(stream)) && isConstStatement(tok->astOperand2());,9,2071,,,8
146028890907,RETURN,1,,return isConstStatement(tok->astOperand1()) && isConstStatement(tok->astOperand2()->astOperand1()) && isConstStatement(tok->astOperand2()->astOperand2());,9,2074,,,1
146028890908,RETURN,1,,return isConstStatement(tok->astOperand2()) && isConstStatement(tok->astParent());,17,2079,,,1
146028890909,RETURN,-1,,return isNestedBracket && isConstStatement(tok->astOperand2());,13,2080,,,2
146028890910,RETURN,-1,,"return isConstStatement(tok->astOperand2(), /*isNestedBracket*/ !isChained);",9,2082,,,4
146028890911,RETURN,1,,return true;,9,2085,,,1
146028890912,RETURN,-1,,return false;,5,2086,,,20
146028890913,RETURN,1,,return true;,9,2092,,,1
146028890914,RETURN,1,,return true;,9,2094,,,1
146028890915,RETURN,1,,return true;,9,2099,,,1
146028890916,RETURN,1,,return true;,9,2101,,,1
146028890917,RETURN,-1,,"return Token::Match(tok2->previous(), ""delete|throw|return"");",5,2102,,,8
146028890918,RETURN,1,,return false;,9,2108,,,1
146028890919,RETURN,1,,return true;,9,2110,,,1
146028890920,RETURN,1,,return tok->astParent()->astOperand2() == tok;,13,2114,,,1
146028890921,RETURN,-1,,return tok->astParent()->astOperand1() == tok;,9,2115,,,2
146028890922,RETURN,1,,return true;,13,2122,,,1
146028890923,RETURN,1,,return true;,9,2125,,,1
146028890924,RETURN,-1,,return false;,5,2126,,,6
146028890925,RETURN,1,,return ChildrenToVisit::op1_and_op2;,21,2152,,,1
146028890926,RETURN,1,,return ChildrenToVisit::none;,21,2154,,,1
146028890927,RETURN,1,,return ChildrenToVisit::none;,21,2156,,,1
146028890928,RETURN,1,,return ChildrenToVisit::none;,21,2158,,,1
146028890929,RETURN,-1,,return ChildrenToVisit::done;,17,2160,,,6
146028890930,RETURN,1,,return;,9,2133,,,1
146028890931,RETURN,-1,,return;,9,2233,,,2
146028890932,RETURN,-1,,return;,9,2267,,,3
146028890933,RETURN,1,,return;,9,2294,,,1
146028890934,RETURN,1,,return nullptr;,13,2330,,,1
146028890935,RETURN,-1,,return tok;,13,2344,,,1
146028890936,RETURN,-1,,return nullptr;,9,2346,,,10
146028890937,RETURN,1,,return true;,13,2352,,,1
146028890938,RETURN,-1,,return mSettings->library.detectContainerOrIterator(tok);,9,2353,,,4
146028890939,RETURN,1,,return;,9,2321,,,1
146028890940,RETURN,1,,return;,9,2324,,,1
146028890941,RETURN,1,,return nullptr;,9,2405,,,1
146028890942,RETURN,1,,return nullptr;,9,2409,,,1
146028890943,RETURN,-1,,return top;,5,2410,,,7
146028890944,RETURN,1,,return;,9,2428,,,1
146028890945,RETURN,-1,,return !func->isConst();,9,2606,,,1
146028890946,RETURN,-1,,return true;,9,2635,,,1
146028890947,RETURN,-1,,return true;,9,2640,,,1
146028890948,RETURN,-1,,return false;,5,2643,,,3
146028890949,RETURN,-1,,return isLambdaCaptureList(parent);,17,2742,,,4
146028890950,RETURN,1,,return;,13,2659,,,1
146028890951,RETURN,1,,return;,9,2927,,,1
146028890952,RETURN,1,,return;,9,2972,,,1
146028890953,RETURN,1,,return false;,9,3003,,,1
146028890954,RETURN,-1,,return false;,9,3015,,,1
146028890955,RETURN,1,,return suppress;,13,3020,,,1
146028890956,RETURN,-1,,return vt && (vt->pointer || vt->sign == ValueType::UNSIGNED);,5,3023,,,10
146028890957,RETURN,1,,return false;,9,3029,,,1
146028890958,RETURN,-1,,return false;,9,3041,,,1
146028890959,RETURN,-1,,return vt && (vt->pointer || vt->sign == ValueType::UNSIGNED);,5,3045,,,9
146028890960,RETURN,-1,,return true;,21,3084,,,1
146028890961,RETURN,-1,,return false;,9,3088,,,2
146028890962,RETURN,-1,,"return std::any_of(classScope->functionList.begin(), classScope->functionList.end(), [&](const Function& constructor) {
        if (constructor.isConstructor()) {
            for (int argnr = 0U; argnr < constructor.argCount(); argnr++) {
                const Variable * const argVar = constructor.getArgumentVar(argnr);
                if (argVar && argVar->isReference()) {
                    return true;
                }
            }
        }
        return false;
    });",5,3079,,,1
146028890963,RETURN,1,,return;,9,3099,,,1
146028890964,RETURN,-1,,"return tok->valueType() && tok->valueType()->sign == ValueType::SIGNED && tok->getValueLE(-1LL, settings);",5,3176,,,1
146028890965,RETURN,1,,return;,9,3238,,,1
146028890966,RETURN,1,,return;,9,3242,,,1
146028890967,RETURN,1,,return;,9,3307,,,1
146028890968,RETURN,1,,return;,9,3392,,,1
146028890969,RETURN,-1,,return;,9,3438,,,1
146028890970,RETURN,1,,return;,9,3484,,,1
146028890971,RETURN,1,,return;,9,3507,,,1
146028890972,RETURN,1,,return ChildrenToVisit::none;,13,3541,,,1
146028890973,RETURN,1,,return ChildrenToVisit::none;,13,3543,,,1
146028890974,RETURN,-1,,return foundError ? ChildrenToVisit::done : ChildrenToVisit::op1_and_op2;,9,3546,,,4
146028890975,RETURN,-1,,return false;,9,3535,,,2
146028890976,RETURN,-1,,return foundError;,5,3549,,,5
146028890977,RETURN,1,,return ChildrenToVisit::none;,13,3563,,,1
146028890978,RETURN,1,,return ChildrenToVisit::none;,13,3565,,,1
146028890979,RETURN,-1,,return foundUndefined ? ChildrenToVisit::done : ChildrenToVisit::op1_and_op2;,9,3568,,,4
146028890980,RETURN,1,,return false;,9,3555,,,1
146028890981,RETURN,1,,return true;,13,3558,,,1
146028890982,RETURN,-1,,return foundUndefined;,5,3571,,,6
146028890983,RETURN,1,,return ChildrenToVisit::none;,13,3581,,,1
146028890984,RETURN,1,,return ChildrenToVisit::none;,13,3583,,,1
146028890985,RETURN,-1,,return (foundUndefined || foundUnspecified) ? ChildrenToVisit::done : ChildrenToVisit::op1_and_op2;,9,3592,,,5
146028890986,RETURN,1,,return false;,9,3577,,,1
146028890987,RETURN,-1,,return foundUndefined || foundUnspecified;,5,3595,,,5
146028890988,RETURN,1,,return;,9,3670,,,1
146028890989,RETURN,1,,return;,9,3672,,,1
146028890990,RETURN,-1,,return;,9,3719,,,3
146028890991,RETURN,-1,,return;,9,3734,,,12
146028890992,RETURN,1,,return;,9,3750,,,1
146028890993,RETURN,-1,,"return f.type == FunctionType::eFunction && f.name() == var.name() && precedes(f.tokenDef, var.nameToken());",9,3875,,,1
146028890994,RETURN,1,,return nullptr;,9,3867,,,1
146028890995,RETURN,1,,return v.nameToken();,13,3872,,,1
146028890996,RETURN,1,,return it->tokenDef;,9,3878,,,1
146028890997,RETURN,1,,return nullptr;,9,3881,,,1
146028890998,RETURN,-1,,return shadowed;,5,3885,,,10
146028890999,RETURN,-1,,return arg.nameToken() && var.name() == arg.name();,21,3907,,,1
146028891000,RETURN,1,,return;,9,3891,,,1
146028891001,RETURN,1,,return true;,9,3945,,,1
146028891002,RETURN,1,,"return isVariableExpression(tok->astOperand1()) &&
               isVariableExpression(tok->astOperand2());",9,3947,,,1
146028891003,RETURN,1,,return isVariableExpression(tok->astOperand1());,9,3950,,,1
146028891004,RETURN,-1,,return false;,5,3951,,,4
146028891005,RETURN,1,,return false;,9,3957,,,1
146028891006,RETURN,1,,return false;,9,3959,,,1
146028891007,RETURN,1,,return true;,9,3961,,,1
146028891008,RETURN,1,,return true;,9,3963,,,1
146028891009,RETURN,1,,return true;,9,3965,,,1
146028891010,RETURN,-1,,return false;,5,3966,,,6
146028891011,RETURN,1,,return ChildrenToVisit::none;,25,4013,,,1
146028891012,RETURN,-1,,return ChildrenToVisit::done;,25,4016,,,2
146028891013,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,17,4019,,,2
146028891014,RETURN,-1,,"return Token::simpleMatch(child, ""sizeof"");",17,4025,,,1
146028891015,RETURN,1,,return;,9,3972,,,1
146028891016,RETURN,-1,,return;,9,4043,,,3
146028891017,RETURN,-1,,return parent->isExpandedMacro();,17,4089,,,1
146028891018,RETURN,1,,return;,9,4073,,,1
146028891019,RETURN,-1,,return;,9,4104,,,2
146028891020,RETURN,1,,return;,9,4177,,,1
146028891021,RETURN,1,,return false;,9,4207,,,1
146028891022,RETURN,-1,,return false;,13,4231,,,1
146028891023,RETURN,-1,,return true;,9,4244,,,8
146028891024,RETURN,-1,,return false;,9,4246,,,1
146028891025,RETURN,1,,return false;,9,4249,,,1
146028891026,RETURN,1,,return false;,9,4251,,,1
146028891027,RETURN,-1,,return true;,5,4259,,,12
146028891028,RETURN,1,,return ChildrenToVisit::op1_and_op2;,25,4284,,,1
146028891029,RETURN,1,,return ChildrenToVisit::none;,25,4286,,,1
146028891030,RETURN,1,,return ChildrenToVisit::none;,25,4288,,,1
146028891031,RETURN,1,,return ChildrenToVisit::none;,25,4294,,,1
146028891032,RETURN,-1,,return ChildrenToVisit::done;,21,4296,,,12
146028891033,RETURN,1,,return;,9,50,,,1
146028891034,RETURN,1,,return;,9,107,,,1
146028891035,RETURN,1,,return;,9,50,,,1
146028891036,RETURN,1,,return;,9,80,,,1
146028891037,RETURN,-1,,"return Token::simpleMatch(szTok, ""("") && Token::simpleMatch(szTok->previous(), ""sizeof"");",41,182,,,1
146028891038,RETURN,1,,return true;,41,184,,,1
146028891039,RETURN,-1,,return false;,29,188,,,2
146028891040,RETURN,1,,return;,9,121,,,1
146028891041,RETURN,1,,return;,9,290,,,1
146028891042,RETURN,1,,return;,9,316,,,1
146028891043,RETURN,1,,return;,9,362,,,1
146028891044,RETURN,1,,return;,9,405,,,1
146028891045,RETURN,1,,return;,9,449,,,1
146028891046,RETURN,-1,,"return contains({Library::Container::Yield::ITEM, Library::Container::Yield::AT_INDEX}, yield);",5,70,,,1
146028891047,RETURN,1,,return true;,13,84,,,1
146028891048,RETURN,-1,,return false;,5,86,,,2
146028891049,RETURN,1,,return true;,13,94,,,1
146028891050,RETURN,-1,,return false;,5,96,,,2
146028891051,RETURN,1,,return true;,13,104,,,1
146028891052,RETURN,-1,,return false;,5,106,,,2
146028891053,RETURN,1,,return parent->tokAt(2)->astOperand2();,13,114,,,1
146028891054,RETURN,1,,return nullptr;,9,117,,,1
146028891055,RETURN,1,,return parent->astOperand2();,9,119,,,1
146028891056,RETURN,-1,,return nullptr;,5,120,,,4
146028891057,RETURN,1,,return nullptr;,9,126,,,1
146028891058,RETURN,1,,return tok->tokAt(-2)->astOperand1();,13,130,,,1
146028891059,RETURN,-1,,return nullptr;,5,132,,,3
146028891060,RETURN,1,,return false;,25,185,,,1
146028891061,RETURN,1,,return false;,25,187,,,1
146028891062,RETURN,1,,return false;,25,189,,,1
146028891063,RETURN,1,,return false;,25,195,,,1
146028891064,RETURN,-1,,return containerTok->exprId() == tok->exprId();,21,196,,,10
146028891065,RETURN,1,,"return ""at position "" + MathLib::toString(indexValue.intvalue) + "" from the beginning"";",9,209,,,1
146028891066,RETURN,1,,"return ""at position "" + MathLib::toString(-indexValue.intvalue) + "" from the end"";",9,211,,,1
146028891067,RETURN,1,,"return ""greater or equal to "" + indexString;",9,219,,,1
146028891068,RETURN,-1,,return indexString;,5,220,,,7
146028891069,RETURN,1,,return;,9,227,,,1
146028891070,RETURN,-1,,return;,9,255,,,1
146028891071,RETURN,1,,return false;,9,285,,,1
146028891072,RETURN,1,,return false;,9,287,,,1
146028891073,RETURN,1,,return false;,9,289,,,1
146028891074,RETURN,-1,,return containerToken->valueType()->container->getYield(expr->strAt(-1)) == Library::Container::Yield::SIZE;,5,290,,,4
146028891075,RETURN,1,,return false;,9,296,,,1
146028891076,RETURN,1,,return true;,9,298,,,1
146028891077,RETURN,1,,return false;,13,306,,,1
146028891078,RETURN,-1,,return mul && (!mul->hasKnownIntValue() || mul->getKnownIntValue() != 0);,9,307,,,3
146028891079,RETURN,1,,return false;,13,316,,,1
146028891080,RETURN,-1,,"return op && op->getValueGE(0, *mSettings);",9,317,,,3
146028891081,RETURN,-1,,return false;,5,319,,,5
146028891082,RETURN,-1,,return tok;,5,418,,,2
146028891083,RETURN,1,,return false;,9,425,,,1
146028891084,RETURN,1,,return (var->nameToken()->valueType() && var->nameToken()->valueType()->type == ValueType::Type::ITERATOR);,9,429,,,1
146028891085,RETURN,1,,return false;,13,436,,,1
146028891086,RETURN,-1,,return true;,5,441,,,5
146028891087,RETURN,1,,return std::string();,9,447,,,1
146028891088,RETURN,-1,,return ret;,5,454,,,5
146028891089,RETURN,1,,return false;,9,460,,,1
146028891090,RETURN,-1,,"return Token::simpleMatch(decltok, ""std :: vector"");",5,463,,,6
146028891091,RETURN,1,,return { tok->astOperand1() };,9,694,,,1
146028891092,RETURN,-1,,return res;,5,705,,,8
146028891093,RETURN,-1,,"return isSameExpression(false, tok1, tok2, settings, false, false);",17,723,,,1
146028891094,RETURN,-1,,"return std::any_of(address2.begin(), address2.end(), [&](const Token* tok2) {
                return isSameExpression(false, tok1, tok2, settings, false, false);
            });",13,722,,,1
146028891095,RETURN,-1,,"return !astIsContainerOwned(tok1) || !isTemporary(tok1, &settings.library);",9,714,,,1
146028891096,RETURN,1,,return true;,9,717,,,1
146028891097,RETURN,-1,,"return std::any_of(address1.begin(), address1.end(), [&](const Token* tok1) {
            return std::any_of(address2.begin(), address2.end(), [&](const Token* tok2) {
                return isSameExpression(false, tok1, tok2, settings, false, false);
            });
        });",9,721,,,5
146028891098,RETURN,-1,,return false;,5,727,,,4
146028891099,RETURN,-1,,"return start->lifetimeKind == v.lifetimeKind && (astHasToken(tok1, tok2) || astHasToken(tok2, tok1));",13,741,,,3
146028891100,RETURN,-1,,"return x.tokvalue != y.tokvalue && astHasToken(x.tokvalue, y.tokvalue);",13,744,,,1
146028891101,RETURN,-1,,return result;,5,749,,,5
146028891102,RETURN,-1,,return v.lifetimeKind == ValueFlow::Value::LifetimeKind::Iterator;,13,756,,,1
146028891103,RETURN,-1,,"return std::find_if(beg, values.cend(), [](const ValueFlow::Value& v) {
            return v.lifetimeKind == ValueFlow::Value::LifetimeKind::Iterator;
        });",9,755,,,1
146028891104,RETURN,1,,return *it;,13,764,,,1
146028891105,RETURN,1,,return values.front();,9,767,,,1
146028891106,RETURN,-1,,return ValueFlow::Value{};,5,768,,,9
146028891107,RETURN,1,,return false;,9,774,,,1
146028891108,RETURN,1,,return false;,9,776,,,1
146028891109,RETURN,1,,return false;,13,781,,,1
146028891110,RETURN,1,,return false;,17,784,,,1
146028891111,RETURN,1,,return false;,17,787,,,1
146028891112,RETURN,1,,return false;,13,790,,,1
146028891113,RETURN,-1,,return true;,9,795,,,5
146028891114,RETURN,1,,return false;,13,801,,,1
146028891115,RETURN,1,,return false;,9,805,,,1
146028891116,RETURN,1,,return false;,9,808,,,1
146028891117,RETURN,-1,,return true;,9,811,,,2
146028891118,RETURN,-1,,return false;,5,813,,,16
146028891119,RETURN,1,,return;,33,866,,,1
146028891120,RETURN,1,,return nullptr;,9,937,,,1
146028891121,RETURN,1,,return tok->astParent()->next();,9,939,,,1
146028891122,RETURN,1,,return tok->astParent();,9,941,,,1
146028891123,RETURN,1,,return nullptr;,9,946,,,1
146028891124,RETURN,1,,return ftok;,17,951,,,1
146028891125,RETURN,1,,return ftok;,17,955,,,1
146028891126,RETURN,1,,return ftok;,17,957,,,1
146028891127,RETURN,1,,return ftok;,17,959,,,1
146028891128,RETURN,1,,return ftok;,17,961,,,1
146028891129,RETURN,1,,return ftok;,17,963,,,1
146028891130,RETURN,1,,return ftok;,17,965,,,1
146028891131,RETURN,1,,return ftok;,17,967,,,1
146028891132,RETURN,1,,return ftok;,17,969,,,1
146028891133,RETURN,-1,,return nullptr;,5,972,,,9
146028891134,RETURN,1,,return;,21,992,,,1
146028891135,RETURN,-1,,return result;,17,999,,,3
146028891136,RETURN,1,,return false;,29,1018,,,1
146028891137,RETURN,1,,return true;,29,1020,,,1
146028891138,RETURN,1,,return false;,29,1022,,,1
146028891139,RETURN,1,,return false;,29,1024,,,1
146028891140,RETURN,-1,,return true;,25,1025,,,7
146028891141,RETURN,1,,return result;,21,1009,,,1
146028891142,RETURN,-1,,return result;,13,1053,,,3
146028891143,RETURN,1,,return nullptr;,9,1077,,,1
146028891144,RETURN,1,,return nullptr;,9,1080,,,1
146028891145,RETURN,-1,,return sepTok->astOperand2();,5,1081,,,5
146028891146,RETURN,1,,return nullptr;,9,1090,,,1
146028891147,RETURN,1,,return nullptr;,9,1092,,,1
146028891148,RETURN,1,,return nullptr;,17,1101,,,1
146028891149,RETURN,1,,return v;,21,1104,,,1
146028891150,RETURN,1,,return v;,17,1108,,,1
146028891151,RETURN,-1,,return &val;,9,1115,,,5
146028891152,RETURN,-1,,return nullptr;,5,1117,,,4
146028891153,RETURN,1,,return nullptr;,9,1123,,,1
146028891154,RETURN,1,,return tok->next();,9,1128,,,1
146028891155,RETURN,1,,return parent->next();,9,1131,,,1
146028891156,RETURN,-1,,return endToken;,5,1132,,,9
146028891157,RETURN,1,,return false;,29,1194,,,1
146028891158,RETURN,1,,return false;,29,1196,,,1
146028891159,RETURN,1,,return false;,29,1198,,,1
146028891160,RETURN,-1,,return true;,37,1216,,,2
146028891161,RETURN,-1,,return true;,29,1226,,,3
146028891162,RETURN,-1,,return false;,25,1228,,,10
146028891163,RETURN,-1,,return epi.first == tok;,9,1252,,,1
146028891164,RETURN,1,,return ChildrenToVisit::op1_and_op2;,17,1308,,,1
146028891165,RETURN,-1,,return ChildrenToVisit::none;,13,1311,,,3
146028891166,RETURN,1,,return;,9,1435,,,1
146028891167,RETURN,1,,return true;,9,1512,,,1
146028891168,RETURN,-1,,return !tokOther || !tokOther->hasKnownIntValue() || tokOther->getKnownIntValue() != 0;,13,1516,,,3
146028891169,RETURN,-1,,return (!tok->astOperand1()->isNumber() && !tok->astOperand2()->isNumber());,9,1518,,,2
146028891170,RETURN,1,,return true;,9,1521,,,1
146028891171,RETURN,1,,return true;,9,1523,,,1
146028891172,RETURN,1,,"return if_findCompare(tok, stdStringLike);",9,1525,,,1
146028891173,RETURN,-1,,return false;,5,1526,,,8
146028891174,RETURN,1,,return;,9,1534,,,1
146028891175,RETURN,1,,return {};,9,1622,,,1
146028891176,RETURN,1,,return {};,9,1624,,,1
146028891177,RETURN,1,,return {};,9,1626,,,1
146028891178,RETURN,1,,return {};,9,1630,,,1
146028891179,RETURN,1,,return {};,9,1632,,,1
146028891180,RETURN,1,,return {};,9,1634,,,1
146028891181,RETURN,1,,return {};,9,1636,,,1
146028891182,RETURN,-1,,"return {contTok, tok->astOperand2()};",5,1637,,,12
146028891183,RETURN,1,,return tok;,9,1643,,,1
146028891184,RETURN,1,,return skipLocalVars(tok->next());,9,1645,,,1
146028891185,RETURN,1,,return tok;,13,1652,,,1
146028891186,RETURN,1,,return tok;,13,1654,,,1
146028891187,RETURN,1,,return tok;,13,1657,,,1
146028891188,RETURN,-1,,return skipLocalVars(endTok->next());,9,1658,,,12
146028891189,RETURN,-1,,return tok;,5,1660,,,4
146028891190,RETURN,1,,return nullptr;,9,1687,,,1
146028891191,RETURN,1,,return ivalueTok;,13,1691,,,1
146028891192,RETURN,-1,,return ikeyTok;,9,1692,,,2
146028891193,RETURN,-1,,return nullptr;,5,1694,,,15
146028891194,RETURN,1,,return;,9,1700,,,1
146028891195,RETURN,1,,return;,13,1749,,,1
146028891196,RETURN,1,,return false;,9,1770,,,1
146028891197,RETURN,-1,,"return var && var->isStlType(""list"");",5,1772,,,4
146028891198,RETURN,1,,return;,9,1778,,,1
146028891199,RETURN,1,,return;,9,1781,,,1
146028891200,RETURN,1,,return;,9,1839,,,1
146028891201,RETURN,1,,return;,9,1880,,,1
146028891202,RETURN,-1,,return var && !var->isStatic() && var->isLocal();,5,1964,,,3
146028891203,RETURN,-1,,"return str && ((str->variable() && str->variable()->isStlStringType()) || // variable
                       (str->function() && isStlStringType(str->function()->retDef)) || // function returning string
                       (str->valueType() && str->valueType()->type == ValueType::ITERATOR && isStlStringType(str->valueType()->containerTypeToken)));",9,2006,,,3
146028891204,RETURN,1,,return;,9,2248,,,1
146028891205,RETURN,1,,return;,9,2372,,,1
146028891206,RETURN,1,,return false;,17,2451,,,1
146028891207,RETURN,1,,return false;,17,2453,,,1
146028891208,RETURN,-1,,return value.isContainerSizeValue();,13,2454,,,3
146028891209,RETURN,1,,return false;,25,2475,,,1
146028891210,RETURN,1,,return true;,25,2477,,,1
146028891211,RETURN,1,,return true;,25,2479,,,1
146028891212,RETURN,-1,,return false;,21,2480,,,4
146028891213,RETURN,-1,,return;,9,2536,,,3
146028891214,RETURN,1,,return;,9,2539,,,1
146028891215,RETURN,1,,return false;,9,2576,,,1
146028891216,RETURN,1,,return false;,9,2580,,,1
146028891217,RETURN,1,,return false;,9,2583,,,1
146028891218,RETURN,1,,return false;,9,2585,,,1
146028891219,RETURN,-1,,return true;,5,2586,,,11
146028891220,RETURN,1,,return nullptr;,9,2592,,,1
146028891221,RETURN,1,,return nullptr;,9,2596,,,1
146028891222,RETURN,1,,return nullptr;,9,2598,,,1
146028891223,RETURN,-1,,return endStatement;,5,2599,,,8
146028891224,RETURN,1,,return nullptr;,9,2608,,,1
146028891225,RETURN,1,,return nullptr;,9,2610,,,1
146028891226,RETURN,1,,return nullptr;,9,2613,,,1
146028891227,RETURN,1,,return nullptr;,9,2615,,,1
146028891228,RETURN,1,,return nullptr;,21,2624,,,1
146028891229,RETURN,1,,return nullptr;,21,2627,,,1
146028891230,RETURN,1,,return nullptr;,21,2629,,,1
146028891231,RETURN,-1,,return containerId > 0 ? assignTok : nullptr;,9,2633,,,4
146028891232,RETURN,-1,,return assignTok;,5,2635,,,12
146028891233,RETURN,1,,return nullptr;,9,2641,,,1
146028891234,RETURN,1,,return nullptr;,9,2644,,,1
146028891235,RETURN,1,,return nullptr;,9,2646,,,1
146028891236,RETURN,1,,return nullptr;,9,2649,,,1
146028891237,RETURN,1,,return nullptr;,9,2653,,,1
146028891238,RETURN,1,,return nullptr;,9,2656,,,1
146028891239,RETURN,-1,,return dotTok;,5,2657,,,14
146028891240,RETURN,1,,return nullptr;,9,2663,,,1
146028891241,RETURN,1,,return nullptr;,9,2670,,,1
146028891242,RETURN,-1,,return varTok;,5,2672,,,7
146028891243,RETURN,1,,return nullptr;,9,2678,,,1
146028891244,RETURN,1,,return nullptr;,9,2681,,,1
146028891245,RETURN,1,,return nullptr;,9,2683,,,1
146028891246,RETURN,1,,return nullptr;,9,2687,,,1
146028891247,RETURN,1,,return nullptr;,9,2689,,,1
146028891248,RETURN,1,,return nullptr;,9,2691,,,1
146028891249,RETURN,1,,return nullptr;,9,2693,,,1
146028891250,RETURN,1,,return nullptr;,21,2699,,,1
146028891251,RETURN,1,,return nullptr;,21,2702,,,1
146028891252,RETURN,1,,return nullptr;,21,2704,,,1
146028891253,RETURN,-1,,return containerId > 0 ? bodyTok : nullptr;,9,2708,,,4
146028891254,RETURN,-1,,return bodyTok;,5,2710,,,15
146028891255,RETURN,-1,,return true;,9,2718,,,1
146028891256,RETURN,-1,,return true;,9,2723,,,1
146028891257,RETURN,-1,,return false;,5,2725,,,3
146028891258,RETURN,-1,,return true;,9,2732,,,1
146028891259,RETURN,-1,,return true;,9,2736,,,1
146028891260,RETURN,-1,,return false;,5,2738,,,3
146028891261,RETURN,-1,,return true;,9,2745,,,1
146028891262,RETURN,-1,,return true;,9,2748,,,1
146028891263,RETURN,-1,,return false;,5,2750,,,3
146028891264,RETURN,1,,return false;,9,2756,,,1
146028891265,RETURN,-1,,return true;,13,2759,,,1
146028891266,RETURN,-1,,return false;,5,2762,,,3
146028891267,RETURN,1,,"return ""std::min_element"";",9,2768,,,1
146028891268,RETURN,1,,"return ""std::max_element"";",9,2770,,,1
146028891269,RETURN,-1,,return algo;,5,2771,,,3
146028891270,RETURN,1,,"return ""std::accumulate"";",9,2777,,,1
146028891271,RETURN,-1,,return algo;,5,2785,,,7
146028891272,RETURN,1,,return false;,9,2791,,,1
146028891273,RETURN,1,,return false;,9,2794,,,1
146028891274,RETURN,1,,return false;,13,2799,,,1
146028891275,RETURN,1,,return false;,13,2811,,,1
146028891276,RETURN,1,,return false;,9,2814,,,1
146028891277,RETURN,-1,,return true;,5,2817,,,9
146028891278,RETURN,-1,,"return Token::Match(tok, ""goto|break"");",17,2881,,,1
146028891279,RETURN,-1,,"return Token::simpleMatch(tok, ""return"");",21,2900,,,1
146028891280,RETURN,-1,,return;,25,2907,,,3
146028891281,RETURN,-1,,return varsChanged.count(loopVar->varId()) > 0;,13,2839,,,1
146028891282,RETURN,1,,return false;,17,2845,,,1
146028891283,RETURN,1,,return true;,21,2850,,,1
146028891284,RETURN,1,,return true;,21,2852,,,1
146028891285,RETURN,1,,return true;,21,2854,,,1
146028891286,RETURN,-1,,return false;,13,2856,,,5
146028891287,RETURN,1,,return tok;,21,2873,,,1
146028891288,RETURN,-1,,return nullptr;,13,2875,,,2
146028891289,RETURN,-1,,"return findToken([](const Token* tok) {
                return Token::Match(tok, ""goto|break"");
            });",13,2880,,,1
146028891290,RETURN,-1,,return bodyTok && loopVar;,13,2886,,,1
146028891291,RETURN,1,,"return """";",17,2892,,,1
146028891292,RETURN,1,,"return """";",21,2896,,,1
146028891293,RETURN,1,,"return """";",21,2913,,,1
146028891294,RETURN,1,,"return ""std::any_of"";",21,2915,,,1
146028891295,RETURN,-1,,"return ""std::all_of or std::none_of"";",17,2916,,,11
146028891296,RETURN,-1,,"return """";",13,2918,,,5
146028891297,RETURN,1,,return false;,17,2924,,,1
146028891298,RETURN,1,,return false;,17,2926,,,1
146028891299,RETURN,1,,return false;,17,2928,,,1
146028891300,RETURN,-1,,return scope && scope->isNestedIn(bodyTok->scope());,13,2930,,,6
146028891301,RETURN,1,,return false;,13,2964,,,1
146028891302,RETURN,-1,,return !astIsContainer(tok);,9,2965,,,2
146028891303,RETURN,1,,return false;,13,2971,,,1
146028891304,RETURN,-1,,return true;,13,2980,,,2
146028891305,RETURN,-1,,return false;,9,2982,,,5
146028891306,RETURN,1,,return true;,13,2987,,,1
146028891307,RETURN,-1,,return end && end->varId() != 0;,9,2989,,,4
146028891308,RETURN,1,,return;,9,2958,,,1
146028891309,RETURN,1,,return false;,13,3213,,,1
146028891310,RETURN,1,,return false;,13,3215,,,1
146028891311,RETURN,1,,return false;,13,3217,,,1
146028891312,RETURN,-1,,return true;,9,3218,,,4
146028891313,RETURN,1,,return false;,9,3210,,,1
146028891314,RETURN,-1,,"return std::any_of(tok->values().begin(), tok->values().end(), [&](const ValueFlow::Value& v) {
        if (!v.isKnown())
            return false;
        if (!v.isContainerSizeValue())
            return false;
        if (v.intvalue != 0)
            return false;
        return true;
    });",5,3211,,,2
146028891315,RETURN,1,,return;,9,3225,,,1
146028891316,RETURN,-1,,return;,9,3272,,,3
146028891317,RETURN,-1,,return v.intvalue >= 0;,17,3298,,,3
146028891318,RETURN,-1,,return (v.intvalue < 0) || (sizeVal && v.intvalue >= sizeVal->intvalue);,17,3300,,,6
146028891319,RETURN,-1,,return false;,9,3305,,,2
146028891320,RETURN,-1,,return it != tok->values().end() ? &*it : nullptr;,5,3307,,,3
146028891321,RETURN,-1,,"return Token::Match(tok, ""std :: mutex|recursive_mutex|timed_mutex|recursive_timed_mutex|shared_mutex"");",5,3339,,,3
146028891322,RETURN,-1,,"return Token::Match(tok, ""std :: lock_guard|unique_lock|scoped_lock|shared_lock"");",5,3345,,,3
146028891323,RETURN,1,,return false;,9,3351,,,1
146028891324,RETURN,1,,return false;,9,3353,,,1
146028891325,RETURN,-1,,return !var->isReference() && !var->isRValueReference() && !var->isStatic() && var->scope() == scope;,5,3354,,,3
146028891326,RETURN,1,,return;,9,3374,,,1
146028891327,RETURN,-1,,return;,9,3411,,,1
146028891328,RETURN,1,,return;,9,100,,,1
146028891329,RETURN,1,,return;,9,169,,,1
146028891330,RETURN,-1,,"return (var && !var->isPointer() && !var->isArray() && (var->typeStartToken()->str() == ""char"" || var->typeStartToken()->str() == ""wchar_t""));",5,225,,,1
146028891331,RETURN,1,,return true;,17,259,,,1
146028891332,RETURN,1,,return false;,13,263,,,1
146028891333,RETURN,1,,return true;,13,265,,,1
146028891334,RETURN,1,,return true;,17,270,,,1
146028891335,RETURN,-1,,return false;,5,273,,,2
146028891336,RETURN,1,,return;,9,283,,,1
146028891337,RETURN,1,,return ChildrenToVisit::none;,21,364,,,1
146028891338,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,21,366,,,1
146028891339,RETURN,-1,,return ChildrenToVisit::none;,21,373,,,2
146028891340,RETURN,-1,,return ChildrenToVisit::none;,21,380,,,2
146028891341,RETURN,-1,,return ChildrenToVisit::none;,17,386,,,6
146028891342,RETURN,1,,return;,9,351,,,1
146028891343,RETURN,1,,return;,9,68,,,1
146028891344,RETURN,-1,,return;,9,124,,,2
146028891345,RETURN,-1,,return;,9,148,,,2
146028891346,RETURN,1,,return;,9,157,,,1
146028891347,RETURN,1,,return;,9,176,,,1
146028891348,RETURN,-1,,return !v.isImpossible() && v.isIntValue() && (v.intvalue <= -1 || v.wideintvalue <= -1);,17,272,,,1
146028891349,RETURN,1,,return;,9,253,,,1
146028891350,RETURN,-1,,return src.type == p.first && tgt.type == p.second;,9,331,,,1
146028891351,RETURN,1,,return false;,9,328,,,1
146028891352,RETURN,-1,,"return std::any_of(std::begin(typeCombinations), std::end(typeCombinations), [&](const std::pair<ValueType::Type, ValueType::Type>& p) {
        return src.type == p.first && tgt.type == p.second;
    });",5,330,,,10
146028891353,RETURN,1,,return;,9,338,,,1
146028891354,RETURN,1,,return;,9,483,,,1
146028891355,RETURN,1,,return;,9,485,,,1
146028891356,RETURN,1,,return nullptr;,9,65,,,1
146028891357,RETURN,1,,return nullptr;,9,70,,,1
146028891358,RETURN,-1,,return parent;,5,80,,,9
146028891359,RETURN,1,,return ret;,9,86,,,1
146028891360,RETURN,-1,,return ret;,5,101,,,4
146028891361,RETURN,1,,return true;,9,107,,,1
146028891362,RETURN,-1,,return !mUninitDiags.insert(tok).second;,5,110,,,3
146028891363,RETURN,-1,,return v;,5,279,,,2
146028891364,RETURN,-1,,return v.notEqual ? (i != v.value) : (i == v.value);,5,283,,,1
146028891365,RETURN,-1,,return v.notEqual ? (i == v.value) : (i != v.value);,5,287,,,1
146028891366,RETURN,1,,return;,9,293,,,1
146028891367,RETURN,-1,,return;,9,300,,,2
146028891368,RETURN,-1,,return;,13,315,,,1
146028891369,RETURN,-1,,return;,13,326,,,1
146028891370,RETURN,1,,return;,13,334,,,1
146028891371,RETURN,1,,return;,13,341,,,1
146028891372,RETURN,1,,return false;,9,378,,,1
146028891373,RETURN,1,,return false;,9,380,,,1
146028891374,RETURN,1,,"return isVariableUsed(tok->astOperand1(),var) || isVariableUsed(tok->astOperand2(),var);",9,382,,,1
146028891375,RETURN,1,,return false;,9,384,,,1
146028891376,RETURN,1,,return true;,9,386,,,1
146028891377,RETURN,1,,return false;,9,393,,,1
146028891378,RETURN,-1,,"return !parent2 || parent2->isConstOp() || (parent2->str() == ""="" && parent2->astOperand2() == parent);",5,396,,,12
146028891379,RETURN,1,,return ChildrenToVisit::none;,21,598,,,1
146028891380,RETURN,1,,return ChildrenToVisit::op1_and_op2;,21,600,,,1
146028891381,RETURN,-1,,return ChildrenToVisit::done;,21,603,,,2
146028891382,RETURN,-1,,return ChildrenToVisit::none;,17,605,,,4
146028891383,RETURN,-1,,return v.isUninitValue() && !v.isInconclusive();,33,728,,,1
146028891384,RETURN,1,,return true;,9,410,,,1
146028891385,RETURN,-1,,return false;,17,422,,,2
146028891386,RETURN,1,,return true;,17,432,,,1
146028891387,RETURN,1,,return true;,25,461,,,1
146028891388,RETURN,1,,return true;,17,469,,,1
146028891389,RETURN,1,,return true;,21,480,,,1
146028891390,RETURN,1,,return true;,25,495,,,1
146028891391,RETURN,-1,,return true;,21,528,,,2
146028891392,RETURN,1,,return true;,21,532,,,1
146028891393,RETURN,1,,return true;,29,547,,,1
146028891394,RETURN,1,,return true;,25,569,,,1
146028891395,RETURN,1,,return true;,21,589,,,1
146028891396,RETURN,-1,,return true;,17,591,,,1
146028891397,RETURN,-1,,return true;,17,610,,,2
146028891398,RETURN,1,,return true;,17,628,,,1
146028891399,RETURN,1,,return true;,21,638,,,1
146028891400,RETURN,1,,return true;,25,668,,,1
146028891401,RETURN,-1,,return true;,13,679,,,2
146028891402,RETURN,-1,,return true;,13,684,,,1
146028891403,RETURN,-1,,return true;,13,689,,,1
146028891404,RETURN,-1,,return true;,13,694,,,1
146028891405,RETURN,-1,,return true;,13,699,,,1
146028891406,RETURN,1,,return true;,17,704,,,1
146028891407,RETURN,-1,,return true;,13,712,,,9
146028891408,RETURN,-1,,return true;,21,738,,,2
146028891409,RETURN,1,,return true;,25,746,,,1
146028891410,RETURN,-1,,return true;,21,752,,,9
146028891411,RETURN,-1,,return (noreturn == nullptr);,13,758,,,4
146028891412,RETURN,1,,return true;,21,781,,,1
146028891413,RETURN,1,,return true;,25,787,,,1
146028891414,RETURN,1,,return true;,25,791,,,1
146028891415,RETURN,-1,,return true;,21,801,,,2
146028891416,RETURN,-1,,return true;,21,806,,,2
146028891417,RETURN,1,,return true;,21,810,,,1
146028891418,RETURN,1,,return true;,21,813,,,1
146028891419,RETURN,-1,,return true;,21,819,,,2
146028891420,RETURN,-1,,return true;,29,829,,,2
146028891421,RETURN,-1,,return true;,25,838,,,2
146028891422,RETURN,-1,,return true;,17,843,,,6
146028891423,RETURN,-1,,return false;,5,848,,,10
146028891424,RETURN,1,,return nullptr;,9,854,,,1
146028891425,RETURN,1,,return nullptr;,9,856,,,1
146028891426,RETURN,1,,return errorToken;,13,864,,,1
146028891427,RETURN,1,,return nullptr;,13,866,,,1
146028891428,RETURN,1,,"return checkExpr(tok->astOperand2(), var, alloc, known, bailout);",9,869,,,1
146028891429,RETURN,1,,return errorToken;,13,873,,,1
146028891430,RETURN,-1,,return nullptr;,5,877,,,6
146028891431,RETURN,1,,return true;,21,889,,,1
146028891432,RETURN,1,,return true;,25,892,,,1
146028891433,RETURN,-1,,return true;,13,905,,,3
146028891434,RETURN,-1,,return false;,5,913,,,5
146028891435,RETURN,1,,return ChildrenToVisit::none;,25,1062,,,1
146028891436,RETURN,-1,,return ChildrenToVisit::done;,25,1065,,,2
146028891437,RETURN,1,,return ChildrenToVisit::none;,25,1068,,,1
146028891438,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,21,1069,,,4
146028891439,RETURN,-1,,return nullptr;,13,933,,,2
146028891440,RETURN,1,,return nullptr;,17,947,,,1
146028891441,RETURN,-1,,return nullptr;,17,961,,,2
146028891442,RETURN,1,,return errorToken1;,21,972,,,1
146028891443,RETURN,1,,return nullptr;,17,977,,,1
146028891444,RETURN,-1,,return nullptr;,17,993,,,2
146028891445,RETURN,-1,,return nullptr;,21,1040,,,2
146028891446,RETURN,1,,return tok;,21,1045,,,1
146028891447,RETURN,-1,,return nullptr;,17,1050,,,2
146028891448,RETURN,1,,return errtok;,21,1055,,,1
146028891449,RETURN,-1,,return nullptr;,21,1073,,,2
146028891450,RETURN,-1,,return nullptr;,17,1077,,,2
146028891451,RETURN,-1,,return errorToken;,5,1082,,,7
146028891452,RETURN,-1,,return true;,9,1096,,,2
146028891453,RETURN,-1,,return bailout || alwaysReturns;,5,1099,,,8
146028891454,RETURN,-1,,return tok && tok->astParent() && tok == tok->astParent()->astOperand1();,5,1141,,,1
146028891455,RETURN,-1,,return tok && tok->astParent() && tok == tok->astParent()->astOperand2();,5,1146,,,1
146028891456,RETURN,-1,,"return Token::simpleMatch(tok, ""("") && tok->isCast() && tok->valueType() && tok->valueType()->type == ValueType::Type::VOID && tok->valueType()->pointer == 0;",5,1151,,,1
146028891457,RETURN,1,,return nullptr;,13,1177,,,1
146028891458,RETURN,1,,return nullptr;,9,1225,,,1
146028891459,RETURN,1,,return nullptr;,9,1229,,,1
146028891460,RETURN,1,,return nullptr;,9,1233,,,1
146028891461,RETURN,1,,return nullptr;,9,1237,,,1
146028891462,RETURN,1,,return nullptr;,13,1243,,,1
146028891463,RETURN,1,,return nullptr;,13,1247,,,1
146028891464,RETURN,1,,return nullptr;,13,1249,,,1
146028891465,RETURN,1,,return nullptr;,13,1251,,,1
146028891466,RETURN,1,,return nullptr;,13,1253,,,1
146028891467,RETURN,1,,return valueExpr;,13,1262,,,1
146028891468,RETURN,-1,,return (use>0) ? valueExpr : nullptr;,9,1264,,,7
146028891469,RETURN,-1,,return (use>0) ? derefValue : nullptr;,9,1268,,,3
146028891470,RETURN,-1,,return (use>0) ? valueExpr : nullptr;,13,1274,,,3
146028891471,RETURN,-1,,return nullptr;,9,1276,,,4
146028891472,RETURN,1,,return nullptr;,21,1291,,,1
146028891473,RETURN,1,,return nullptr;,21,1296,,,1
146028891474,RETURN,1,,return nullptr;,17,1299,,,1
146028891475,RETURN,1,,return nullptr;,13,1309,,,1
146028891476,RETURN,1,,return nullptr;,13,1317,,,1
146028891477,RETURN,1,,return nullptr;,13,1321,,,1
146028891478,RETURN,1,,return nullptr;,13,1328,,,1
146028891479,RETURN,1,,return nullptr;,17,1332,,,1
146028891480,RETURN,1,,return nullptr;,17,1335,,,1
146028891481,RETURN,1,,return nullptr;,9,1339,,,1
146028891482,RETURN,1,,return nullptr;,17,1351,,,1
146028891483,RETURN,-1,,return derefValue ? derefValue : valueExpr;,5,1355,,,26
146028891484,RETURN,-1,,"return isVariableUsage(vartok, mSettings->library, pointer, alloc, indirect);",5,1360,,,1
146028891485,RETURN,1,,return -1;,9,1374,,,1
146028891486,RETURN,1,,return -1;,9,1387,,,1
146028891487,RETURN,1,,return (!pointer || alloc == NO_ALLOC);,9,1390,,,1
146028891488,RETURN,1,,return 1;,21,1403,,,1
146028891489,RETURN,1,,return 1;,21,1405,,,1
146028891490,RETURN,1,,return -1;,25,1411,,,1
146028891491,RETURN,-1,,return 1;,21,1412,,,2
146028891492,RETURN,1,,return 1;,21,1415,,,1
146028891493,RETURN,-1,,return alloc == NO_ALLOC;,13,1420,,,1
146028891494,RETURN,1,,return 1;,17,1424,,,1
146028891495,RETURN,1,,return (isnullbad || hasIndirect) && isuninitbad;,17,1428,,,1
146028891496,RETURN,-1,,return isuninitbad && (!address || isnullbad);,13,1429,,,9
146028891497,RETURN,-1,,return -1;,5,1434,,,14
146028891498,RETURN,-1,,"return CheckUninitVar::isFunctionParUsage(vartok, mSettings->library, pointer, alloc, indirect);",5,1439,,,1
146028891499,RETURN,1,,return true;,13,1446,,,1
146028891500,RETURN,1,,return true;,13,1448,,,1
146028891501,RETURN,1,,return true;,13,1450,,,1
146028891502,RETURN,-1,,return false;,13,1457,,,1
146028891503,RETURN,1,,return true;,13,1459,,,1
146028891504,RETURN,1,,return true;,9,1461,,,1
146028891505,RETURN,1,,return true;,13,1466,,,1
146028891506,RETURN,1,,return false;,25,1490,,,1
146028891507,RETURN,1,,return true;,25,1492,,,1
146028891508,RETURN,1,,return false;,21,1500,,,1
146028891509,RETURN,1,,return false;,17,1504,,,1
146028891510,RETURN,-1,,return true;,9,1506,,,2
146028891511,RETURN,-1,,return false;,5,1508,,,2
146028891512,RETURN,1,,return true;,13,1517,,,1
146028891513,RETURN,1,,return false;,9,1521,,,1
146028891514,RETURN,-1,,"return !parent || !parent->isUnaryOp(""&"");",9,1525,,,3
146028891515,RETURN,1,,return true;,9,1528,,,1
146028891516,RETURN,-1,,return !(lhs && lhs->variable() && lhs->variable()->isReference() && lhs == lhs->variable()->nameToken());,9,1532,,,3
146028891517,RETURN,1,,return true;,9,1541,,,1
146028891518,RETURN,1,,return true;,9,1548,,,1
146028891519,RETURN,-1,,return false;,5,1550,,,8
146028891520,RETURN,1,,return;,9,1561,,,1
146028891521,RETURN,1,,return;,9,1574,,,1
146028891522,RETURN,1,,return;,9,1576,,,1
146028891523,RETURN,-1,,return;,9,1592,,,2
146028891524,RETURN,-1,,"return CheckUninitVar::isVariableUsage(vartok, settings.library, true, CheckUninitVar::Alloc::ARRAY);",5,1699,,,2
146028891525,RETURN,-1,,return CTU::toString(unsafeUsage);,13,1720,,,1
146028891526,RETURN,-1,,"return isVariableUsage(settings, argtok, &value->value);",5,1726,,,1
146028891527,RETURN,1,,return nullptr;,9,1733,,,1
146028891528,RETURN,-1,,return fileInfo;,5,1737,,,7
146028891529,RETURN,1,,return nullptr;,9,1744,,,1
146028891530,RETURN,-1,,return fileInfo;,5,1748,,,7
146028891531,RETURN,1,,return false;,9,1760,,,1
146028891532,RETURN,-1,,return foundErrors;,5,1796,,,11
146028891533,RETURN,-1,,return name;,5,55,,,6
146028891534,RETURN,-1,,return ftok->function() && ftok->function() == Scope::nestedInFunction(ftok->scope());,5,64,,,1
146028891535,RETURN,-1,,return false;,9,317,,,1
146028891536,RETURN,-1,,return false;,9,322,,,1
146028891537,RETURN,-1,,return false;,9,327,,,1
146028891538,RETURN,-1,,return true;,9,331,,,1
146028891539,RETURN,-1,,"return std::find(additionalOperators.cbegin(), additionalOperators.cend(), funcName.substr(operatorPrefix.length())) != additionalOperators.cend();",5,339,,,11
146028891540,RETURN,-1,,return !errors.empty();,5,402,,,10
146028891541,RETURN,-1,,return ret.str();,5,435,,,4
146028891542,RETURN,-1,,return classScope && classScope->getDestructor() != nullptr;,5,53,,,1
146028891543,RETURN,1,,return false;,9,60,,,1
146028891544,RETURN,1,,return defaultReturn;,9,63,,,1
146028891545,RETURN,1,,return true;,9,66,,,1
146028891546,RETURN,-1,,return defaultReturn;,9,71,,,5
146028891547,RETURN,1,,return true;,13,75,,,1
146028891548,RETURN,-1,,return defaultReturn;,9,76,,,9
146028891549,RETURN,-1,,return false;,9,94,,,42
146028891550,RETURN,-1,,return defaultReturn;,5,97,,,5
146028891551,RETURN,-1,,return (!_read && !_write);,13,132,,,1
146028891552,RETURN,-1,,return mVarUsage;,9,151,,,1
146028891553,RETURN,1,,return;,9,191,,,1
146028891554,RETURN,-1,,return;,9,196,,,2
146028891555,RETURN,1,,return &i->second;,13,392,,,1
146028891556,RETURN,-1,,return nullptr;,5,394,,,2
146028891557,RETURN,-1,,return rhsVarTok;,13,403,,,1
146028891558,RETURN,1,,return tok->next();,9,408,,,1
146028891559,RETURN,1,,return tokOld;,21,477,,,1
146028891560,RETURN,1,,return tokOld;,21,483,,,1
146028891561,RETURN,1,,return tokOld;,21,496,,,1
146028891562,RETURN,-1,,return tok;,5,628,,,10
146028891563,RETURN,1,,return false;,13,637,,,1
146028891564,RETURN,-1,,"return (tok->strAt(-1) == ""struct"" || tok->strAt(-2) == ""struct"" || tok->strAt(-1) == ""class"" || tok->strAt(-2) == ""class"" || tok->strAt(-1) == ""union"" || tok->strAt(-2) == ""union"");",13,639,,,1
146028891565,RETURN,-1,,return false;,5,642,,,2
146028891566,RETURN,-1,,return tok && tok->variable() && tok->variable()->nameToken() == tok;,5,647,,,1
146028891567,RETURN,-1,,return tok;,5,655,,,2
146028891568,RETURN,-1,,return tok;,5,670,,,2
146028891569,RETURN,1,,return;,9,677,,,1
146028891570,RETURN,-1,,return s->bodyStart == tok;,17,781,,,1
146028891571,RETURN,-1,,return tok->varId() == var->declarationId();,9,1159,,,1
146028891572,RETURN,1,,return false;,9,1156,,,1
146028891573,RETURN,-1,,"return std::any_of(returns.begin(), returns.end(), [var](const Token* tok) {
        return tok->varId() == var->declarationId();
    });",5,1158,,,4
146028891574,RETURN,1,,return;,9,1166,,,1
146028891575,RETURN,1,,return;,9,1431,,,1
146028891576,RETURN,1,,return;,9,1439,,,1
146028891577,RETURN,1,,return;,9,1447,,,1
146028891578,RETURN,1,,return;,9,1458,,,1
146028891579,RETURN,-1,,return derivedFrom.type == scope.definedType && derivedFrom.access != AccessControl::Private;,17,1499,,,1
146028891580,RETURN,-1,,"return dType && std::any_of(dType->derivedFrom.cbegin(), dType->derivedFrom.cend(), [&](const Type::BaseInfo& derivedFrom) {
                return derivedFrom.type == scope.definedType && derivedFrom.access != AccessControl::Private;
            });",13,1498,,,3
146028891581,RETURN,1,,return;,9,1469,,,1
146028891582,RETURN,-1,,return !isRecordTypeWithoutSideEffects(derivedFrom.type);,9,1678,,,1
146028891583,RETURN,1,,return withoutSideEffects;,9,1626,,,1
146028891584,RETURN,1,,return (withoutSideEffects = false);,9,1630,,,1
146028891585,RETURN,-1,,return withoutSideEffects = false;,21,1649,,,1
146028891586,RETURN,-1,,return withoutSideEffects = false;,25,1656,,,1
146028891587,RETURN,-1,,return withoutSideEffects = false;,25,1661,,,1
146028891588,RETURN,-1,,return withoutSideEffects = false;,25,1666,,,1
146028891589,RETURN,1,,return (withoutSideEffects = false);,13,1673,,,1
146028891590,RETURN,1,,return (withoutSideEffects = false);,9,1680,,,1
146028891591,RETURN,-1,,return withoutSideEffects;,13,1686,,,1
146028891592,RETURN,-1,,return (withoutSideEffects = true);,5,1691,,,10
146028891593,RETURN,1,,return false;,13,1699,,,1
146028891594,RETURN,1,,return false;,13,1702,,,1
146028891595,RETURN,1,,return false;,13,1705,,,1
146028891596,RETURN,-1,,return true;,5,1708,,,4
146028891597,RETURN,-1,,return isEmptyType(bi.type);,13,1724,,,1
146028891598,RETURN,1,,return emptyType;,9,1719,,,1
146028891599,RETURN,-1,,"return (emptyType = std::all_of(type->derivedFrom.cbegin(), type->derivedFrom.cend(), [this](const Type::BaseInfo& bi) {
            return isEmptyType(bi.type);
        }));",9,1723,,,1
146028891600,RETURN,-1,,return (emptyType = false);,5,1729,,,7
146028891601,RETURN,-1,,return false;,9,1737,,,1
146028891602,RETURN,-1,,return false;,13,1743,,,1
146028891603,RETURN,-1,,return false;,17,1755,,,1
146028891604,RETURN,-1,,return false;,21,1761,,,1
146028891605,RETURN,-1,,return false;,17,1781,,,1
146028891606,RETURN,-1,,return false;,13,1804,,,1
146028891607,RETURN,-1,,return !sideEffectReturnFound;,5,1808,,,7
146028891608,RETURN,1,,return;,9,104,,,1
146028891609,RETURN,1,,return;,21,152,,,1
146028891610,RETURN,-1,,"return (s[0] == '\\'') ? s.substr(1, s.size() - 2) : s;",5,121,,,1
146028891611,RETURN,1,,return std::vector<std::string> {};,21,189,,,1
146028891612,RETURN,-1,,return ret;,5,202,,,5
146028891613,RETURN,-1,,return ret;,13,287,,,4
146028891614,RETURN,-1,,return mDeclMap.find(addr) != mDeclMap.end();,13,291,,,1
146028891615,RETURN,-1,,return (it == mDeclMap.end() ? nullptr : it->second.scope);,13,296,,,3
146028891616,RETURN,1,,return;,17,336,,,1
146028891617,RETURN,-1,,return children[c];,13,356,,,2
146028891618,RETURN,-1,,"return (nameIndex < mExtTokens.size()) ? unquote(mExtTokens[nameIndex]) : """";",9,395,,,7
146028891619,RETURN,-1,,"return (nameIndex < mExtTokens.size()) ? unquote(mExtTokens[nameIndex]) : """";",9,403,,,6
146028891620,RETURN,1,,"return """";",13,411,,,1
146028891621,RETURN,1,,"return """";",13,417,,,1
146028891622,RETURN,1,,"return """";",9,421,,,1
146028891623,RETURN,1,,"return """";",9,423,,,1
146028891624,RETURN,1,,"return """";",9,425,,,1
146028891625,RETURN,-1,,return str;,5,426,,,12
146028891626,RETURN,-1,,return unquote(type);,5,447,,,6
146028891627,RETURN,1,,"return """";",9,456,,,1
146028891628,RETURN,-1,,return type;,5,464,,,8
146028891629,RETURN,-1,,"return contains(mExtTokens, ""definition"");",5,469,,,1
146028891630,RETURN,1,,"return """";",9,475,,,1
146028891631,RETURN,-1,,"return templateParameters + "">"";",5,486,,,4
146028891632,RETURN,1,,return false;,9,510,,,1
146028891633,RETURN,1,,return false;,9,514,,,1
146028891634,RETURN,1,,return false;,9,518,,,1
146028891635,RETURN,1,,return false;,9,521,,,1
146028891636,RETURN,-1,,return true;,9,531,,,1
146028891637,RETURN,-1,,return false;,5,534,,,8
146028891638,RETURN,-1,,return tokenList.back();,5,582,,,6
146028891639,RETURN,-1,,"return addTypeTokens(tokenList, str.substr(0, str.find(""\\':\\'"") + 1), scope);",9,588,,,1
146028891640,RETURN,1,,return nullptr;,9,592,,,1
146028891641,RETURN,1,,return nullptr;,13,626,,,1
146028891642,RETURN,-1,,return recordType;,13,634,,,2
146028891643,RETURN,-1,,return nullptr;,5,637,,,11
146028891644,RETURN,1,,return;,9,643,,,1
146028891645,RETURN,1,,return &mData->mSymbolDatabase->scopeList.front();,9,660,,,1
146028891646,RETURN,1,,return tokenList.back()->scope()->nestedIn;,9,662,,,1
146028891647,RETURN,-1,,return tokenList.back()->scope();,5,663,,,3
146028891648,RETURN,-1,,"return createScope(tokenList, scopeType, children2, def);",5,692,,,3
146028891649,RETURN,-1,,return scope;,5,758,,,21
146028891650,RETURN,-1,,return c && c->nodeType == DeclStmt && c->getChild(0)->nodeType == VarDecl;,13,911,,,1
146028891651,RETURN,-1,,return bracket1;,9,772,,,13
146028891652,RETURN,-1,,return binop;,9,780,,,9
146028891653,RETURN,1,,"return addtoken(tokenList, ""break"");",9,783,,,1
146028891654,RETURN,1,,"return addtoken(tokenList, ""\\'\\\\0\\'"");",13,787,,,1
146028891655,RETURN,1,,"return addtoken(tokenList, ""\\'\\\\r\\'"");",13,789,,,1
146028891656,RETURN,1,,"return addtoken(tokenList, ""\\'\\\\n\\'"");",13,791,,,1
146028891657,RETURN,1,,"return addtoken(tokenList, ""\\'\\\\t\\'"");",13,793,,,1
146028891658,RETURN,1,,"return addtoken(tokenList, ""\\'\\\\\\\\\\'"");",13,795,,,1
146028891659,RETURN,-1,,"return addtoken(tokenList, ""\\'\\\\x"" + hex.str() + ""\\'"");",13,799,,,3
146028891660,RETURN,-1,,"return addtoken(tokenList, std::string(""\\'"") + char(c) + std::string(""\\'""));",9,801,,,9
146028891661,RETURN,1,,return createTokensCall(tokenList);,9,804,,,1
146028891662,RETURN,-1,,return nullptr;,9,811,,,8
146028891663,RETURN,-1,,return nullptr;,9,818,,,2
146028891664,RETURN,-1,,return nullptr;,9,822,,,2
146028891665,RETURN,-1,,return tok1;,9,834,,,15
146028891666,RETURN,-1,,return assign;,9,842,,,9
146028891667,RETURN,-1,,return nullptr;,9,850,,,2
146028891668,RETURN,1,,return children.back()->createTokens(tokenList);,9,853,,,1
146028891669,RETURN,1,,"return addtoken(tokenList, ""continue"");",9,855,,,1
146028891670,RETURN,-1,,return par1;,9,863,,,9
146028891671,RETURN,1,,return getChild(0)->createTokens(tokenList);,9,866,,,1
146028891672,RETURN,-1,,return tokenList.back();,9,870,,,3
146028891673,RETURN,1,,return getChild(0)->createTokens(tokenList);,13,874,,,1
146028891674,RETURN,-1,,return par1;,9,882,,,12
146028891675,RETURN,-1,,return nullptr;,9,886,,,2
146028891676,RETURN,-1,,return nullptr;,9,891,,,3
146028891677,RETURN,-1,,return nullptr;,9,895,,,2
146028891678,RETURN,-1,,return nullptr;,9,929,,,29
146028891679,RETURN,1,,return nullptr;,17,934,,,1
146028891680,RETURN,-1,,return nullptr;,9,937,,,3
146028891681,RETURN,1,,return createTokensCall(tokenList);,9,940,,,1
146028891682,RETURN,-1,,return newtok;,13,945,,,2
146028891683,RETURN,-1,,return newtok;,9,958,,,9
146028891684,RETURN,1,,"return addtoken(tokenList, ""nullptr"");",9,961,,,1
146028891685,RETURN,1,,return createTokensCall(tokenList);,9,963,,,1
146028891686,RETURN,-1,,return nullptr;,9,966,,,2
146028891687,RETURN,-1,,return par1;,9,978,,,14
146028891688,RETURN,1,,return getChild(0)->createTokens(tokenList);,9,981,,,1
146028891689,RETURN,1,,return getChild(0)->createTokens(tokenList);,9,983,,,1
146028891690,RETURN,1,,"return addtoken(tokenList, ""this"");",9,985,,,1
146028891691,RETURN,-1,,return t;,9,989,,,4
146028891692,RETURN,-1,,return reftok;,9,999,,,11
146028891693,RETURN,1,,return getChild(0)->createTokens(tokenList);,9,1002,,,1
146028891694,RETURN,-1,,return nullptr;,9,1007,,,4
146028891695,RETURN,-1,,return nullptr;,9,1020,,,15
146028891696,RETURN,-1,,return nameToken;,9,1031,,,12
146028891697,RETURN,1,,return nullptr;,13,1038,,,1
146028891698,RETURN,-1,,return nullptr;,9,1066,,,18
146028891699,RETURN,1,,return getChild(0)->createTokens(tokenList);,9,1069,,,1
146028891700,RETURN,1,,return createTokensVarDecl(tokenList);,9,1071,,,1
146028891701,RETURN,1,,"return addtoken(tokenList, mExtTokens.back());",9,1073,,,1
146028891702,RETURN,-1,,return nullptr;,9,1092,,,26
146028891703,RETURN,-1,,return nullptr;,9,1096,,,2
146028891704,RETURN,-1,,return nullptr;,9,1107,,,4
146028891705,RETURN,-1,,return nullptr;,9,1113,,,4
146028891706,RETURN,-1,,return nullptr;,9,1140,,,17
146028891707,RETURN,-1,,return expr;,9,1146,,,4
146028891708,RETURN,-1,,return start;,9,1162,,,13
146028891709,RETURN,1,,"return addtoken(tokenList, mExtTokens.back());",9,1165,,,1
146028891710,RETURN,-1,,return nullptr;,9,1171,,,4
146028891711,RETURN,1,,return nullptr;,9,1174,,,1
146028891712,RETURN,1,,return getChild(0)->createTokens(tokenList);,9,1176,,,1
146028891713,RETURN,-1,,return dot;,9,1193,,,14
146028891714,RETURN,1,,return nullptr;,13,1197,,,1
146028891715,RETURN,-1,,return nullptr;,9,1205,,,11
146028891716,RETURN,1,,"return addtoken(tokenList, "";"");",9,1208,,,1
146028891717,RETURN,-1,,return expr;,9,1215,,,9
146028891718,RETURN,-1,,return nullptr;,13,1224,,,2
146028891719,RETURN,-1,,return nullptr;,9,1235,,,12
146028891720,RETURN,-1,,return tok1;,9,1243,,,4
146028891721,RETURN,1,,"return addtoken(tokenList, mExtTokens.back());",9,1246,,,1
146028891722,RETURN,-1,,return nullptr;,9,1257,,,14
146028891723,RETURN,-1,,"return addtoken(tokenList, getSpelling());",9,1262,,,3
146028891724,RETURN,-1,,return unop;,9,1270,,,7
146028891725,RETURN,-1,,return par1;,9,1291,,,13
146028891726,RETURN,1,,return createTokensVarDecl(tokenList);,9,1294,,,1
146028891727,RETURN,-1,,return nullptr;,9,1306,,,16
146028891728,RETURN,-1,,"return addtoken(tokenList, ""?"" + nodeType + ""?"");",5,1308,,,66
146028891729,RETURN,-1,,return par1;,5,1349,,,19
146028891730,RETURN,-1,,"return child->nodeType == CXXConstructorDecl ||
            child->nodeType == CXXDestructorDecl ||
            child->nodeType == CXXMethodDecl ||
            child->nodeType == FieldDecl ||
            child->nodeType == VarDecl ||
            child->nodeType == AccessSpecDecl ||
            child->nodeType == TypedefDecl;",13,1499,,,1
146028891731,RETURN,-1,,return eq;,9,1543,,,5
146028891732,RETURN,-1,,return par1;,9,1552,,,9
146028891733,RETURN,-1,,return getChild(0)->createTokens(tokenList);,9,1555,,,1
146028891734,RETURN,-1,,return vartok1;,5,1557,,,25
146028891735,RETURN,-1,,return v * dim.num;,17,1584,,,1
146028891736,RETURN,1,,return stdout_tty;,9,37,,,1
146028891737,RETURN,1,,return stderr_tty;,9,39,,,1
146028891738,RETURN,-1,,return (stdout_tty && stderr_tty);,5,40,,,7
146028891739,RETURN,-1,,return false;,9,50,,,1
146028891740,RETURN,-1,,return true;,9,55,,,1
146028891741,RETURN,-1,,return isStreamATty(os);,5,61,,,7
146028891742,RETURN,1,,"return os << ""\\033["" << static_cast<std::size_t>(c) << ""m"";",9,68,,,1
146028891743,RETURN,-1,,return os;,5,70,,,2
146028891744,RETURN,-1,,return ss.str();,5,77,,,3
146028891745,RETURN,-1,,return mExitCode;,9,147,,,1
146028891746,RETURN,-1,,return;,13,168,,,2
146028891747,RETURN,1,,return;,13,172,,,1
146028891748,RETURN,-1,,return;,13,202,,,2
146028891749,RETURN,1,,return;,13,208,,,1
146028891750,RETURN,1,,return;,13,214,,,1
146028891751,RETURN,1,,"return ""\\"""" + f + ""\\"""";",9,307,,,1
146028891752,RETURN,-1,,return f;,5,308,,,3
146028891753,RETURN,-1,,return ret;,5,331,,,3
146028891754,RETURN,1,,"return AnalyzerInformation::getAnalyzerInfoFile(settings.buildDir, filename, """") + extension;",9,343,,,1
146028891755,RETURN,-1,,return filename + extension;,5,344,,,4
146028891756,RETURN,-1,,"return dumpFile.substr(0, dumpFile.size()-4) + ""ctu-info"";",5,349,,,1
146028891757,RETURN,1,,return;,9,358,,,1
146028891758,RETURN,1,,return;,9,363,,,1
146028891759,RETURN,-1,,return py_exe;,13,424,,,1
146028891760,RETURN,-1,,"return """";",5,427,,,4
146028891761,RETURN,-1,,return addonResult;,5,519,,,19
146028891762,RETURN,-1,,return flags;,5,527,,,3
146028891763,RETURN,-1,,return Version;,5,556,,,1
146028891764,RETURN,-1,,return ExtraVersion;,5,561,,,1
146028891765,RETURN,-1,,return true;,9,609,,,32
146028891766,RETURN,-1,,return false;,5,611,,,3
146028891767,RETURN,-1,,return out;,5,619,,,3
146028891768,RETURN,-1,,return flags;,5,649,,,8
146028891769,RETURN,-1,,return 0;,9,693,,,2
146028891770,RETURN,-1,,return 0;,9,699,,,2
146028891771,RETURN,1,,return 0;,13,711,,,1
146028891772,RETURN,1,,return 0;,13,715,,,1
146028891773,RETURN,-1,,return mLogger->exitcode();,5,764,,,23
146028891774,RETURN,1,,return checkClang(file);,9,770,,,1
146028891775,RETURN,-1,,"return checkFile(file, """");",5,772,,,2
146028891776,RETURN,-1,,"return checkFile(file, """", &iss);",5,778,,,3
146028891777,RETURN,-1,,return returnValue;,9,810,,,7
146028891778,RETURN,-1,,return returnValue;,5,822,,,17
146028891779,RETURN,1,,"return {*fileStream, files, filename, outputList};",9,828,,,1
146028891780,RETURN,-1,,"return {filename, files, outputList};",5,830,,,2
146028891781,RETURN,-1,,"return preprocessor.calculateHash(tokens, toolinfo.str());",5,846,,,11
146028891782,RETURN,-1,,return Preprocessor::hasErrors(output);,13,940,,,1
146028891783,RETURN,1,,return mLogger->exitcode();,9,858,,,1
146028891784,RETURN,-1,,return EXIT_SUCCESS;,13,931,,,3
146028891785,RETURN,-1,,return mLogger->exitcode();,13,957,,,11
146028891786,RETURN,1,,return mLogger->exitcode();,13,963,,,1
146028891787,RETURN,-1,,return mLogger->exitcode();,17,1006,,,3
146028891788,RETURN,-1,,return 0;,13,1032,,,3
146028891789,RETURN,-1,,return mLogger->exitcode();,17,1215,,,2
146028891790,RETURN,-1,,return mLogger->exitcode();,9,1252,,,2
146028891791,RETURN,-1,,return mLogger->exitcode();,5,1283,,,14
146028891792,RETURN,1,,return;,17,1323,,,1
146028891793,RETURN,-1,,return;,17,1336,,,2
146028891794,RETURN,-1,,return;,9,1354,,,1
146028891795,RETURN,1,,return;,9,1672,,,1
146028891796,RETURN,1,,return;,9,1777,,,1
146028891797,RETURN,-1,,return;,9,1787,,,10
146028891798,RETURN,1,,return;,9,1807,,,1
146028891799,RETURN,1,,return;,9,1812,,,1
146028891800,RETURN,1,,return;,9,1848,,,1
146028891801,RETURN,-1,,return;,9,1909,,,2
146028891802,RETURN,-1,,return errors && (mLogger->exitcode() > 0);,5,1990,,,7
146028891803,RETURN,-1,,return mLogger->exitcode();,5,2056,,,14
146028891804,RETURN,1,,return true;,13,2073,,,1
146028891805,RETURN,1,,return true;,9,2076,,,1
146028891806,RETURN,1,,return true;,9,2078,,,1
146028891807,RETURN,-1,,return false;,5,2079,,,4
146028891808,RETURN,-1,,return dumpProlog;,5,2114,,,6
146028891809,RETURN,-1,,return tokenizer.list.file(function->tokenDef) + ':' + std::to_string(function->tokenDef->linenr()) + ':' + std::to_string(function->tokenDef->column());,5,61,,,1
146028891810,RETURN,-1,,return out.str();,5,84,,,4
146028891811,RETURN,-1,,return out.str();,5,96,,,3
146028891812,RETURN,-1,,return out.str();,5,122,,,5
146028891813,RETURN,-1,,return out.str();,5,133,,,3
146028891814,RETURN,-1,,return out.str();,5,148,,,3
146028891815,RETURN,-1,,return ret.str();,5,156,,,3
146028891816,RETURN,-1,,return empty_if_null(value);,5,175,,,4
146028891817,RETURN,-1,,return value;,5,184,,,6
146028891818,RETURN,-1,,return !error;,5,196,,,9
146028891819,RETURN,1,,return false;,9,202,,,1
146028891820,RETURN,-1,,return !error;,5,221,,,14
146028891821,RETURN,1,,return false;,9,227,,,1
146028891822,RETURN,-1,,return !error;,5,231,,,6
146028891823,RETURN,-1,,return ret;,5,257,,,4
146028891824,RETURN,-1,,return ret;,5,279,,,3
146028891825,RETURN,1,,return -1;,9,286,,,1
146028891826,RETURN,-1,,return argnr2;,9,306,,,11
146028891827,RETURN,-1,,return -1;,5,308,,,5
146028891828,RETURN,1,,return nullptr;,25,391,,,1
146028891829,RETURN,1,,return nullptr;,25,394,,,1
146028891830,RETURN,-1,,return argtok;,21,395,,,4
146028891831,RETURN,1,,return nullptr;,25,400,,,1
146028891832,RETURN,-1,,return argtok;,21,401,,,4
146028891833,RETURN,-1,,return fileInfo;,5,441,,,6
146028891834,RETURN,1,,return ret;,9,449,,,1
146028891835,RETURN,1,,return ret;,17,454,,,1
146028891836,RETURN,1,,return ret;,17,459,,,1
146028891837,RETURN,1,,return ret;,13,469,,,1
146028891838,RETURN,-1,,return ret;,9,471,,,7
146028891839,RETURN,-1,,return ret;,5,473,,,6
146028891840,RETURN,-1,,return unsafeUsage;,5,498,,,5
146028891841,RETURN,1,,return false;,9,512,,,1
146028891842,RETURN,1,,return false;,9,516,,,1
146028891843,RETURN,-1,,return true;,13,545,,,5
146028891844,RETURN,-1,,return true;,13,554,,,2
146028891845,RETURN,-1,,return false;,5,558,,,6
146028891846,RETURN,1,,return {};,9,573,,,1
146028891847,RETURN,-1,,return locationList;,5,606,,,15
146028891848,RETURN,-1,,return errmsg;,5,271,,,7
146028891849,RETURN,-1,,return oss;,5,309,,,19
146028891850,RETURN,1,,return;,9,380,,,1
146028891851,RETURN,-1,,return std::string(printer.CStr()) + '>';,5,454,,,15
146028891852,RETURN,-1,,"return xmlVersion == 3 ? ""</results>"" : ""    </errors>\\n</results>"";",5,459,,,1
146028891853,RETURN,-1,,return result;,5,481,,,6
146028891854,RETURN,-1,,return printer.CStr();,5,533,,,18
146028891855,RETURN,-1,,"return line + endl + std::string((column>0 ? column-1 : 0), ' ') + '^';",5,550,,,11
146028891856,RETURN,-1,,return text;,9,635,,,5
146028891857,RETURN,-1,,return result;,5,712,,,18
146028891858,RETURN,-1,,return str;,5,722,,,3
146028891859,RETURN,1,,return Path::toNativeSeparators(mFileName);,9,737,,,1
146028891860,RETURN,-1,,return mFileName;,5,738,,,2
146028891861,RETURN,1,,return Path::toNativeSeparators(mOrigFileName);,9,744,,,1
146028891862,RETURN,-1,,return mOrigFileName;,5,745,,,2
146028891863,RETURN,-1,,return str;,5,763,,,6
146028891864,RETURN,-1,,return xml;,5,797,,,3
146028891865,RETURN,-1,,return ostr.str();,5,816,,,5
146028891866,RETURN,-1,,return ostr.str();,5,827,,,3
146028891867,RETURN,-1,,return plist.str();,5,898,,,7
146028891868,RETURN,1,,return s;,13,908,,,1
146028891869,RETURN,1,,"return s.substr(0,pos1) + to;",13,915,,,1
146028891870,RETURN,-1,,return s;,5,923,,,4
146028891871,RETURN,-1,,"return caseInsensitiveStringCompare(i.guideline, guideline) == 0;",13,944,,,1
146028891872,RETURN,1,,"return """";",13,947,,,1
146028891873,RETURN,-1,,return it->classification;,9,948,,,4
146028891874,RETURN,-1,,return i.a == a && i.b == b;,17,969,,,1
146028891875,RETURN,-1,,return i.a == a && i.b == b && i.c == c;,17,999,,,1
146028891876,RETURN,1,,"return """";",9,940,,,1
146028891877,RETURN,-1,,"return getClassification(checkers::autosarInfo, guideline);",9,953,,,3
146028891878,RETURN,-1,,"return getClassification(checkers::certCInfo, guideline);",9,955,,,6
146028891879,RETURN,-1,,"return getClassification(checkers::certCppInfo, guideline);",9,957,,,9
146028891880,RETURN,1,,"return """";",13,962,,,1
146028891881,RETURN,1,,"return """";",13,973,,,1
146028891882,RETURN,-1,,return it->str;,9,975,,,13
146028891883,RETURN,1,,"return """";",13,992,,,1
146028891884,RETURN,1,,"return """";",13,1003,,,1
146028891885,RETURN,-1,,return it->classification;,9,1005,,,16
146028891886,RETURN,-1,,"return """";",9,1008,,,19
146028891887,RETURN,1,,return guideline;,9,1052,,,1
146028891888,RETURN,1,,return it->second;,9,1057,,,1
146028891889,RETURN,1,,return it->second;,13,1063,,,1
146028891890,RETURN,-1,,"return """";",5,1066,,,8
146028891891,RETURN,-1,,return guidelineMapping;,5,1112,,,11
146028891892,RETURN,-1,,"return ""internalAstError"";",9,27,,,3
146028891893,RETURN,-1,,"return ""syntaxError"";",9,29,,,6
146028891894,RETURN,-1,,"return ""unknownMacro"";",9,31,,,9
146028891895,RETURN,-1,,"return ""internalError"";",9,33,,,12
146028891896,RETURN,-1,,"return ""cppcheckLimit"";",9,35,,,15
146028891897,RETURN,-1,,"return ""instantiationError"";",9,37,,,18
146028891898,RETURN,-1,,"return """";",9,54,,,3
146028891899,RETURN,-1,,"return ""error"";",9,56,,,6
146028891900,RETURN,-1,,"return ""warning"";",9,58,,,9
146028891901,RETURN,-1,,"return ""style"";",9,60,,,12
146028891902,RETURN,-1,,"return ""performance"";",9,62,,,15
146028891903,RETURN,-1,,"return ""portability"";",9,64,,,18
146028891904,RETURN,-1,,"return ""information"";",9,66,,,21
146028891905,RETURN,-1,,"return ""debug"";",9,68,,,24
146028891906,RETURN,-1,,"return ""internal"";",9,70,,,27
146028891907,RETURN,1,,return Severity::none;,9,79,,,1
146028891908,RETURN,1,,return Severity::none;,9,81,,,1
146028891909,RETURN,1,,return Severity::error;,9,83,,,1
146028891910,RETURN,1,,return Severity::warning;,9,85,,,1
146028891911,RETURN,1,,return Severity::style;,9,87,,,1
146028891912,RETURN,1,,return Severity::performance;,9,89,,,1
146028891913,RETURN,1,,return Severity::portability;,9,91,,,1
146028891914,RETURN,1,,return Severity::information;,9,93,,,1
146028891915,RETURN,1,,return Severity::debug;,9,95,,,1
146028891916,RETURN,1,,return Severity::internal;,9,97,,,1
146028891917,RETURN,-1,,return Severity::none;,5,98,,,11
146028891918,RETURN,1,,return true;,17,38,,,1
146028891919,RETURN,1,,return true;,17,48,,,1
146028891920,RETURN,1,,return true;,25,58,,,1
146028891921,RETURN,1,,return true;,25,60,,,1
146028891922,RETURN,1,,return true;,21,67,,,1
146028891923,RETURN,1,,return true;,21,69,,,1
146028891924,RETURN,1,,return true;,25,87,,,1
146028891925,RETURN,1,,return true;,17,101,,,1
146028891926,RETURN,-1,,return false;,5,120,,,2
146028891927,RETURN,-1,,"return ::findTokensSkipDeadCodeImpl(library, start, end, pred, found, evaluate, skipUnevaluated);",9,132,,,1
146028891928,RETURN,-1,,"return ::findTokensSkipDeadCodeImpl(library, start, end, pred, found, evaluate, skipUnevaluated);",9,143,,,1
146028891929,RETURN,-1,,return escape || escapeUnknown;,17,79,,,1
146028891930,RETURN,-1,,return escape && !escapeUnknown;,17,82,,,1
146028891931,RETURN,-1,,return action.isModified() && !isConclusiveEscape();,17,85,,,1
146028891932,RETURN,-1,,return action.isInconclusive() && !isConclusiveEscape();,17,88,,,1
146028891933,RETURN,-1,,return action.isModified() || action.isInconclusive() || isEscape();,17,91,,,1
146028891934,RETURN,-1,,return tok->isIncompleteVar();,17,103,,,1
146028891935,RETURN,-1,,return x != 0;,17,115,,,1
146028891936,RETURN,-1,,return x == 0;,17,118,,,1
146028891937,RETURN,-1,,return update(tok2);,17,251,,,1
146028891938,RETURN,-1,,return update(tok2);,17,258,,,1
146028891939,RETURN,1,,return Break();,21,268,,,1
146028891940,RETURN,-1,,return Progress::Continue;,17,269,,,3
146028891941,RETURN,-1,,"return isVariableChanged(tok, 0, settings);",17,396,,,1
146028891942,RETURN,-1,,return Progress::Break;,13,67,,,2
146028891943,RETURN,-1,,return actions.isModified();,13,97,,,2
146028891944,RETURN,1,,return true;,17,105,,,1
146028891945,RETURN,-1,,return analyzer->stopOnCondition(condTok);,13,106,,,2
146028891946,RETURN,1,,"return std::make_pair(false, false);",17,111,,,1
146028891947,RETURN,-1,,"return std::make_pair(checkThen, checkElse);",13,120,,,8
146028891948,RETURN,-1,,"return evalCond(tok, ctx).first;",13,124,,,1
146028891949,RETURN,1,,return Break(Analyzer::Terminate::Bail);,17,130,,,1
146028891950,RETURN,-1,,return Break(Analyzer::Terminate::Bail);,17,134,,,2
146028891951,RETURN,1,,return Break(Analyzer::Terminate::Escape);,21,138,,,1
146028891952,RETURN,-1,,return Break(Analyzer::Terminate::Escape);,17,145,,,3
146028891953,RETURN,-1,,return Break(Analyzer::Terminate::Escape);,17,149,,,2
146028891954,RETURN,-1,,return Progress::Skip;,17,153,,,2
146028891955,RETURN,1,,return Break();,21,156,,,1
146028891956,RETURN,-1,,return Progress::Skip;,17,159,,,3
146028891957,RETURN,1,,return Break(Analyzer::Terminate::Bail);,21,163,,,1
146028891958,RETURN,1,,return Break();,21,172,,,1
146028891959,RETURN,-1,,return Progress::Continue;,13,174,,,4
146028891960,RETURN,1,,return Progress::Continue;,17,180,,,1
146028891961,RETURN,1,,return Progress::Skip;,17,182,,,1
146028891962,RETURN,1,,return Break();,17,192,,,1
146028891963,RETURN,1,,return Break();,17,195,,,1
146028891964,RETURN,1,,return Break();,17,197,,,1
146028891965,RETURN,1,,return Break();,17,199,,,1
146028891966,RETURN,-1,,return Progress::Continue;,13,200,,,14
146028891967,RETURN,-1,,return Progress::Continue;,25,212,,,1
146028891968,RETURN,1,,return Break();,25,219,,,1
146028891969,RETURN,1,,return Break();,25,221,,,1
146028891970,RETURN,1,,return Progress::Continue;,25,224,,,1
146028891971,RETURN,1,,return Progress::Continue;,25,226,,,1
146028891972,RETURN,1,,return Break();,25,228,,,1
146028891973,RETURN,-1,,return Progress::Continue;,13,231,,,2
146028891974,RETURN,1,,return Break(Analyzer::Terminate::Inconclusive);,17,240,,,1
146028891975,RETURN,1,,return Break(Analyzer::Terminate::Modified);,17,242,,,1
146028891976,RETURN,1,,return Break(Analyzer::Terminate::Modified);,17,245,,,1
146028891977,RETURN,-1,,return Progress::Continue;,13,246,,,8
146028891978,RETURN,-1,,"return traverseTok(tok, f, false, out);",13,253,,,3
146028891979,RETURN,-1,,"return traverseRecursive(tok, f, false);",13,260,,,3
146028891980,RETURN,-1,,return result;,13,272,,,6
146028891981,RETURN,1,,return action;,21,280,,,1
146028891982,RETURN,-1,,return result;,13,283,,,4
146028891983,RETURN,-1,,return ft;,13,293,,,5
146028891984,RETURN,-1,,return {std::move(ft)};,17,299,,,3
146028891985,RETURN,-1,,return std::vector<ForwardTraversal> {};,13,301,,,2
146028891986,RETURN,-1,,return result;,13,308,,,4
146028891987,RETURN,-1,,"return Token::findsimplematch(endBlock->link(), ""goto"", endBlock);",13,312,,,1
146028891988,RETURN,-1,,"return Token::findmatch(endBlock->link(), ""goto|break"", endBlock);",13,316,,,1
146028891989,RETURN,1,,return true;,25,325,,,1
146028891990,RETURN,-1,,return false;,13,328,,,2
146028891991,RETURN,-1,,return r;,13,336,,,6
146028891992,RETURN,-1,,"return analyzeRange(endBlock->link(), endBlock);",13,340,,,1
146028891993,RETURN,-1,,return a;,13,346,,,4
146028891994,RETURN,-1,,return a;,13,351,,,3
146028891995,RETURN,-1,,return bail;,13,377,,,9
146028891996,RETURN,1,,return true;,17,382,,,1
146028891997,RETURN,1,,return true;,17,384,,,1
146028891998,RETURN,1,,return true;,17,400,,,1
146028891999,RETURN,-1,,return ft.isConditionTrue(condTok) && bodyChangesCond;,13,403,,,16
146028892000,RETURN,1,,return Break();,17,412,,,1
146028892001,RETURN,1,,return Break();,17,414,,,1
146028892002,RETURN,1,,return Break();,17,416,,,1
146028892003,RETURN,-1,,return Progress::Continue;,13,417,,,7
146028892004,RETURN,1,,return Break();,17,427,,,1
146028892005,RETURN,1,,return Break(Analyzer::Terminate::Bail);,25,437,,,1
146028892006,RETURN,1,,return Break(Analyzer::Terminate::Conditional);,25,439,,,1
146028892007,RETURN,-1,,return Progress::Continue;,17,441,,,2
146028892008,RETURN,1,,return Break();,21,458,,,1
146028892009,RETURN,-1,,return updateRecursive(condTok);,17,459,,,2
146028892010,RETURN,1,,return Break(Analyzer::Terminate::Bail);,21,463,,,1
146028892011,RETURN,1,,return Break(Analyzer::Terminate::Bail);,21,466,,,1
146028892012,RETURN,1,,return Break();,25,472,,,1
146028892013,RETURN,1,,return Break(Analyzer::Terminate::Conditional);,17,475,,,1
146028892014,RETURN,1,,return Progress::Continue;,17,478,,,1
146028892015,RETURN,1,,return Break();,21,484,,,1
146028892016,RETURN,1,,return Break(Analyzer::Terminate::Bail);,21,487,,,1
146028892017,RETURN,1,,return Break(Analyzer::Terminate::Bail);,21,489,,,1
146028892018,RETURN,1,,return Break(Analyzer::Terminate::Bail);,25,503,,,1
146028892019,RETURN,1,,return Break(Analyzer::Terminate::Conditional);,25,505,,,1
146028892020,RETURN,1,,return Break(Analyzer::Terminate::Bail);,21,515,,,1
146028892021,RETURN,1,,return Progress::Break;,21,518,,,1
146028892022,RETURN,1,,return Break(Analyzer::Terminate::Bail);,21,520,,,1
146028892023,RETURN,-1,,return Progress::Continue;,13,522,,,24
146028892024,RETURN,-1,,"return updateLoop(endToken, endBlock, condTok, initTok, stepTok, true);",13,530,,,1
146028892025,RETURN,1,,return Break();,17,536,,,1
146028892026,RETURN,-1,,"return updateRange(endBlock->link(), endBlock, depth);",13,543,,,7
146028892027,RETURN,1,,return Break(Analyzer::Terminate::Bail);,17,548,,,1
146028892028,RETURN,1,,return Break();,25,572,,,1
146028892029,RETURN,1,,return Break();,25,575,,,1
146028892030,RETURN,-1,,return Break(Analyzer::Terminate::Bail);,21,579,,,1
146028892031,RETURN,1,,return Break(Analyzer::Terminate::Bail);,29,589,,,1
146028892032,RETURN,1,,return Break();,29,591,,,1
146028892033,RETURN,1,,return Break();,25,596,,,1
146028892034,RETURN,1,,return Break(Analyzer::Terminate::Escape);,25,599,,,1
146028892035,RETURN,1,,return Break(Analyzer::Terminate::Bail);,25,601,,,1
146028892036,RETURN,1,,return Break();,25,604,,,1
146028892037,RETURN,1,,return Break(Analyzer::Terminate::Bail);,25,607,,,1
146028892038,RETURN,1,,return Break();,29,616,,,1
146028892039,RETURN,1,,return Break(Analyzer::Terminate::Bail);,33,619,,,1
146028892040,RETURN,-1,,return Break();,29,621,,,1
146028892041,RETURN,1,,return Break();,37,630,,,1
146028892042,RETURN,1,,return Break();,37,632,,,1
146028892043,RETURN,1,,return Break();,37,638,,,1
146028892044,RETURN,1,,return Break(Analyzer::Terminate::Bail);,29,647,,,1
146028892045,RETURN,-1,,return Break();,25,649,,,1
146028892046,RETURN,-1,,return Break(Analyzer::Terminate::Bail);,25,656,,,2
146028892047,RETURN,1,,return Break();,25,663,,,1
146028892048,RETURN,1,,return Break();,33,669,,,1
146028892049,RETURN,1,,return Break();,33,678,,,1
146028892050,RETURN,1,,return Break();,33,683,,,1
146028892051,RETURN,1,,return Break();,29,689,,,1
146028892052,RETURN,1,,return Break(Analyzer::Terminate::Conditional);,29,695,,,1
146028892053,RETURN,1,,return Break();,33,704,,,1
146028892054,RETURN,1,,return Break();,37,717,,,1
146028892055,RETURN,1,,return Break(Analyzer::Terminate::Bail);,29,732,,,1
146028892056,RETURN,1,,return Break(Analyzer::Terminate::Modified);,33,735,,,1
146028892057,RETURN,1,,return Break(Analyzer::Terminate::Escape);,33,737,,,1
146028892058,RETURN,-1,,return Break(Analyzer::Terminate::Bail);,29,738,,,3
146028892059,RETURN,1,,return Break(Analyzer::Terminate::Bail);,37,744,,,1
146028892060,RETURN,-1,,return Break();,33,746,,,1
146028892061,RETURN,1,,return Break(Analyzer::Terminate::Conditional);,37,749,,,1
146028892062,RETURN,1,,return Break(Analyzer::Terminate::Bail);,33,755,,,1
146028892063,RETURN,1,,return Break(Analyzer::Terminate::Conditional);,33,758,,,1
146028892064,RETURN,1,,return Break(Analyzer::Terminate::Bail);,33,760,,,1
146028892065,RETURN,-1,,return Break();,25,772,,,3
146028892066,RETURN,1,,return Break();,29,778,,,1
146028892067,RETURN,1,,return Break();,25,785,,,1
146028892068,RETURN,1,,return Break();,25,791,,,1
146028892069,RETURN,1,,return Break();,25,801,,,1
146028892070,RETURN,1,,return Break();,25,806,,,1
146028892071,RETURN,-1,,return Break();,21,808,,,3
146028892072,RETURN,1,,return Break();,25,812,,,1
146028892073,RETURN,1,,return Break();,25,816,,,1
146028892074,RETURN,1,,return Break();,25,818,,,1
146028892075,RETURN,1,,return Break();,25,821,,,1
146028892076,RETURN,1,,return Break();,25,824,,,1
146028892077,RETURN,1,,return Progress::Continue;,29,829,,,1
146028892078,RETURN,-1,,return Progress::Continue;,13,836,,,5
146028892079,RETURN,1,,return false;,17,848,,,1
146028892080,RETURN,1,,return false;,17,850,,,1
146028892081,RETURN,1,,return false;,17,852,,,1
146028892082,RETURN,1,,return false;,17,854,,,1
146028892083,RETURN,1,,return false;,17,856,,,1
146028892084,RETURN,-1,,"return Token::Match(tok->previous(), ""%name%|)|]|>"");",13,857,,,6
146028892085,RETURN,1,,return tok->astParent();,21,863,,,1
146028892086,RETURN,-1,,return nullptr;,13,866,,,2
146028892087,RETURN,1,,return tok;,17,879,,,1
146028892088,RETURN,-1,,return nullptr;,13,880,,,3
146028892089,RETURN,1,,return nullptr;,17,885,,,1
146028892090,RETURN,1,,return tok->tokAt(dest->index() - tok->index());,17,888,,,1
146028892091,RETURN,-1,,return nullptr;,13,889,,,5
146028892092,RETURN,1,,return nullptr;,17,894,,,1
146028892093,RETURN,1,,return nullptr;,17,897,,,1
146028892094,RETURN,-1,,return getStepTok(end->link());,13,898,,,5
146028892095,RETURN,1,,"return Analyzer::Result{Analyzer::Action::None, Analyzer::Terminate::Bail};",9,906,,,1
146028892096,RETURN,-1,,"return Analyzer::Result{ ft.actions, ft.terminate };",5,911,,,6
146028892097,RETURN,1,,"return Analyzer::Result{Analyzer::Action::None, Analyzer::Terminate::Bail};",9,919,,,1
146028892098,RETURN,-1,,"return Analyzer::Result{ ft.actions, ft.terminate };",5,922,,,6
146028892099,RETURN,1,,return false;,13,38,,,1
146028892100,RETURN,1,,return false;,17,45,,,1
146028892101,RETURN,1,,return false;,17,50,,,1
146028892102,RETURN,1,,return false;,17,52,,,1
146028892103,RETURN,-1,,return true;,5,55,,,2
146028892104,RETURN,1,,return false;,9,61,,,1
146028892105,RETURN,1,,return true;,9,64,,,1
146028892106,RETURN,-1,,return hasFunctionCall(tok->astOperand1()) || hasFunctionCall(tok->astOperand2());,5,65,,,3
146028892107,RETURN,1,,return false;,9,71,,,1
146028892108,RETURN,1,,return true;,9,73,,,1
146028892109,RETURN,-1,,return hasGccCompoundStatement(tok->astOperand1()) || hasGccCompoundStatement(tok->astOperand2());,5,74,,,3
146028892110,RETURN,-1,,return !var || (!var->isLocal() && !var->isArgument()) || (deref && var->isArgument() && var->isPointer()) || var->isStatic() || var->isReference() || var->isExtern();,5,79,,,1
146028892111,RETURN,-1,,return ret ? ChildrenToVisit::none : ChildrenToVisit::op1_and_op2;,9,91,,,2
146028892112,RETURN,-1,,return ret;,5,93,,,4
146028892113,RETURN,1,,return Result(Result::Type::BAILOUT);,9,100,,,1
146028892114,RETURN,-1,,return Result(Result::Type::BAILOUT);,13,105,,,1
146028892115,RETURN,-1,,"return Result(Result::Type::BREAK, tok);",13,109,,,1
146028892116,RETURN,1,,return Result(Result::Type::BAILOUT);,13,113,,,1
146028892117,RETURN,1,,return result;,17,119,,,1
146028892118,RETURN,1,,return Result(Result::Type::BAILOUT);,13,125,,,1
146028892119,RETURN,1,,return lambdaResult;,17,131,,,1
146028892120,RETURN,1,,return result;,17,145,,,1
146028892121,RETURN,1,,return Result(Result::Type::BAILOUT);,21,150,,,1
146028892122,RETURN,-1,,return Result(Result::Type::RETURN);,17,152,,,2
146028892123,RETURN,1,,return Result(Result::Type::BAILOUT);,25,181,,,1
146028892124,RETURN,1,,return result;,21,187,,,1
146028892125,RETURN,1,,return Result(Result::Type::BAILOUT);,13,195,,,1
146028892126,RETURN,1,,return Result(Result::Type::BAILOUT);,17,211,,,1
146028892127,RETURN,1,,return Result(Result::Type::BAILOUT);,17,215,,,1
146028892128,RETURN,1,,return Result(Result::Type::BAILOUT);,17,219,,,1
146028892129,RETURN,1,,return result;,25,231,,,1
146028892130,RETURN,1,,return result;,25,236,,,1
146028892131,RETURN,1,,return Result(Result::Type::BAILOUT);,17,241,,,1
146028892132,RETURN,1,,return Result(Result::Type::BAILOUT);,17,245,,,1
146028892133,RETURN,1,,return Result(Result::Type::BAILOUT);,17,249,,,1
146028892134,RETURN,1,,return Result(Result::Type::BAILOUT);,17,253,,,1
146028892135,RETURN,-1,,return Result(Result::Type::BAILOUT);,13,258,,,1
146028892136,RETURN,1,,return Result(Result::Type::BAILOUT);,13,268,,,1
146028892137,RETURN,1,,return Result(Result::Type::BAILOUT);,13,271,,,1
146028892138,RETURN,-1,,return Result(Result::Type::READ);,17,297,,,1
146028892139,RETURN,-1,,return Result(Result::Type::BAILOUT);,21,304,,,1
146028892140,RETURN,1,,return Result(Result::Type::READ);,25,308,,,1
146028892141,RETURN,1,,return Result(Result::Type::BAILOUT);,25,314,,,1
146028892142,RETURN,1,,return Result(Result::Type::BAILOUT);,21,319,,,1
146028892143,RETURN,1,,"return Result(Result::Type::WRITE, parent->astParent());",21,323,,,1
146028892144,RETURN,-1,,return Result(Result::Type::READ);,17,324,,,10
146028892145,RETURN,1,,return Result(Result::Type::BAILOUT);,33,336,,,1
146028892146,RETURN,-1,,"return Result(Result::Type::WRITE, parent->astParent());",29,337,,,2
146028892147,RETURN,-1,,return Result(Result::Type::READ);,21,340,,,3
146028892148,RETURN,1,,return Result(Result::Type::READ);,21,343,,,1
146028892149,RETURN,1,,"return Result(Result::Type::BAILOUT, parent->astParent());",21,348,,,1
146028892150,RETURN,1,,"return Result(Result::Type::BAILOUT, parent->astParent());",21,350,,,1
146028892151,RETURN,-1,,"return Result(Result::Type::BAILOUT, parent->astParent());",17,368,,,5
146028892152,RETURN,-1,,"return Result(Result::Type::BAILOUT, parent->astParent());",13,371,,,14
146028892153,RETURN,1,,return Result(Result::Type::BAILOUT);,17,377,,,1
146028892154,RETURN,1,,return result1;,17,380,,,1
146028892155,RETURN,1,,return result1;,17,382,,,1
146028892156,RETURN,1,,return result2;,25,390,,,1
146028892157,RETURN,1,,return result2;,21,399,,,1
146028892158,RETURN,1,,return result1;,21,401,,,1
146028892159,RETURN,-1,,return Result(Result::Type::NONE);,5,409,,,3
146028892160,RETURN,1,,return ChildrenToVisit::op1;,13,421,,,1
146028892161,RETURN,-1,,return ChildrenToVisit::none;,13,425,,,2
146028892162,RETURN,1,,return ChildrenToVisit::none;,21,432,,,1
146028892163,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,9,437,,,4
146028892164,RETURN,-1,,return exprVarIds;,5,443,,,9
146028892165,RETURN,1,,return Result(FwdAnalysis::Result::Type::BAILOUT);,9,454,,,1
146028892166,RETURN,1,,return Result(FwdAnalysis::Result::Type::BAILOUT);,9,462,,,1
146028892167,RETURN,-1,,return result;,5,474,,,13
146028892168,RETURN,1,,return false;,9,480,,,1
146028892169,RETURN,1,,return true;,9,482,,,1
146028892170,RETURN,-1,,"return hasOperand(tok->astOperand1(), lhs) || hasOperand(tok->astOperand2(), lhs);",5,483,,,3
146028892171,RETURN,1,,return nullptr;,9,489,,,1
146028892172,RETURN,-1,,return result.type == FwdAnalysis::Result::Type::WRITE ? result.token : nullptr;,5,492,,,5
146028892173,RETURN,1,,return false;,9,498,,,1
146028892174,RETURN,1,,return false;,9,500,,,1
146028892175,RETURN,1,,return false;,9,502,,,1
146028892176,RETURN,-1,,"return (result.type == FwdAnalysis::Result::Type::NONE || result.type == FwdAnalysis::Result::Type::RETURN) && !possiblyAliased(expr, startToken);",5,505,,,7
146028892177,RETURN,1,,return true;,9,511,,,1
146028892178,RETURN,1,,return true;,9,513,,,1
146028892179,RETURN,1,,return true;,9,515,,,1
146028892180,RETURN,1,,return true;,29,534,,,1
146028892181,RETURN,1,,return true;,17,557,,,1
146028892182,RETURN,-1,,return false;,5,560,,,11
146028892183,RETURN,1,,return true;,17,573,,,1
146028892184,RETURN,1,,return true;,17,575,,,1
146028892185,RETURN,-1,,return false;,5,579,,,2
146028892186,RETURN,1,,return false;,9,143,,,1
146028892187,RETURN,-1,,return true;,5,145,,,7
146028892188,RETURN,1,,return ImportProject::Type::MISSING;,9,188,,,1
146028892189,RETURN,-1,,return ImportProject::Type::COMPILE_DB;,13,200,,,2
146028892190,RETURN,-1,,return ImportProject::Type::VS_SLN;,13,205,,,2
146028892191,RETURN,-1,,return ImportProject::Type::VS_VCXPROJ;,13,212,,,2
146028892192,RETURN,-1,,return ImportProject::Type::BORLAND;,13,217,,,2
146028892193,RETURN,-1,,return ImportProject::Type::CPPCHECK_GUI;,13,222,,,2
146028892194,RETURN,-1,,return ImportProject::Type::UNKNOWN;,9,225,,,1
146028892195,RETURN,-1,,return ImportProject::Type::FAILURE;,5,227,,,9
146028892196,RETURN,1,,"return ret + ""\\\\\\"""";",21,244,,,1
146028892197,RETURN,-1,,return ret;,5,254,,,9
146028892198,RETURN,-1,,return out;,5,272,,,5
146028892199,RETURN,-1,,return false;,9,354,,,2
146028892200,RETURN,-1,,return false;,17,381,,,2
146028892201,RETURN,-1,,return false;,17,388,,,2
146028892202,RETURN,-1,,return false;,13,392,,,2
146028892203,RETURN,-1,,return false;,13,420,,,2
146028892204,RETURN,-1,,return true;,5,429,,,5
146028892205,RETURN,-1,,return false;,9,438,,,2
146028892206,RETURN,-1,,return false;,13,445,,,2
146028892207,RETURN,-1,,return false;,13,470,,,2
146028892208,RETURN,-1,,return false;,9,477,,,2
146028892209,RETURN,-1,,return true;,5,480,,,11
146028892210,RETURN,1,,return true;,17,572,,,1
146028892211,RETURN,1,,return ('\\'' + p.configuration + '\\'') == tok->astOperand2()->str();,25,602,,,1
146028892212,RETURN,1,,return true;,21,605,,,1
146028892213,RETURN,-1,,return false;,13,607,,,15
146028892214,RETURN,-1,,return ret;,5,631,,,7
146028892215,RETURN,1,,return;,9,674,,,1
146028892216,RETURN,1,,return;,9,682,,,1
146028892217,RETURN,1,,return;,9,685,,,1
146028892218,RETURN,-1,,return c == p.configuration;,21,829,,,1
146028892219,RETURN,-1,,return false;,9,728,,,2
146028892220,RETURN,-1,,return false;,9,733,,,2
146028892221,RETURN,-1,,return false;,33,789,,,2
146028892222,RETURN,-1,,return false;,33,795,,,2
146028892223,RETURN,-1,,return true;,5,874,,,20
146028892224,RETURN,-1,,return filename == e.pathToProjectFile;,9,880,,,1
146028892225,RETURN,-1,,return *iterator;,9,884,,,1
146028892226,RETURN,-1,,return result;,9,894,,,2
146028892227,RETURN,-1,,return result;,9,899,,,2
146028892228,RETURN,-1,,return result;,25,917,,,2
146028892229,RETURN,-1,,return result;,5,936,,,18
146028892230,RETURN,-1,,return false;,9,945,,,2
146028892231,RETURN,-1,,return false;,9,950,,,2
146028892232,RETURN,-1,,return true;,5,1203,,,29
146028892233,RETURN,1,,return path1 + path2;,9,1209,,,1
146028892234,RETURN,-1,,return path2;,5,1210,,,2
146028892235,RETURN,-1,,return ret;,5,1223,,,3
146028892236,RETURN,-1,,return ret;,5,1232,,,3
146028892237,RETURN,-1,,"return std::string(std::istreambuf_iterator<char>(istr), eos);",5,1238,,,2
146028892238,RETURN,-1,,return false;,9,1248,,,2
146028892239,RETURN,-1,,return false;,9,1253,,,2
146028892240,RETURN,-1,,return false;,21,1367,,,2
146028892241,RETURN,-1,,return false;,13,1390,,,2
146028892242,RETURN,-1,,return true;,5,1419,,,37
146028892243,RETURN,-1,,"return std::list<std::string>(mAllVSConfigs.cbegin(), mAllVSConfigs.cend());",5,1477,,,1
146028892244,RETURN,1,,return;,9,1483,,,1
146028892245,RETURN,-1,,return Path::isFile(file);,5,1499,,,1
146028892246,RETURN,-1,,"return compare(x.intvalue, y.intvalue);",17,43,,,1
146028892247,RETURN,-1,,return result;,5,48,,,4
146028892248,RETURN,-1,,return true;,17,152,,,1
146028892249,RETURN,-1,,"return b == calculate(op, i, 0);",17,232,,,1
146028892250,RETURN,-1,,return true;,17,75,,,2
146028892251,RETURN,-1,,return false;,13,77,,,2
146028892252,RETURN,-1,,return true;,17,85,,,2
146028892253,RETURN,-1,,return false;,13,87,,,2
146028892254,RETURN,-1,,return minvalue.size() == 1 && minvalue == maxvalue;,13,91,,,1
146028892255,RETURN,-1,,return minvalue.empty() && maxvalue.empty();,13,95,,,1
146028892256,RETURN,-1,,return empty() || isScalar();,13,99,,,1
146028892257,RETURN,-1,,return minvalue.front();,13,105,,,2
146028892258,RETURN,1,,"return merge(minRef, maxRef);",17,112,,,1
146028892259,RETURN,-1,,return minRef;,13,113,,,3
146028892260,RETURN,-1,,return result;,13,121,,,4
146028892261,RETURN,1,,"return Interval::fromInt(minValue->intvalue, minValue);",21,136,,,1
146028892262,RETURN,-1,,return result;,13,146,,,8
146028892263,RETURN,-1,,"return Interval::fromValues(values, [](const ValueFlow::Value&) {
                return true;
            });",13,151,,,1
146028892264,RETURN,1,,return {};,17,162,,,1
146028892265,RETURN,1,,return {};,17,164,,,1
146028892266,RETURN,-1,,"return {f(x.front(), y.front())};",13,165,,,3
146028892267,RETURN,-1,,return x;,13,172,,,2
146028892268,RETURN,-1,,return result;,13,184,,,6
146028892269,RETURN,1,,return {};,17,192,,,1
146028892270,RETURN,1,,return {};,17,194,,,1
146028892271,RETURN,-1,,return {lhs.minvalue == rhs.minvalue};,13,197,,,4
146028892272,RETURN,1,,return {1};,17,206,,,1
146028892273,RETURN,1,,return {-1};,17,208,,,1
146028892274,RETURN,1,,"return {1, -1};",21,212,,,1
146028892275,RETURN,-1,,return {0};,17,213,,,2
146028892276,RETURN,1,,"return {0, 1};",17,216,,,1
146028892277,RETURN,1,,"return {0, -1};",17,218,,,1
146028892278,RETURN,-1,,return {};,13,219,,,10
146028892279,RETURN,1,,return {};,17,229,,,1
146028892280,RETURN,1,,return {b};,17,234,,,1
146028892281,RETURN,-1,,return {};,13,235,,,7
146028892282,RETURN,-1,,return locations.insert(e.first).second;,13,250,,,1
146028892283,RETURN,-1,,return locations.insert(e.first).second;,13,256,,,1
146028892284,RETURN,-1,,return value.isImpossible() && value.intvalue == x;,9,282,,,1
146028892285,RETURN,-1,,"return std::any_of(values.cbegin(), values.cend(), [&](const ValueFlow::Value& value) {
        return value.isImpossible() && value.intvalue == x;
    });",5,281,,,1
146028892286,RETURN,-1,,return !model->match(value);,9,293,,,1
146028892287,RETURN,1,,return result;,9,297,,,1
146028892288,RETURN,1,,return result;,9,300,,,1
146028892289,RETURN,-1,,return result;,5,360,,,13
146028892290,RETURN,-1,,"return infer(model, op, {model->yield(lhs)}, std::move(rhsValues));",5,368,,,1
146028892291,RETURN,-1,,"return infer(model, op, std::move(lhsValues), {model->yield(rhs)});",5,376,,,1
146028892292,RETURN,-1,,return model->match(v);,9,382,,,1
146028892293,RETURN,-1,,"return Interval::fromValues(values, [&](const ValueFlow::Value& v) {
        return model->match(v);
    }).minvalue;",5,381,,,1
146028892294,RETURN,-1,,return model->match(v);,9,388,,,1
146028892295,RETURN,-1,,"return Interval::fromValues(values, [&](const ValueFlow::Value& v) {
        return model->match(v);
    }).maxvalue;",5,387,,,1
146028892296,RETURN,-1,,return value.isIntValue();,13,395,,,1
146028892297,RETURN,-1,,return result;,13,402,,,5
146028892298,RETURN,-1,,return IntegralInferModel{};,5,409,,,1
146028892299,RETURN,1,,return ValueFlow::Value{};,9,415,,,1
146028892300,RETURN,1,,return ValueFlow::Value{};,9,417,,,1
146028892301,RETURN,1,,return r.front();,9,420,,,1
146028892302,RETURN,-1,,return ValueFlow::Value{};,5,421,,,6
146028892303,RETURN,-1,,return c89_keywords_all;,9,175,,,3
146028892304,RETURN,-1,,return c99_keywords_all;,9,177,,,6
146028892305,RETURN,-1,,return c11_keywords_all;,9,179,,,9
146028892306,RETURN,-1,,return c17_keywords_all;,9,181,,,12
146028892307,RETURN,-1,,return c23_keywords_all;,9,183,,,15
146028892308,RETURN,-1,,return cpp03_keywords_all;,9,193,,,3
146028892309,RETURN,-1,,return cpp11_keywords_all;,9,195,,,6
146028892310,RETURN,-1,,return cpp14_keywords_all;,9,197,,,9
146028892311,RETURN,-1,,return cpp17_keywords_all;,9,199,,,12
146028892312,RETURN,-1,,return cpp20_keywords_all;,9,201,,,15
146028892313,RETURN,-1,,return cpp23_keywords_all;,9,203,,,18
146028892314,RETURN,-1,,return cpp26_keywords_all;,9,205,,,21
146028892315,RETURN,-1,,return c89_keywords;,9,216,,,3
146028892316,RETURN,-1,,return c99_keywords;,9,218,,,6
146028892317,RETURN,-1,,return c11_keywords;,9,220,,,9
146028892318,RETURN,-1,,return c17_keywords;,9,222,,,12
146028892319,RETURN,-1,,return c23_keywords;,9,224,,,15
146028892320,RETURN,-1,,return cpp03_keywords;,9,235,,,3
146028892321,RETURN,-1,,return cpp11_keywords;,9,237,,,6
146028892322,RETURN,-1,,return cpp14_keywords;,9,239,,,9
146028892323,RETURN,-1,,return cpp17_keywords;,9,241,,,12
146028892324,RETURN,-1,,return cpp20_keywords;,9,243,,,15
146028892325,RETURN,-1,,return cpp23_keywords;,9,245,,,18
146028892326,RETURN,-1,,return cpp26_keywords;,9,247,,,21
146028892327,RETURN,-1,,return (it != mPlatformTypes.end()) ? &(it->second) : nullptr;,13,50,,,3
146028892328,RETURN,-1,,return (mPrefixes.find(prefix) != mPrefixes.end());,13,64,,,1
146028892329,RETURN,-1,,return (mSuffixes.find(suffix) != mSuffixes.end());,13,67,,,1
146028892330,RETURN,-1,,return mStart;,13,92,,,1
146028892331,RETURN,-1,,return mEnd;,13,95,,,1
146028892332,RETURN,-1,,return mOffset;,13,98,,,1
146028892333,RETURN,-1,,return mBlocks.find(blockName) != mBlocks.end();,13,101,,,1
146028892334,RETURN,1,,return *this;,9,161,,,1
146028892335,RETURN,-1,,return *this;,5,164,,,3
146028892336,RETURN,-1,,return ret;,5,175,,,4
146028892337,RETURN,-1,,return err;,13,249,,,4
146028892338,RETURN,-1,,return Error(ErrorCode::OK);,9,252,,,2
146028892339,RETURN,1,,return Error(ErrorCode::FILE_NOT_FOUND);,9,259,,,1
146028892340,RETURN,-1,,return Error(ErrorCode::BAD_XML);,5,262,,,14
146028892341,RETURN,1,,return Container::Yield::AT_INDEX;,9,268,,,1
146028892342,RETURN,1,,return Container::Yield::ITEM;,9,270,,,1
146028892343,RETURN,1,,return Container::Yield::BUFFER;,9,272,,,1
146028892344,RETURN,1,,return Container::Yield::BUFFER_NT;,9,274,,,1
146028892345,RETURN,1,,return Container::Yield::START_ITERATOR;,9,276,,,1
146028892346,RETURN,1,,return Container::Yield::END_ITERATOR;,9,278,,,1
146028892347,RETURN,1,,return Container::Yield::ITERATOR;,9,280,,,1
146028892348,RETURN,1,,return Container::Yield::SIZE;,9,282,,,1
146028892349,RETURN,1,,return Container::Yield::EMPTY;,9,284,,,1
146028892350,RETURN,-1,,return Container::Yield::NO_YIELD;,5,285,,,10
146028892351,RETURN,1,,return Container::Action::RESIZE;,9,290,,,1
146028892352,RETURN,1,,return Container::Action::CLEAR;,9,292,,,1
146028892353,RETURN,1,,return Container::Action::PUSH;,9,294,,,1
146028892354,RETURN,1,,return Container::Action::POP;,9,296,,,1
146028892355,RETURN,1,,return Container::Action::FIND;,9,298,,,1
146028892356,RETURN,1,,return Container::Action::FIND_CONST;,9,300,,,1
146028892357,RETURN,1,,return Container::Action::INSERT;,9,302,,,1
146028892358,RETURN,1,,return Container::Action::ERASE;,9,304,,,1
146028892359,RETURN,1,,return Container::Action::APPEND;,9,306,,,1
146028892360,RETURN,1,,return Container::Action::CHANGE_CONTENT;,9,308,,,1
146028892361,RETURN,1,,return Container::Action::CHANGE_INTERNAL;,9,310,,,1
146028892362,RETURN,1,,return Container::Action::CHANGE;,9,312,,,1
146028892363,RETURN,-1,,return Container::Action::NO_ACTION;,5,313,,,13
146028892364,RETURN,-1,,return Error(ErrorCode::BAD_XML);,9,322,,,2
146028892365,RETURN,1,,"return Error(ErrorCode::UNSUPPORTED_FORMAT, rootnode->Name());",9,326,,,1
146028892366,RETURN,1,,return Error(ErrorCode::UNSUPPORTED_FORMAT);,9,331,,,1
146028892367,RETURN,1,,"return Error(ErrorCode::BAD_ATTRIBUTE_VALUE, bufferSize);",29,386,,,1
146028892368,RETURN,1,,"return Error(ErrorCode::BAD_ATTRIBUTE_VALUE, bufferSize);",29,396,,,1
146028892369,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""name"");",17,422,,,1
146028892370,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""value"");",17,425,,,1
146028892371,RETURN,1,,"return Error(ErrorCode::DUPLICATE_DEFINE, name);",17,428,,,1
146028892372,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""name"");",17,434,,,1
146028892373,RETURN,1,,return err;,21,438,,,1
146028892374,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""arg"");",21,451,,,1
146028892375,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""ext"");",17,460,,,1
146028892376,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""name"");",33,473,,,1
146028892377,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""prefix"");",29,489,,,1
146028892378,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""id"");",17,546,,,1
146028892379,RETURN,1,,"return Error(ErrorCode::BAD_ATTRIBUTE_VALUE, inherits);",21,556,,,1
146028892380,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""name"");",29,593,,,1
146028892381,RETURN,1,,"return Error(ErrorCode::BAD_ATTRIBUTE_VALUE, actionName);",33,601,,,1
146028892382,RETURN,1,,"return Error(ErrorCode::BAD_ATTRIBUTE_VALUE, yieldName);",33,610,,,1
146028892383,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""class-name"");",17,666,,,1
146028892384,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""name"");",17,698,,,1
146028892385,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""name"");",17,729,,,1
146028892386,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""value"");",17,732,,,1
146028892387,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""type"");",25,741,,,1
146028892388,RETURN,1,,"return Error(ErrorCode::DUPLICATE_PLATFORM_TYPE, type_name);",25,762,,,1
146028892389,RETURN,-1,,"return Error(ErrorCode::PLATFORM_TYPE_REDEFINED, type_name);",21,763,,,2
146028892390,RETURN,1,,"return Error(ErrorCode::DUPLICATE_PLATFORM_TYPE, type_name);",29,771,,,1
146028892391,RETURN,-1,,"return Error(ErrorCode::PLATFORM_TYPE_REDEFINED, type_name);",25,772,,,2
146028892392,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""name"");",17,782,,,1
146028892393,RETURN,-1,,"return Error(ErrorCode::UNKNOWN_ELEMENT, str);",9,796,,,3
146028892394,RETURN,-1,,return Error(ErrorCode::OK);,5,798,,,11
146028892395,RETURN,1,,return Error(ErrorCode::OK);,9,804,,,1
146028892396,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""nr"");",17,856,,,1
146028892397,RETURN,1,,"return Error(ErrorCode::BAD_ATTRIBUTE_VALUE, (!p ? ""\\""\\"""" : p));",25,901,,,1
146028892398,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""type"");",25,908,,,1
146028892399,RETURN,1,,"return Error(ErrorCode::BAD_ATTRIBUTE_VALUE, typeattr);",25,922,,,1
146028892400,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""value"");",29,927,,,1
146028892401,RETURN,-1,,"return Error(ErrorCode::BAD_ATTRIBUTE_VALUE, valueattr);",29,932,,,1
146028892402,RETURN,1,,"return Error(ErrorCode::BAD_ATTRIBUTE_VALUE, valueattr);",29,935,,,1
146028892403,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""arg"");",29,941,,,1
146028892404,RETURN,1,,"return Error(ErrorCode::BAD_ATTRIBUTE_VALUE, argattr);",29,943,,,1
146028892405,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""arg2"");",33,950,,,1
146028892406,RETURN,1,,"return Error(ErrorCode::BAD_ATTRIBUTE_VALUE, arg2attr);",33,952,,,1
146028892407,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""severity"");",17,986,,,1
146028892408,RETURN,1,,"return Error(ErrorCode::BAD_ATTRIBUTE_VALUE, cstd);",21,992,,,1
146028892409,RETURN,1,,"return Error(ErrorCode::BAD_ATTRIBUTE_VALUE, cppstd);",21,999,,,1
146028892410,RETURN,1,,"return Error(ErrorCode::MISSING_ATTRIBUTE, ""\\""reason\\"" and \\""alternatives\\"" or some text."");",21,1021,,,1
146028892411,RETURN,1,,"return Error(ErrorCode::BAD_ATTRIBUTE_VALUE, actionName);",21,1034,,,1
146028892412,RETURN,1,,"return Error(ErrorCode::BAD_ATTRIBUTE_VALUE, yieldName);",21,1044,,,1
146028892413,RETURN,-1,,return Error(ErrorCode::OK);,5,1054,,,5
146028892414,RETURN,1,,return true;,9,1061,,,1
146028892415,RETURN,1,,"return isFloatArgValid(ftok, argnr, static_cast<double>(argvalue));",9,1063,,,1
146028892416,RETURN,1,,return true;,13,1068,,,1
146028892417,RETURN,1,,return true;,13,1070,,,1
146028892418,RETURN,1,,return true;,13,1072,,,1
146028892419,RETURN,1,,return true;,13,1074,,,1
146028892420,RETURN,-1,,return false;,5,1076,,,9
146028892421,RETURN,1,,return true;,9,1083,,,1
146028892422,RETURN,1,,return true;,13,1088,,,1
146028892423,RETURN,1,,return true;,13,1090,,,1
146028892424,RETURN,1,,return true;,13,1092,,,1
146028892425,RETURN,1,,return true;,13,1094,,,1
146028892426,RETURN,1,,"return MathLib::isNotEqual(tok->strAt(1), MathLib::toString(argvalue));",13,1096,,,1
146028892427,RETURN,-1,,return false;,5,1098,,,8
146028892428,RETURN,-1,,"return """";",9,1105,,,2
146028892429,RETURN,1,,return ftok->str();,13,1109,,,1
146028892430,RETURN,1,,return name;,21,1125,,,1
146028892431,RETURN,-1,,return ftok->str();,9,1128,,,3
146028892432,RETURN,1,,"return getFunctionName(ftok->astOperand1(), error);",13,1132,,,1
146028892433,RETURN,-1,,"return getFunctionName(ftok->astOperand1(),error) + ""::"" + getFunctionName(ftok->astOperand2(),error);",9,1133,,,2
146028892434,RETURN,-1,,"return """";",13,1139,,,2
146028892435,RETURN,-1,,"return type + ""::"" + getFunctionName(ftok->astOperand2(),error);",9,1142,,,4
146028892436,RETURN,-1,,"return """";",5,1145,,,6
146028892437,RETURN,1,,"return """";",9,1151,,,1
146028892438,RETURN,1,,return {};,13,1159,,,1
146028892439,RETURN,-1,,return ret;,9,1162,,,9
146028892440,RETURN,1,,"return """";",9,1167,,,1
146028892441,RETURN,1,,return ftok->str();,9,1169,,,1
146028892442,RETURN,-1,,return ret;,5,1176,,,9
146028892443,RETURN,1,,return true;,13,1187,,,1
146028892444,RETURN,-1,,return arg && arg->notnull;,5,1189,,,4
146028892445,RETURN,1,,return true;,13,1200,,,1
146028892446,RETURN,-1,,return arg && arg->notuninit >= indirect;,5,1204,,,5
146028892447,RETURN,1,,return nullptr;,9,1214,,,1
146028892448,RETURN,-1,,"return isNotLibraryFunction(tok) && mData->mFunctions.find(funcname) != mData->mFunctions.end() ? nullptr : getAllocDealloc(mData->mAlloc, funcname);",5,1216,,,5
146028892449,RETURN,1,,return nullptr;,9,1225,,,1
146028892450,RETURN,-1,,"return isNotLibraryFunction(tok) && mData->mFunctions.find(funcname) != mData->mFunctions.end() ? nullptr : getAllocDealloc(mData->mDealloc, funcname);",5,1227,,,5
146028892451,RETURN,1,,return nullptr;,9,1236,,,1
146028892452,RETURN,-1,,"return isNotLibraryFunction(tok) && mData->mFunctions.find(funcname) != mData->mFunctions.end() ? nullptr : getAllocDealloc(mData->mRealloc, funcname);",5,1238,,,5
146028892453,RETURN,-1,,return (af && af->arg == arg) ? af->groupId : 0;,5,1245,,,3
146028892454,RETURN,-1,,return (af && af->arg == arg) ? af->groupId : 0;,5,1252,,,3
146028892455,RETURN,-1,,return (af && af->arg == arg) ? af->groupId : 0;,5,1259,,,3
146028892456,RETURN,1,,return nullptr;,9,1267,,,1
146028892457,RETURN,1,,return &it2->second;,9,1270,,,1
146028892458,RETURN,1,,return &it3->second;,9,1273,,,1
146028892459,RETURN,-1,,return nullptr;,5,1274,,,10
146028892460,RETURN,1,,return isnoreturn(lastTop->astOperand1()->previous());,13,1287,,,1
146028892461,RETURN,1,,return false;,9,1291,,,1
146028892462,RETURN,1,,return true;,9,1295,,,1
146028892463,RETURN,-1,,return false;,9,1304,,,1
146028892464,RETURN,1,,return false;,13,1308,,,1
146028892465,RETURN,1,,return true;,13,1310,,,1
146028892466,RETURN,-1,,return true;,13,1314,,,2
146028892467,RETURN,-1,,return false;,5,1317,,,11
146028892468,RETURN,-1,,return mData->mContainers;,5,1323,,,1
146028892469,RETURN,1,,return nullptr;,9,1329,,,1
146028892470,RETURN,-1,,return &container;,13,1353,,,3
146028892471,RETURN,-1,,return &container;,13,1366,,,2
146028892472,RETURN,-1,,return &container;,13,1371,,,2
146028892473,RETURN,-1,,return nullptr;,5,1374,,,6
146028892474,RETURN,-1,,"return detectContainerInternal(typeStart, ContainerOnly);",5,1379,,,1
146028892475,RETURN,-1,,"return detectContainerInternal(typeStart, IteratorOnly);",5,1384,,,1
146028892476,RETURN,-1,,return c;,5,1393,,,5
146028892477,RETURN,1,,return false;,9,1399,,,1
146028892478,RETURN,-1,,return tok->astOperand2() && y == container->getYield(tok->astOperand2()->str());,21,1405,,,1
146028892479,RETURN,-1,,"return Token::simpleMatch(cond, ""( )"") && cond->strAt(-1) == fallback;",17,1408,,,1
146028892480,RETURN,-1,,return false;,5,1412,,,3
146028892481,RETURN,1,,return container->getYield(tok->astOperand2()->str());,25,1423,,,1
146028892482,RETURN,-1,,return Library::Container::Yield::NO_YIELD;,5,1428,,,2
146028892483,RETURN,1,,return true;,9,1435,,,1
146028892484,RETURN,1,,return true;,9,1438,,,1
146028892485,RETURN,1,,return true;,9,1442,,,1
146028892486,RETURN,-1,,"return !matchArguments(ftok, getFunctionName(ftok), func);",5,1444,,,4
146028892487,RETURN,1,,return false;,9,1450,,,1
146028892488,RETURN,1,,return false;,9,1453,,,1
146028892489,RETURN,-1,,return b;,13,1466,,,4
146028892490,RETURN,-1,,return b;,5,1472,,,15
146028892491,RETURN,-1,,return mData->mFunctionwarn;,5,1477,,,1
146028892492,RETURN,1,,return nullptr;,9,1483,,,1
146028892493,RETURN,1,,return nullptr;,9,1486,,,1
146028892494,RETURN,-1,,return &i->second;,5,1487,,,5
146028892495,RETURN,1,,return false;,9,1493,,,1
146028892496,RETURN,1,,return false;,13,1530,,,1
146028892497,RETURN,-1,,return !error;,5,1532,,,12
146028892498,RETURN,1,,return false;,9,1538,,,1
146028892499,RETURN,1,,return it->second.formatstr;,9,1542,,,1
146028892500,RETURN,-1,,return false;,5,1543,,,5
146028892501,RETURN,-1,,return a.second.formatstr;,9,1550,,,1
146028892502,RETURN,-1,,return it == argumentChecksFunc.cend() ? -1 : it->first - 1;,5,1552,,,5
146028892503,RETURN,-1,,return mData->mFunctions.at(getFunctionName(ftok)).formatstr_scan;,5,1557,,,1
146028892504,RETURN,-1,,return mData->mFunctions.at(getFunctionName(ftok)).formatstr_secure;,5,1562,,,1
146028892505,RETURN,1,,return nullptr;,9,1568,,,1
146028892506,RETURN,-1,,return (it != mData->mNonOverlappingData.cend()) ? &it->second : nullptr;,5,1570,,,4
146028892507,RETURN,1,,return Library::UseRetValType::DEFAULT;,17,1583,,,1
146028892508,RETURN,-1,,return Library::UseRetValType::NONE;,9,1585,,,2
146028892509,RETURN,1,,return it->second.useretval;,9,1589,,,1
146028892510,RETURN,-1,,return Library::UseRetValType::NONE;,5,1590,,,5
146028892511,RETURN,1,,return mEmptyString;,9,1596,,,1
146028892512,RETURN,-1,,return it != mData->mReturnValue.cend() ? it->second : mEmptyString;,5,1598,,,4
146028892513,RETURN,1,,return mEmptyString;,9,1606,,,1
146028892514,RETURN,1,,return contTok->valueType()->container->getReturnType(ftok->str());,17,1611,,,1
146028892515,RETURN,-1,,return mEmptyString;,9,1613,,,2
146028892516,RETURN,-1,,return it != mData->mReturnValueType.cend() ? it->second : mEmptyString;,5,1616,,,6
146028892517,RETURN,1,,return -1;,9,1622,,,1
146028892518,RETURN,-1,,return it != mData->mReturnValueContainer.cend() ? it->second : -1;,5,1624,,,4
146028892519,RETURN,1,,return std::vector<MathLib::bigint>();,9,1630,,,1
146028892520,RETURN,-1,,return (it == mData->mUnknownReturnValues.cend()) ? std::vector<MathLib::bigint>() : it->second;,5,1632,,,4
146028892521,RETURN,1,,return nullptr;,9,1638,,,1
146028892522,RETURN,1,,return nullptr;,9,1641,,,1
146028892523,RETURN,-1,,return &it1->second;,5,1642,,,5
146028892524,RETURN,-1,,return !a.second.minsizes.empty();,9,1654,,,1
146028892525,RETURN,1,,return false;,9,1649,,,1
146028892526,RETURN,1,,return false;,9,1652,,,1
146028892527,RETURN,-1,,"return std::any_of(it->second.argumentChecks.cbegin(), it->second.argumentChecks.cend(), [](const std::pair<const int, Library::ArgumentChecks>& a) {
        return !a.second.minsizes.empty();
    });",5,1653,,,5
146028892528,RETURN,1,,return ArgumentChecks::Direction::DIR_UNKNOWN;,13,1663,,,1
146028892529,RETURN,-1,,return arg->direction[indirect];,9,1664,,,2
146028892530,RETURN,1,,return ArgumentChecks::Direction::DIR_OUT;,17,1670,,,1
146028892531,RETURN,-1,,return ArgumentChecks::Direction::DIR_IN;,13,1671,,,2
146028892532,RETURN,-1,,return ArgumentChecks::Direction::DIR_UNKNOWN;,5,1674,,,5
146028892533,RETURN,1,,return it->second.ignore;,9,1681,,,1
146028892534,RETURN,-1,,return false;,5,1682,,,4
146028892535,RETURN,-1,,return mData->mFunctions;,5,1686,,,1
146028892536,RETURN,1,,return it->second.use;,9,1692,,,1
146028892537,RETURN,-1,,return false;,5,1693,,,4
146028892538,RETURN,1,,return it->second.leakignore;,9,1699,,,1
146028892539,RETURN,-1,,return false;,5,1700,,,4
146028892540,RETURN,1,,return pure ? it->second.ispure : it->second.isconst;,9,1706,,,1
146028892541,RETURN,-1,,return false;,5,1707,,,4
146028892542,RETURN,1,,return true;,9,1712,,,1
146028892543,RETURN,1,,return true;,17,1718,,,1
146028892544,RETURN,-1,,return false;,9,1720,,,2
146028892545,RETURN,-1,,return (it != mData->mFunctions.cend() && it->second.isconst);,5,1723,,,5
146028892546,RETURN,1,,return true;,9,1729,,,1
146028892547,RETURN,1,,return true;,9,1731,,,1
146028892548,RETURN,1,,return false;,17,1737,,,1
146028892549,RETURN,-1,,return false;,9,1739,,,2
146028892550,RETURN,1,,return false;,9,1743,,,1
146028892551,RETURN,1,,return true;,9,1745,,,1
146028892552,RETURN,-1,,return it->second == LibraryData::FalseTrueMaybe::True;,5,1746,,,8
146028892553,RETURN,1,,return false;,9,1752,,,1
146028892554,RETURN,1,,return hasAnyTypeCheck(getFunctionName(ftok));,9,1754,,,1
146028892555,RETURN,1,,return false;,9,1757,,,1
146028892556,RETURN,1,,return false;,9,1759,,,1
146028892557,RETURN,-1,,return it->second == LibraryData::FalseTrueMaybe::False;,5,1760,,,7
146028892558,RETURN,-1,,return mData->mMarkupExtensions.find(Path::getFilenameExtensionInLowerCase(path)) != mData->mMarkupExtensions.end();,5,1765,,,1
146028892559,RETURN,-1,,return (it == mData->mProcessAfterCode.cend() || it->second);,5,1771,,,3
146028892560,RETURN,-1,,return (it == mData->mReportErrors.cend() || it->second);,5,1777,,,3
146028892561,RETURN,-1,,return (it != mData->mExecutableBlocks.cend() && it->second.isBlock(token));,5,1783,,,3
146028892562,RETURN,-1,,return offset;,5,1795,,,6
146028892563,RETURN,-1,,return map_it->second.start();,9,1804,,,1
146028892564,RETURN,-1,,return mEmptyString;,5,1806,,,4
146028892565,RETURN,-1,,return map_it->second.end();,9,1815,,,1
146028892566,RETURN,-1,,return mEmptyString;,5,1817,,,4
146028892567,RETURN,-1,,return (it != mData->mKeywords.end() && it->second.count(keyword));,5,1824,,,3
146028892568,RETURN,-1,,return (it != mData->mImporters.end() && it->second.count(importer) > 0);,5,1831,,,3
146028892569,RETURN,1,,return nullptr;,9,1837,,,1
146028892570,RETURN,1,,return nullptr;,13,1841,,,1
146028892571,RETURN,1,,return containerTok;,13,1844,,,1
146028892572,RETURN,1,,return containerTok;,13,1846,,,1
146028892573,RETURN,1,,return containerTok;,13,1848,,,1
146028892574,RETURN,-1,,return tok->astOperand2();,17,1852,,,1
146028892575,RETURN,-1,,return nullptr;,5,1856,,,3
146028892576,RETURN,1,,return nullptr;,9,1863,,,1
146028892577,RETURN,1,,return nullptr;,13,1867,,,1
146028892578,RETURN,1,,return containerTok;,13,1870,,,1
146028892579,RETURN,1,,return containerTok;,13,1872,,,1
146028892580,RETURN,-1,,return tok->astOperand2();,17,1876,,,1
146028892581,RETURN,-1,,return nullptr;,5,1880,,,3
146028892582,RETURN,-1,,return mData->mSmartPointers;,5,1885,,,1
146028892583,RETURN,-1,,return detectSmartPointer(tok);,5,1890,,,1
146028892584,RETURN,1,,return nullptr;,9,1896,,,1
146028892585,RETURN,1,,return nullptr;,9,1910,,,1
146028892586,RETURN,-1,,return &it->second;,5,1911,,,10
146028892587,RETURN,1,,return nullptr;,9,1917,,,1
146028892588,RETURN,-1,,return getLibraryContainer(v.tokvalue);,13,1926,,,3
146028892589,RETURN,1,,return nullptr;,9,1930,,,1
146028892590,RETURN,-1,,return tok->valueType()->container;,5,1931,,,4
146028892591,RETURN,-1,,return it == mData->mTypeChecks.end() ? TypeCheck::def : it->second;,5,1937,,,3
146028892592,RETURN,-1,,return tc.first.second == typeName;,9,1943,,,1
146028892593,RETURN,-1,,"return std::any_of(mData->mTypeChecks.begin(), mData->mTypeChecks.end(), [&](const std::pair<std::pair<std::string, std::string>, Library::TypeCheck>& tc) {
        return tc.first.second == typeName;
    });",5,1942,,,1
146028892594,RETURN,-1,,"return getAllocDealloc(mData->mAlloc, name);",5,1949,,,1
146028892595,RETURN,-1,,"return getAllocDealloc(mData->mDealloc, name);",5,1954,,,1
146028892596,RETURN,-1,,return af ? af->groupId : 0;,5,1961,,,3
146028892597,RETURN,-1,,return af ? af->groupId : 0;,5,1967,,,3
146028892598,RETURN,-1,,return mData->mMarkupExtensions;,5,1972,,,1
146028892599,RETURN,-1,,return mData->mExporters.find(prefix) != mData->mExporters.end();,5,1977,,,1
146028892600,RETURN,-1,,return (it != mData->mExporters.end() && it->second.isPrefix(token));,5,1983,,,3
146028892601,RETURN,-1,,return (it != mData->mExporters.end() && it->second.isSuffix(token));,5,1989,,,3
146028892602,RETURN,-1,,return mData->mReflection.find(token) != mData->mReflection.end();,5,1994,,,1
146028892603,RETURN,1,,return it->second;,9,2001,,,1
146028892604,RETURN,-1,,return -1;,5,2002,,,4
146028892605,RETURN,-1,,"return func == ""main"" || mData->mEntrypoints.find(func) != mData->mEntrypoints.end();",5,2007,,,1
146028892606,RETURN,-1,,return mData->mDefines;,5,2012,,,1
146028892607,RETURN,-1,,return (it != mData->mPodTypes.end()) ? &(it->second) : nullptr;,5,2018,,,3
146028892608,RETURN,1,,return type;,13,2027,,,1
146028892609,RETURN,-1,,return (it2 != mData->mPlatformTypes.end()) ? &(it2->second) : nullptr;,5,2031,,,6
146028892610,RETURN,-1,,return;,9,46,,,3
146028892611,RETURN,1,,"return ""nan.0"";",13,80,,,1
146028892612,RETURN,1,,"return (mDoubleValue > 0) ? ""inf.0"" : ""-inf.0"";",13,82,,,1
146028892613,RETURN,-1,,"return ret.substr(0, pos+1);",9,95,,,11
146028892614,RETURN,-1,,return ostr.str();,5,106,,,5
146028892615,RETURN,-1,,return temp;,5,223,,,5
146028892616,RETURN,1,,return -1;,13,234,,,1
146028892617,RETURN,1,,return 1;,13,236,,,1
146028892618,RETURN,-1,,return 0;,9,237,,,3
146028892619,RETURN,1,,return -1;,13,242,,,1
146028892620,RETURN,1,,return 1;,13,244,,,1
146028892621,RETURN,-1,,return 0;,9,245,,,3
146028892622,RETURN,1,,return -1;,9,249,,,1
146028892623,RETURN,1,,return 1;,9,251,,,1
146028892624,RETURN,-1,,return 0;,5,252,,,8
146028892625,RETURN,-1,,return temp;,5,262,,,4
146028892626,RETURN,-1,,return ret;,9,271,,,1
146028892627,RETURN,-1,,return ret;,5,274,,,6
146028892628,RETURN,-1,,return ret;,9,283,,,1
146028892629,RETURN,-1,,return ret;,5,286,,,6
146028892630,RETURN,-1,,"return toBigUNumber(tok->str(), tok);",5,291,,,1
146028892631,RETURN,-1,,return ret;,13,301,,,3
146028892632,RETURN,-1,,return ret;,13,313,,,3
146028892633,RETURN,-1,,return ret;,9,333,,,5
146028892634,RETURN,1,,return std::numeric_limits<biguint>::max();,13,342,,,1
146028892635,RETURN,-1,,return static_cast<biguint>(static_cast<bigint>(doubleval));,9,344,,,4
146028892636,RETURN,1,,return simplecpp::characterLiteralToLL(str);,9,348,,,1
146028892637,RETURN,-1,,return ret;,9,358,,,6
146028892638,RETURN,-1,,return (v << 8) | c;,9,369,,,1
146028892639,RETURN,-1,,"return std::accumulate(str.cbegin(), str.cend(), uint32_t(), [](uint32_t v, char c) {
        return (v << 8) | c;
    });",5,368,,,1
146028892640,RETURN,-1,,"return toBigNumber(tok->str(), tok);",5,375,,,1
146028892641,RETURN,-1,,return (bigint)ret;,13,385,,,3
146028892642,RETURN,-1,,return ret;,13,397,,,3
146028892643,RETURN,-1,,return ret;,9,417,,,5
146028892644,RETURN,1,,return std::numeric_limits<bigint>::max();,13,426,,,1
146028892645,RETURN,1,,return std::numeric_limits<bigint>::min();,13,428,,,1
146028892646,RETURN,-1,,return static_cast<bigint>(doubleval);,9,429,,,5
146028892647,RETURN,1,,return simplecpp::characterLiteralToLL(str);,9,433,,,1
146028892648,RETURN,-1,,return ret;,9,443,,,6
146028892649,RETURN,1,,return 10 + std::tolower(c) - 'a';,13,474,,,1
146028892650,RETURN,-1,,return c - '0';,9,475,,,2
146028892651,RETURN,1,,return 0.;,9,469,,,1
146028892652,RETURN,-1,,return positivesign ? result : -result;,5,483,,,14
146028892653,RETURN,-1,,return factor1 * factor2;,5,495,,,11
146028892654,RETURN,-1,,"return toDoubleNumber(tok->str(), tok);",5,500,,,1
146028892655,RETURN,-1,,return simplecpp::characterLiteralToLL(str);,13,507,,,1
146028892656,RETURN,1,,"return static_cast<double>(toBigNumber(str, tok));",9,513,,,1
146028892657,RETURN,1,,return floatHexToDoubleNumber(str);,9,521,,,1
146028892658,RETURN,1,,return ret;,13,531,,,1
146028892659,RETURN,-1,,return ret;,5,535,,,11
146028892660,RETURN,-1,,return std::to_string(value);,5,545,,,1
146028892661,RETURN,-1,,return std::to_string(value);,5,556,,,1
146028892662,RETURN,1,,"return ""0.0"";",9,567,,,1
146028892663,RETURN,1,,"return s + "".0"";",9,569,,,1
146028892664,RETURN,-1,,return s;,5,570,,,8
146028892665,RETURN,-1,,return isDecimalFloat(str) || isFloatHex(str);,5,575,,,1
146028892666,RETURN,1,,return false;,9,581,,,1
146028892667,RETURN,1,,return false;,17,596,,,1
146028892668,RETURN,1,,return false;,17,602,,,1
146028892669,RETURN,1,,return false;,17,610,,,1
146028892670,RETURN,1,,return false;,17,624,,,1
146028892671,RETURN,1,,return false;,17,636,,,1
146028892672,RETURN,1,,return false;,17,644,,,1
146028892673,RETURN,1,,return false;,17,648,,,1
146028892674,RETURN,1,,return false;,17,658,,,1
146028892675,RETURN,-1,,return false;,13,666,,,41
146028892676,RETURN,-1,,return false;,13,668,,,44
146028892677,RETURN,-1,,return (state==State::BASE_DIGITS2 || state==State::MANTISSA_DIGITS || state==State::TRAILING_DECIMAL || state==State::SUFFIX_F || state==State::SUFFIX_L || (state==State::SUFFIX_LITERAL));,5,671,,,8
146028892678,RETURN,1,,return false;,9,677,,,1
146028892679,RETURN,-1,,return (str[0] == '-');,5,678,,,2
146028892680,RETURN,1,,return false;,9,684,,,1
146028892681,RETURN,-1,,return !MathLib::isNegative(str);,5,685,,,2
146028892682,RETURN,1,,return false;,17,705,,,1
146028892683,RETURN,1,,return false;,17,715,,,1
146028892684,RETURN,1,,return false;,17,721,,,1
146028892685,RETURN,1,,return false;,17,729,,,1
146028892686,RETURN,-1,,return false;,13,732,,,19
146028892687,RETURN,1,,return false;,17,737,,,1
146028892688,RETURN,1,,return false;,17,743,,,1
146028892689,RETURN,1,,return false;,17,749,,,1
146028892690,RETURN,1,,return false;,17,755,,,1
146028892691,RETURN,1,,return false;,17,761,,,1
146028892692,RETURN,1,,return false;,17,767,,,1
146028892693,RETURN,-1,,return false;,13,775,,,51
146028892694,RETURN,-1,,"return ((state == Status::SUFFIX_U) ||
            (state == Status::SUFFIX_L) ||
            (state == Status::SUFFIX_Z) ||
            (state == Status::SUFFIX_UL) ||
            (state == Status::SUFFIX_UZ) ||
            (state == Status::SUFFIX_LU) ||
            (state == Status::SUFFIX_LL) ||
            (state == Status::SUFFIX_ULL) ||
            (state == Status::SUFFIX_LLU) ||
            (state == Status::SUFFIX_I64) ||
            (state == Status::SUFFIX_UI64) ||
            (state == Status::SUFFIX_LITERAL));",5,778,,,4
146028892695,RETURN,-1,,"return isValidIntegerSuffixIt(str.cbegin(), str.cend(), supportMicrosoftExtensions);",5,795,,,1
146028892696,RETURN,1,,return false;,9,815,,,1
146028892697,RETURN,1,,return false;,17,825,,,1
146028892698,RETURN,1,,return false;,17,831,,,1
146028892699,RETURN,1,,"return isValidIntegerSuffixIt(it,str.end());",17,837,,,1
146028892700,RETURN,-1,,return state == Status::DIGITS;,5,841,,,8
146028892701,RETURN,1,,return false;,9,850,,,1
146028892702,RETURN,1,,return false;,17,860,,,1
146028892703,RETURN,1,,return false;,17,866,,,1
146028892704,RETURN,1,,return false;,17,872,,,1
146028892705,RETURN,1,,"return isValidIntegerSuffixIt(it,str.end());",17,878,,,1
146028892706,RETURN,-1,,return Status::DIGIT == state;,5,882,,,8
146028892707,RETURN,1,,return false;,9,891,,,1
146028892708,RETURN,1,,return false;,17,901,,,1
146028892709,RETURN,1,,return false;,17,907,,,1
146028892710,RETURN,1,,return false;,17,915,,,1
146028892711,RETURN,1,,return false;,17,925,,,1
146028892712,RETURN,1,,return false;,17,934,,,1
146028892713,RETURN,1,,return false;,17,942,,,1
146028892714,RETURN,1,,return false;,17,948,,,1
146028892715,RETURN,1,,return false;,17,956,,,1
146028892716,RETURN,-1,,return false;,13,959,,,37
146028892717,RETURN,-1,,return (Status::EXPONENT_DIGITS == state) || (Status::EXPONENT_SUFFIX == state);,5,962,,,8
146028892718,RETURN,1,,return false;,9,981,,,1
146028892719,RETURN,1,,return false;,17,991,,,1
146028892720,RETURN,1,,return false;,17,997,,,1
146028892721,RETURN,1,,return false;,17,1003,,,1
146028892722,RETURN,1,,"return isValidIntegerSuffixIt(it,str.end());",17,1009,,,1
146028892723,RETURN,-1,,return state == Status::DIGIT;,5,1013,,,8
146028892724,RETURN,1,,return false;,9,1022,,,1
146028892725,RETURN,1,,return false;,17,1032,,,1
146028892726,RETURN,1,,"return isValidIntegerSuffixIt(it,str.end());",17,1038,,,1
146028892727,RETURN,-1,,return state == Status::DIGIT;,5,1042,,,8
146028892728,RETURN,-1,,return isDec(str) || isIntHex(str) || isOct(str) || isBin(str);,5,1047,,,1
146028892729,RETURN,1,,"return ""ULL"";",13,1054,,,1
146028892730,RETURN,-1,,"return ""LL"";",9,1055,,,2
146028892731,RETURN,1,,"return isUnsigned ? ""U"" : """";",9,1068,,,1
146028892732,RETURN,1,,"return isUnsigned ? ""UL"" : ""L"";",9,1070,,,1
146028892733,RETURN,1,,"return isUnsigned ? ""ULL"" : ""LL"";",9,1072,,,1
146028892734,RETURN,-1,,"return """";",5,1073,,,10
146028892735,RETURN,1,,"return ""ULL"";",9,1081,,,1
146028892736,RETURN,1,,"return ""LL"";",9,1083,,,1
146028892737,RETURN,1,,"return ""UL"";",9,1085,,,1
146028892738,RETURN,1,,"return ""L"";",9,1087,,,1
146028892739,RETURN,1,,"return ""U"";",9,1089,,,1
146028892740,RETURN,-1,,return suffix1.empty() ? suffix2 : suffix1;,5,1091,,,10
146028892741,RETURN,-1,,"return MathLib::toString(toBigNumber(first) + toBigNumber(second)) + intsuffix(first, second);",9,1100,,,1
146028892742,RETURN,-1,,return toString(d1 + d2);,5,1112,,,10
146028892743,RETURN,-1,,"return MathLib::toString(toBigNumber(first) - toBigNumber(second)) + intsuffix(first, second);",9,1122,,,1
146028892744,RETURN,1,,"return ""0.0"";",9,1126,,,1
146028892745,RETURN,-1,,return toString(d1 - d2);,5,1137,,,11
146028892746,RETURN,-1,,"return MathLib::toString(toBigNumber(first) / b) + intsuffix(first, second);",9,1153,,,7
146028892747,RETURN,1,,"return ""nan.0"";",13,1157,,,1
146028892748,RETURN,-1,,"return isPositive(first) == isPositive(second) ? ""inf.0"" : ""-inf.0"";",9,1158,,,2
146028892749,RETURN,-1,,return toString(toDoubleNumber(first) / toDoubleNumber(second));,5,1160,,,3
146028892750,RETURN,-1,,"return MathLib::toString(toBigNumber(first) * toBigNumber(second)) + intsuffix(first, second);",9,1170,,,1
146028892751,RETURN,-1,,return toString(toDoubleNumber(first) * toDoubleNumber(second));,5,1172,,,2
146028892752,RETURN,-1,,"return MathLib::toString(toBigNumber(first) % b) + intsuffix(first, second);",9,1185,,,4
146028892753,RETURN,-1,,"return toString(std::fmod(toDoubleNumber(first),toDoubleNumber(second)));",5,1187,,,2
146028892754,RETURN,-1,,"return MathLib::add(first, second);",9,1195,,,3
146028892755,RETURN,-1,,"return MathLib::subtract(first, second);",9,1198,,,6
146028892756,RETURN,-1,,"return MathLib::multiply(first, second);",9,1201,,,9
146028892757,RETURN,-1,,"return MathLib::divide(first, second);",9,1204,,,12
146028892758,RETURN,-1,,"return MathLib::mod(first, second);",9,1207,,,15
146028892759,RETURN,-1,,"return MathLib::toString(MathLib::toBigNumber(first) & MathLib::toBigNumber(second)) + intsuffix(first, second);",9,1210,,,18
146028892760,RETURN,-1,,"return MathLib::toString(MathLib::toBigNumber(first) | MathLib::toBigNumber(second)) + intsuffix(first, second);",9,1213,,,21
146028892761,RETURN,-1,,"return MathLib::toString(MathLib::toBigNumber(first) ^ MathLib::toBigNumber(second)) + intsuffix(first, second);",9,1216,,,24
146028892762,RETURN,-1,,return toString(std::sin(toDoubleNumber(tok)));,5,1225,,,1
146028892763,RETURN,-1,,return toString(std::cos(toDoubleNumber(tok)));,5,1231,,,1
146028892764,RETURN,-1,,return toString(std::tan(toDoubleNumber(tok)));,5,1236,,,1
146028892765,RETURN,1,,"return tok.substr(1, tok.length() - 1);",9,1243,,,1
146028892766,RETURN,-1,,return tok;,5,1244,,,2
146028892767,RETURN,-1,,return toString(toDoubleNumber(first)) == toString(toDoubleNumber(second));,5,1251,,,1
146028892768,RETURN,-1,,"return !isEqual(first, second);",5,1256,,,1
146028892769,RETURN,-1,,return toDoubleNumber(first) > toDoubleNumber(second);,5,1262,,,1
146028892770,RETURN,-1,,return toDoubleNumber(first) >= toDoubleNumber(second);,5,1268,,,1
146028892771,RETURN,-1,,return toDoubleNumber(first) < toDoubleNumber(second);,5,1274,,,1
146028892772,RETURN,-1,,return toDoubleNumber(first) <= toDoubleNumber(second);,5,1279,,,1
146028892773,RETURN,1,,return false;,9,1294,,,1
146028892774,RETURN,1,,return false;,9,1297,,,1
146028892775,RETURN,1,,return false;,13,1301,,,1
146028892776,RETURN,1,,return true;,13,1303,,,1
146028892777,RETURN,1,,return false;,13,1305,,,1
146028892778,RETURN,-1,,return true;,5,1307,,,6
146028892779,RETURN,-1,,return (c >= '0' && c <= '7');,5,1312,,,1
146028892780,RETURN,-1,,"return MathLib::value::calc('+',v1,v2);",5,1317,,,1
146028892781,RETURN,-1,,"return MathLib::value::calc('-',v1,v2);",5,1322,,,1
146028892782,RETURN,-1,,"return MathLib::value::calc('*',v1,v2);",5,1327,,,1
146028892783,RETURN,-1,,"return MathLib::value::calc('/',v1,v2);",5,1332,,,1
146028892784,RETURN,-1,,"return MathLib::value::calc('%',v1,v2);",5,1337,,,1
146028892785,RETURN,-1,,"return MathLib::value::calc('&',v1,v2);",5,1342,,,1
146028892786,RETURN,-1,,"return MathLib::value::calc('|',v1,v2);",5,1347,,,1
146028892787,RETURN,-1,,"return MathLib::value::calc('^',v1,v2);",5,1352,,,1
146028892788,RETURN,-1,,return v1.shiftLeft(v2);,5,1357,,,1
146028892789,RETURN,-1,,return v1.shiftRight(v2);,5,1362,,,1
146028892790,RETURN,-1,,return false;,5,67,,,1
146028892791,RETURN,-1,,return path;,5,81,,,6
146028892792,RETURN,-1,,return path;,5,89,,,6
146028892793,RETURN,-1,,return simplecpp::simplifyPath(std::move(originalPath));,5,94,,,1
146028892794,RETURN,1,,"return filename.substr(0, 1 + pos);",9,102,,,1
146028892795,RETURN,-1,,"return """";",5,104,,,4
146028892796,RETURN,-1,,"return caseInsensitiveFilesystem() ? (caseInsensitiveStringCompare(fname1, fname2) == 0) : (fname1 == fname2);",5,109,,,1
146028892797,RETURN,-1,,return path;,5,115,,,2
146028892798,RETURN,1,,"return """";",9,122,,,1
146028892799,RETURN,-1,,return extension;,5,130,,,7
146028892800,RETURN,-1,,"return getFilenameExtension(path, true);",5,135,,,1
146028892801,RETURN,1,,return std::string(currentPath);,9,147,,,1
146028892802,RETURN,-1,,"return """";",5,149,,,4
146028892803,RETURN,-1,,return success ? std::string(buf) : std::string(fallback);,5,173,,,9
146028892804,RETURN,-1,,return !nativePath.empty() && nativePath[0] == '/';,5,187,,,3
146028892805,RETURN,1,,return absolutePath.substr(bp.length());,13,201,,,1
146028892806,RETURN,1,,return absolutePath.substr(bp.length() + 1);,13,203,,,1
146028892807,RETURN,-1,,return absolutePath;,5,205,,,2
146028892808,RETURN,-1,,return (l != Standards::Language::None && !header) || extra.find(getFilenameExtension(path)) != extra.end();,5,226,,,6
146028892809,RETURN,1,,return false;,9,241,,,1
146028892810,RETURN,1,,return false;,13,249,,,1
146028892811,RETURN,1,,return false;,9,254,,,1
146028892812,RETURN,-1,,return false;,9,260,,,1
146028892813,RETURN,-1,,return false;,9,268,,,1
146028892814,RETURN,-1,,return false;,13,282,,,1
146028892815,RETURN,-1,,return false;,9,289,,,1
146028892816,RETURN,-1,,return true;,9,306,,,1
146028892817,RETURN,-1,,return false;,5,315,,,28
146028892818,RETURN,-1,,return Standards::Language::CPP;,13,330,,,2
146028892819,RETURN,-1,,return Standards::Language::None;,9,332,,,2
146028892820,RETURN,1,,return Standards::Language::CPP;,9,335,,,1
146028892821,RETURN,1,,return Standards::Language::C;,9,337,,,1
146028892822,RETURN,1,,return Standards::Language::CPP;,13,345,,,1
146028892823,RETURN,-1,,return Standards::Language::C;,9,346,,,3
146028892824,RETURN,1,,return Standards::Language::CPP;,9,349,,,1
146028892825,RETURN,-1,,return Standards::Language::CPP;,9,353,,,2
146028892826,RETURN,-1,,return Standards::Language::None;,5,355,,,11
146028892827,RETURN,-1,,return header;,5,362,,,3
146028892828,RETURN,1,,"return """";",9,368,,,1
146028892829,RETURN,-1,,return absolute_path;,5,390,,,3
146028892830,RETURN,-1,,return file.substr(p + 1);,9,403,,,1
146028892831,RETURN,-1,,return file;,5,405,,,6
146028892832,RETURN,1,,return 0;,9,416,,,1
146028892833,RETURN,-1,,return file_stat.st_mode & S_IFMT;,5,417,,,3
146028892834,RETURN,-1,,return file_type(path) == S_IFREG;,5,422,,,1
146028892835,RETURN,-1,,return file_type(path) == S_IFDIR;,5,427,,,1
146028892836,RETURN,-1,,return true;,9,437,,,2
146028892837,RETURN,-1,,return type == S_IFREG;,5,441,,,5
146028892838,RETURN,1,,return path1 + path2;,9,446,,,1
146028892839,RETURN,1,,return path2;,9,448,,,1
146028892840,RETURN,-1,,"return ((path1.back() == '/') ? path1 : (path1 + ""/"")) + path2;",5,449,,,3
146028892841,RETURN,1,,return nullptr;,9,33,,,1
146028892842,RETURN,1,,return findOuterScope(scope->nestedIn);,9,35,,,1
146028892843,RETURN,-1,,return scope;,5,36,,,3
146028892844,RETURN,1,,return tok->astParent();,13,43,,,1
146028892845,RETURN,-1,,return nullptr;,5,46,,,2
146028892846,RETURN,-1,,return v.isIntValue();,9,56,,,1
146028892847,RETURN,1,,return v.intvalue == it->intvalue;,13,61,,,1
146028892848,RETURN,-1,,return true;,9,62,,,2
146028892849,RETURN,-1,,"return std::make_pair(!!v->intvalue, !v->intvalue);",9,53,,,2
146028892850,RETURN,-1,,"return std::make_pair(!!it->intvalue, !it->intvalue);",9,65,,,2
146028892851,RETURN,-1,,"return std::make_pair(true, true);",5,67,,,5
146028892852,RETURN,1,,return Progress::Continue;,9,73,,,1
146028892853,RETURN,1,,return Progress::Break;,9,75,,,1
146028892854,RETURN,1,,return Progress::Break;,9,78,,,1
146028892855,RETURN,1,,return Progress::Break;,9,80,,,1
146028892856,RETURN,-1,,return Progress::Continue;,5,81,,,6
146028892857,RETURN,1,,return Progress::Break;,13,88,,,1
146028892858,RETURN,-1,,return Progress::Break;,13,91,,,2
146028892859,RETURN,1,,return Progress::Break;,17,96,,,1
146028892860,RETURN,1,,return Progress::Break;,17,98,,,1
146028892861,RETURN,1,,return Progress::Break;,17,101,,,1
146028892862,RETURN,1,,return Progress::Break;,25,119,,,1
146028892863,RETURN,1,,return Progress::Break;,17,134,,,1
146028892864,RETURN,1,,return Progress::Break;,21,147,,,1
146028892865,RETURN,1,,return Progress::Break;,25,155,,,1
146028892866,RETURN,1,,return Progress::Break;,17,166,,,1
146028892867,RETURN,-1,,return Progress::Continue;,5,172,,,2
146028892868,RETURN,1,,return;,9,179,,,1
146028892869,RETURN,-1,,return (i.tok == dest);,9,188,,,1
146028892870,RETURN,1,,return false;,9,191,,,1
146028892871,RETURN,-1,,return true;,5,194,,,5
146028892872,RETURN,1,,return false;,9,43,,,1
146028892873,RETURN,1,,return true;,17,67,,,1
146028892874,RETURN,1,,return true;,17,72,,,1
146028892875,RETURN,1,,return true;,17,82,,,1
146028892876,RETURN,-1,,return false;,5,85,,,10
146028892877,RETURN,-1,,"return path.substr(0, ind + 1);",5,91,,,3
146028892878,RETURN,-1,,return true;,9,63,,,23
146028892879,RETURN,-1,,return true;,9,84,,,46
146028892880,RETURN,-1,,return true;,9,104,,,67
146028892881,RETURN,-1,,return true;,9,124,,,88
146028892882,RETURN,-1,,return true;,9,144,,,109
146028892883,RETURN,-1,,return false;,9,147,,,112
146028892884,RETURN,-1,,return false;,5,150,,,2
146028892885,RETURN,-1,,return false;,9,171,,,2
146028892886,RETURN,-1,,return false;,13,185,,,2
146028892887,RETURN,-1,,return true;,5,189,,,2
146028892888,RETURN,1,,return false;,9,231,,,1
146028892889,RETURN,-1,,return loadFromXmlDocument(&doc);,5,233,,,8
146028892890,RETURN,-1,,return retval;,5,241,,,4
146028892891,RETURN,1,,return false;,9,249,,,1
146028892892,RETURN,-1,,return !error;,5,297,,,12
146028892893,RETURN,-1,,return s;,5,437,,,33
146028892894,RETURN,-1,,return getLimitsDefines(cstd >= Standards::cstd_t::C99);,5,442,,,1
146028892895,RETURN,-1,,return getLimitsDefines(cppstd >= Standards::cppstd_t::CPP11);,5,447,,,1
146028892896,RETURN,-1,,return tok1 && tok2 && tok1->location.sameline(tok2->location);,5,43,,,1
146028892897,RETURN,-1,,return !s.errorId.empty();,13,147,,,1
146028892898,RETURN,1,,return false;,9,90,,,1
146028892899,RETURN,1,,return false;,9,93,,,1
146028892900,RETURN,1,,return false;,9,95,,,1
146028892901,RETURN,1,,return false;,9,97,,,1
146028892902,RETURN,1,,return false;,9,105,,,1
146028892903,RETURN,1,,return false;,13,112,,,1
146028892904,RETURN,1,,return false;,13,129,,,1
146028892905,RETURN,1,,return false;,13,154,,,1
146028892906,RETURN,-1,,return true;,5,167,,,20
146028892907,RETURN,1,,"return """";",9,172,,,1
146028892908,RETURN,-1,,return Path::simplifyPath(std::move(relativeFilename));,5,182,,,5
146028892909,RETURN,1,,return;,9,306,,,1
146028892910,RETURN,-1,,return ret;,5,326,,,4
146028892911,RETURN,-1,,return directives;,5,364,,,7
146028892912,RETURN,1,,"return """";",9,371,,,1
146028892913,RETURN,1,,"return ""0"";",9,386,,,1
146028892914,RETURN,1,,return cond->str();,13,390,,,1
146028892915,RETURN,1,,"return next1->str() + ""=0"";",13,395,,,1
146028892916,RETURN,1,,return next1->str();,13,400,,,1
146028892917,RETURN,1,,return cond->str() + '=' + cond->next->next->str();,13,405,,,1
146028892918,RETURN,-1,,return cfgStr;,5,434,,,24
146028892919,RETURN,-1,,return false;,9,440,,,1
146028892920,RETURN,1,,return true;,13,450,,,1
146028892921,RETURN,-1,,return false;,5,453,,,5
146028892922,RETURN,1,,"return """";",13,464,,,1
146028892923,RETURN,-1,,return ret;,5,471,,,4
146028892924,RETURN,1,,return true;,13,482,,,1
146028892925,RETURN,1,,return true;,13,484,,,1
146028892926,RETURN,-1,,return false;,5,488,,,2
146028892927,RETURN,-1,,"return hasDefine(userDefines, cfg);",9,495,,,1
146028892928,RETURN,-1,,"return std::any_of(configs_if.cbegin(), configs_if.cend(),
                       [&](const std::string &cfg) {
        return hasDefine(userDefines, cfg);
    });",5,493,,,1
146028892929,RETURN,1,,return cmdtok;,21,509,,,1
146028892930,RETURN,-1,,return nullptr;,5,513,,,4
146028892931,RETURN,1,,return ret;,9,663,,,1
146028892932,RETURN,-1,,return ret;,5,674,,,6
146028892933,RETURN,-1,,return dui;,5,730,,,12
146028892934,RETURN,-1,,return true;,9,743,,,15
146028892935,RETURN,-1,,return false;,5,749,,,2
146028892936,RETURN,-1,,return hasErrors(output);,9,755,,,1
146028892937,RETURN,-1,,return it != outputList.cend();,5,757,,,3
146028892938,RETURN,-1,,return hasErrors(output);,13,766,,,1
146028892939,RETURN,-1,,return !hasErrors(outputList);,5,781,,,6
146028892940,RETURN,-1,,return tokens2;,5,829,,,13
146028892941,RETURN,-1,,return ret.str();,5,856,,,9
146028892942,RETURN,1,,return;,9,913,,,1
146028892943,RETURN,-1,,return (std::hash<std::string>{})(hashData);,5,991,,,5
146028892944,RETURN,-1,,return tok ? tok->exprId() : exprid;,5,51,,,1
146028892945,RETURN,-1,,return std::hash<nonneg int>()(etok.getExpressionId());,5,56,,,1
146028892946,RETURN,1,,return {v->intvalue};,13,68,,,1
146028892947,RETURN,1,,return {result};,13,71,,,1
146028892948,RETURN,-1,,return {};,9,72,,,5
146028892949,RETURN,1,,return &it->second;,9,83,,,1
146028892950,RETURN,-1,,return nullptr;,5,84,,,6
146028892951,RETURN,-1,,return true;,9,93,,,2
146028892952,RETURN,-1,,return false;,5,95,,,4
146028892953,RETURN,-1,,return true;,9,111,,,2
146028892954,RETURN,-1,,return false;,5,113,,,4
146028892955,RETURN,-1,,return true;,9,122,,,2
146028892956,RETURN,-1,,return false;,5,124,,,4
146028892957,RETURN,-1,,return true;,13,132,,,2
146028892958,RETURN,-1,,return true;,13,136,,,2
146028892959,RETURN,-1,,return false;,5,139,,,4
146028892960,RETURN,-1,,return mValues->find(exprid) != mValues->end();,5,159,,,1
146028892961,RETURN,-1,,return mValues->at(exprid);,5,163,,,1
146028892962,RETURN,-1,,return mValues->at(exprid);,5,168,,,2
146028892963,RETURN,1,,return;,9,174,,,1
146028892964,RETURN,1,,return;,9,195,,,1
146028892965,RETURN,-1,,return mValues->empty();,5,204,,,1
146028892966,RETURN,1,,return;,9,211,,,1
146028892967,RETURN,1,,return;,9,223,,,1
146028892968,RETURN,1,,return false;,9,233,,,1
146028892969,RETURN,-1,,return !error && result == r;,5,237,,,7
146028892970,RETURN,-1,,"return evaluateCondition(0, condition, pm, settings);",5,242,,,1
146028892971,RETURN,-1,,"return evaluateCondition(1, condition, pm, settings);",5,247,,,1
146028892972,RETURN,1,,return false;,9,253,,,1
146028892973,RETURN,1,,return i;,9,255,,,1
146028892974,RETURN,-1,,return !i;,5,256,,,3
146028892975,RETURN,1,,return false;,9,262,,,1
146028892976,RETURN,1,,return v.intvalue == 0;,9,264,,,1
146028892977,RETURN,-1,,return v.intvalue != 0;,5,265,,,3
146028892978,RETURN,1,,return false;,9,271,,,1
146028892979,RETURN,1,,return false;,9,273,,,1
146028892980,RETURN,-1,,return v.intvalue == 0;,5,274,,,3
146028892981,RETURN,1,,return isTrue(v);,9,280,,,1
146028892982,RETURN,-1,,return isFalse(v);,5,281,,,2
146028892983,RETURN,1,,return false;,9,288,,,1
146028892984,RETURN,1,,return isBasicForLoop(tok->link());,9,290,,,1
146028892985,RETURN,1,,return false;,9,292,,,1
146028892986,RETURN,1,,return false;,9,295,,,1
146028892987,RETURN,1,,return false;,9,297,,,1
146028892988,RETURN,1,,return false;,9,299,,,1
146028892989,RETURN,-1,,return true;,5,300,,,9
146028892990,RETURN,1,,return std::vector<MathLib::bigint>{};,13,307,,,1
146028892991,RETURN,1,,return {v->intvalue};,13,309,,,1
146028892992,RETURN,1,,return {result};,13,314,,,1
146028892993,RETURN,-1,,return std::vector<MathLib::bigint>{};,9,315,,,9
146028892994,RETURN,1,,return;,13,322,,,1
146028892995,RETURN,1,,return;,13,324,,,1
146028892996,RETURN,1,,return;,13,326,,,1
146028892997,RETURN,1,,return;,13,328,,,1
146028892998,RETURN,1,,return;,13,356,,,1
146028892999,RETURN,1,,return;,9,367,,,1
146028893000,RETURN,1,,return;,9,369,,,1
146028893001,RETURN,1,,return;,13,375,,,1
146028893002,RETURN,-1,,"return isVariableChanged(origin, tok, e.getExpressionId(), false, settings);",9,452,,,1
146028893003,RETURN,-1,,return pm;,5,468,,,3
146028893004,RETURN,1,,return {1};,13,526,,,1
146028893005,RETURN,1,,return {0};,13,528,,,1
146028893006,RETURN,-1,,return {};,9,529,,,7
146028893007,RETURN,-1,,return true;,13,536,,,2
146028893008,RETURN,-1,,return false;,9,538,,,6
146028893009,RETURN,-1,,return local.state;,5,557,,,8
146028893010,RETURN,-1,,return programMemory;,5,569,,,9
146028893011,RETURN,-1,,return value.isIntValue() || value.isFloatValue();,5,573,,,1
146028893012,RETURN,-1,,return value.isFloatValue() ? value.floatValue : static_cast<double>(value.intvalue);,5,578,,,1
146028893013,RETURN,-1,,return value.isFloatValue() ? static_cast<MathLib::bigint>(value.floatValue) : value.intvalue;,5,583,,,1
146028893014,RETURN,-1,,"return std::string{assign.cbegin(), assign.cend() - 1};",5,587,,,1
146028893015,RETURN,-1,,return value.isIntValue() || value.isIteratorValue() || value.isSymbolicValue();,5,602,,,1
146028893016,RETURN,1,,return ValueFlow::Value::unknown();,9,609,,,1
146028893017,RETURN,1,,return ValueFlow::Value::unknown();,13,613,,,1
146028893018,RETURN,1,,return ValueFlow::Value::unknown();,17,622,,,1
146028893019,RETURN,-1,,return result;,13,623,,,6
146028893020,RETURN,1,,return ValueFlow::Value::unknown();,9,628,,,1
146028893021,RETURN,1,,return ValueFlow::Value::unknown();,9,631,,,1
146028893022,RETURN,1,,return ValueFlow::Value::unknown();,9,635,,,1
146028893023,RETURN,1,,return ValueFlow::Value::unknown();,9,638,,,1
146028893024,RETURN,1,,return ValueFlow::Value::unknown();,9,641,,,1
146028893025,RETURN,1,,return ValueFlow::Value::unknown();,9,644,,,1
146028893026,RETURN,1,,return ValueFlow::Value::unknown();,9,657,,,1
146028893027,RETURN,-1,,return ValueFlow::Value::unknown();,13,664,,,1
146028893028,RETURN,-1,,return result;,5,669,,,19
146028893029,RETURN,1,,return ValueFlow::Value::unknown();,13,678,,,1
146028893030,RETURN,1,,return ValueFlow::Value::unknown();,13,681,,,1
146028893031,RETURN,-1,,return v;,9,685,,,8
146028893032,RETURN,1,,return ValueFlow::Value::unknown();,13,689,,,1
146028893033,RETURN,1,,return ValueFlow::Value::unknown();,13,692,,,1
146028893034,RETURN,1,,return ValueFlow::Value::unknown();,13,695,,,1
146028893035,RETURN,-1,,return v;,9,698,,,11
146028893036,RETURN,1,,return ValueFlow::Value::unknown();,13,702,,,1
146028893037,RETURN,1,,return ValueFlow::Value::unknown();,13,705,,,1
146028893038,RETURN,1,,return ValueFlow::Value::unknown();,13,708,,,1
146028893039,RETURN,1,,return ValueFlow::Value::unknown();,13,711,,,1
146028893040,RETURN,-1,,return v;,9,715,,,14
146028893041,RETURN,1,,return ValueFlow::Value::unknown();,13,719,,,1
146028893042,RETURN,1,,return ValueFlow::Value::unknown();,13,722,,,1
146028893043,RETURN,-1,,return v;,9,725,,,7
146028893044,RETURN,1,,return ValueFlow::Value::unknown();,13,729,,,1
146028893045,RETURN,1,,return ValueFlow::Value::unknown();,13,732,,,1
146028893046,RETURN,-1,,return v;,9,735,,,7
146028893047,RETURN,1,,return ValueFlow::Value::unknown();,13,739,,,1
146028893048,RETURN,1,,return ValueFlow::Value::unknown();,13,742,,,1
146028893049,RETURN,-1,,return v;,9,745,,,7
146028893050,RETURN,1,,return ValueFlow::Value::unknown();,13,749,,,1
146028893051,RETURN,1,,return ValueFlow::Value::unknown();,13,752,,,1
146028893052,RETURN,-1,,return v;,9,755,,,7
146028893053,RETURN,1,,return ValueFlow::Value::unknown();,13,759,,,1
146028893054,RETURN,1,,return ValueFlow::Value::unknown();,13,762,,,1
146028893055,RETURN,-1,,return v;,9,765,,,7
146028893056,RETURN,1,,return ValueFlow::Value::unknown();,13,769,,,1
146028893057,RETURN,1,,return ValueFlow::Value::unknown();,13,772,,,1
146028893058,RETURN,-1,,return v;,9,775,,,7
146028893059,RETURN,1,,return ValueFlow::Value::unknown();,13,779,,,1
146028893060,RETURN,1,,return ValueFlow::Value::unknown();,13,782,,,1
146028893061,RETURN,-1,,return v;,9,785,,,7
146028893062,RETURN,-1,,return v.isFloatValue() || v.isIntValue();,13,789,,,1
146028893063,RETURN,1,,return ValueFlow::Value::unknown();,13,791,,,1
146028893064,RETURN,-1,,return v;,9,796,,,6
146028893065,RETURN,-1,,return v.isFloatValue() || v.isIntValue();,13,800,,,1
146028893066,RETURN,1,,return ValueFlow::Value::unknown();,13,802,,,1
146028893067,RETURN,-1,,return v;,9,807,,,6
146028893068,RETURN,-1,,return v.isFloatValue() || v.isIntValue();,13,811,,,1
146028893069,RETURN,1,,return ValueFlow::Value::unknown();,13,813,,,1
146028893070,RETURN,-1,,return v;,9,818,,,6
146028893071,RETURN,-1,,return v.isFloatValue() || v.isIntValue();,13,822,,,1
146028893072,RETURN,1,,return ValueFlow::Value::unknown();,13,824,,,1
146028893073,RETURN,-1,,return v;,9,829,,,6
146028893074,RETURN,-1,,return v.isFloatValue() || v.isIntValue();,13,833,,,1
146028893075,RETURN,1,,return ValueFlow::Value::unknown();,13,835,,,1
146028893076,RETURN,-1,,return v;,9,840,,,6
146028893077,RETURN,-1,,return v.isFloatValue() || v.isIntValue();,13,844,,,1
146028893078,RETURN,1,,return ValueFlow::Value::unknown();,13,846,,,1
146028893079,RETURN,-1,,return v;,9,851,,,6
146028893080,RETURN,-1,,return v.isFloatValue() || v.isIntValue();,13,855,,,1
146028893081,RETURN,1,,return ValueFlow::Value::unknown();,13,857,,,1
146028893082,RETURN,-1,,return v;,9,862,,,6
146028893083,RETURN,-1,,return v.isFloatValue() || v.isIntValue();,13,866,,,1
146028893084,RETURN,1,,return ValueFlow::Value::unknown();,13,868,,,1
146028893085,RETURN,-1,,return v;,9,873,,,6
146028893086,RETURN,-1,,return v.isFloatValue() || v.isIntValue();,13,877,,,1
146028893087,RETURN,1,,return ValueFlow::Value::unknown();,13,879,,,1
146028893088,RETURN,-1,,return v;,9,884,,,6
146028893089,RETURN,-1,,return v.isFloatValue() || v.isIntValue();,13,888,,,1
146028893090,RETURN,1,,return ValueFlow::Value::unknown();,13,890,,,1
146028893091,RETURN,-1,,return v;,9,895,,,6
146028893092,RETURN,-1,,return v.isFloatValue() || v.isIntValue();,13,899,,,1
146028893093,RETURN,1,,return ValueFlow::Value::unknown();,13,901,,,1
146028893094,RETURN,-1,,return v;,9,906,,,6
146028893095,RETURN,-1,,return v.isFloatValue() || v.isIntValue();,13,910,,,1
146028893096,RETURN,1,,return ValueFlow::Value::unknown();,13,912,,,1
146028893097,RETURN,-1,,return v;,9,917,,,6
146028893098,RETURN,1,,return ValueFlow::Value::unknown();,13,921,,,1
146028893099,RETURN,1,,return ValueFlow::Value::unknown();,13,924,,,1
146028893100,RETURN,-1,,return v;,9,927,,,7
146028893101,RETURN,1,,return ValueFlow::Value::unknown();,13,931,,,1
146028893102,RETURN,1,,return ValueFlow::Value::unknown();,13,934,,,1
146028893103,RETURN,-1,,return v;,9,937,,,7
146028893104,RETURN,1,,return ValueFlow::Value::unknown();,13,941,,,1
146028893105,RETURN,1,,return ValueFlow::Value::unknown();,13,944,,,1
146028893106,RETURN,-1,,return v;,9,947,,,7
146028893107,RETURN,1,,return ValueFlow::Value::unknown();,13,951,,,1
146028893108,RETURN,1,,return ValueFlow::Value::unknown();,13,954,,,1
146028893109,RETURN,-1,,return v;,9,957,,,7
146028893110,RETURN,1,,return ValueFlow::Value::unknown();,13,961,,,1
146028893111,RETURN,1,,return ValueFlow::Value::unknown();,13,964,,,1
146028893112,RETURN,-1,,return v;,9,967,,,7
146028893113,RETURN,1,,return ValueFlow::Value::unknown();,13,971,,,1
146028893114,RETURN,1,,return ValueFlow::Value::unknown();,13,974,,,1
146028893115,RETURN,-1,,return v;,9,977,,,7
146028893116,RETURN,1,,return ValueFlow::Value::unknown();,13,981,,,1
146028893117,RETURN,1,,return ValueFlow::Value::unknown();,13,984,,,1
146028893118,RETURN,-1,,return v;,9,987,,,7
146028893119,RETURN,1,,return ValueFlow::Value::unknown();,13,991,,,1
146028893120,RETURN,1,,return ValueFlow::Value::unknown();,13,994,,,1
146028893121,RETURN,-1,,return v;,9,997,,,7
146028893122,RETURN,1,,return ValueFlow::Value::unknown();,13,1001,,,1
146028893123,RETURN,1,,return ValueFlow::Value::unknown();,13,1004,,,1
146028893124,RETURN,-1,,return v;,9,1007,,,7
146028893125,RETURN,1,,return ValueFlow::Value::unknown();,13,1011,,,1
146028893126,RETURN,1,,return ValueFlow::Value::unknown();,13,1014,,,1
146028893127,RETURN,-1,,return v;,9,1017,,,7
146028893128,RETURN,1,,return ValueFlow::Value::unknown();,13,1021,,,1
146028893129,RETURN,1,,return ValueFlow::Value::unknown();,13,1024,,,1
146028893130,RETURN,-1,,return v;,9,1027,,,7
146028893131,RETURN,1,,return ValueFlow::Value::unknown();,13,1031,,,1
146028893132,RETURN,1,,return ValueFlow::Value::unknown();,13,1034,,,1
146028893133,RETURN,-1,,return v;,9,1037,,,7
146028893134,RETURN,1,,return ValueFlow::Value::unknown();,13,1041,,,1
146028893135,RETURN,1,,return ValueFlow::Value::unknown();,13,1044,,,1
146028893136,RETURN,-1,,return v;,9,1047,,,7
146028893137,RETURN,1,,return ValueFlow::Value::unknown();,13,1051,,,1
146028893138,RETURN,1,,return ValueFlow::Value::unknown();,13,1054,,,1
146028893139,RETURN,-1,,return v;,9,1057,,,7
146028893140,RETURN,1,,return ValueFlow::Value::unknown();,13,1061,,,1
146028893141,RETURN,1,,return ValueFlow::Value::unknown();,13,1064,,,1
146028893142,RETURN,-1,,return v;,9,1067,,,7
146028893143,RETURN,1,,return ValueFlow::Value::unknown();,13,1071,,,1
146028893144,RETURN,1,,return ValueFlow::Value::unknown();,13,1074,,,1
146028893145,RETURN,-1,,return v;,9,1077,,,7
146028893146,RETURN,1,,return ValueFlow::Value::unknown();,13,1081,,,1
146028893147,RETURN,1,,return ValueFlow::Value::unknown();,13,1084,,,1
146028893148,RETURN,-1,,return v;,9,1087,,,7
146028893149,RETURN,1,,return ValueFlow::Value::unknown();,13,1091,,,1
146028893150,RETURN,1,,return ValueFlow::Value::unknown();,13,1094,,,1
146028893151,RETURN,-1,,return v;,9,1097,,,7
146028893152,RETURN,1,,return ValueFlow::Value::unknown();,13,1101,,,1
146028893153,RETURN,1,,return ValueFlow::Value::unknown();,13,1104,,,1
146028893154,RETURN,-1,,return v;,9,1107,,,7
146028893155,RETURN,1,,return ValueFlow::Value::unknown();,13,1111,,,1
146028893156,RETURN,1,,return ValueFlow::Value::unknown();,13,1114,,,1
146028893157,RETURN,-1,,return v;,9,1117,,,7
146028893158,RETURN,1,,return ValueFlow::Value::unknown();,13,1121,,,1
146028893159,RETURN,1,,return ValueFlow::Value::unknown();,13,1124,,,1
146028893160,RETURN,-1,,return v;,9,1127,,,7
146028893161,RETURN,1,,return ValueFlow::Value::unknown();,13,1131,,,1
146028893162,RETURN,1,,return ValueFlow::Value::unknown();,13,1134,,,1
146028893163,RETURN,-1,,return v;,9,1137,,,7
146028893164,RETURN,1,,return ValueFlow::Value::unknown();,13,1141,,,1
146028893165,RETURN,1,,return ValueFlow::Value::unknown();,13,1144,,,1
146028893166,RETURN,-1,,return v;,9,1147,,,7
146028893167,RETURN,1,,return ValueFlow::Value::unknown();,13,1151,,,1
146028893168,RETURN,1,,return ValueFlow::Value::unknown();,13,1154,,,1
146028893169,RETURN,-1,,return v;,9,1157,,,7
146028893170,RETURN,1,,return ValueFlow::Value::unknown();,13,1161,,,1
146028893171,RETURN,1,,return ValueFlow::Value::unknown();,13,1164,,,1
146028893172,RETURN,-1,,return v;,9,1167,,,7
146028893173,RETURN,1,,return ValueFlow::Value::unknown();,13,1171,,,1
146028893174,RETURN,1,,return ValueFlow::Value::unknown();,13,1174,,,1
146028893175,RETURN,-1,,return v;,9,1177,,,7
146028893176,RETURN,-1,,return functions;,5,1179,,,50
146028893177,RETURN,1,,return nullptr;,9,1187,,,1
146028893178,RETURN,-1,,return it->second;,5,1188,,,6
146028893179,RETURN,-1,,return tok1->exprId() < tok2->exprId();,5,1191,,,1
146028893180,RETURN,-1,,return tok1->exprId() == tok2->exprId();,5,1194,,,1
146028893181,RETURN,-1,,return result;,5,1201,,,3
146028893182,RETURN,1,,return false;,9,1213,,,1
146028893183,RETURN,-1,,"return conditionIsTrue(cond, std::move(pm), settings);",5,1214,,,6
146028893184,RETURN,1,,return false;,13,1225,,,1
146028893185,RETURN,1,,return false;,13,1228,,,1
146028893186,RETURN,-1,,"return isTrueOrFalse(v, !b);",9,1230,,,7
146028893187,RETURN,-1,,"return Token::Match(child, ""&&|%oror%"");",17,1276,,,1
146028893188,RETURN,-1,,"return evalSameCondition(*pm, cond2, cond1, settings);",29,1356,,,1
146028893189,RETURN,-1,,return execute(tok);,25,1561,,,1
146028893190,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,21,1609,,,2
146028893191,RETURN,-1,,return x->intvalue < y->intvalue;,17,1630,,,1
146028893192,RETURN,-1,,return ValueFlow::Value::unknown();,13,1248,,,1
146028893193,RETURN,-1,,return result;,13,1266,,,5
146028893194,RETURN,-1,,"return astFlatten(tok, tok->str().c_str());",13,1271,,,1
146028893195,RETURN,1,,return false;,17,1278,,,1
146028893196,RETURN,-1,,return !conditions.empty() && conditions.front()->exprId() != 0;,13,1281,,,4
146028893197,RETURN,1,,return v;,21,1289,,,1
146028893198,RETURN,1,,return lhs;,21,1297,,,1
146028893199,RETURN,1,,return rhs;,21,1300,,,1
146028893200,RETURN,1,,return lhs;,21,1302,,,1
146028893201,RETURN,-1,,return unknown();,17,1303,,,8
146028893202,RETURN,1,,return unknown();,17,1308,,,1
146028893203,RETURN,1,,return unknown();,17,1311,,,1
146028893204,RETURN,1,,return v;,21,1318,,,1
146028893205,RETURN,1,,return negatedValue;,17,1324,,,1
146028893206,RETURN,1,,return unknown();,17,1326,,,1
146028893207,RETURN,1,,return unknown();,17,1328,,,1
146028893208,RETURN,1,,return unknown();,25,1342,,,1
146028893209,RETURN,1,,return value;,25,1345,,,1
146028893210,RETURN,1,,return value;,25,1363,,,1
146028893211,RETURN,-1,,return unknown();,13,1366,,,20
146028893212,RETURN,1,,return unknown();,17,1373,,,1
146028893213,RETURN,1,,return *expr->getKnownValue(ValueFlow::Value::ValueType::INT);,17,1375,,,1
146028893214,RETURN,-1,,return *value;,17,1381,,,1
146028893215,RETURN,1,,return unknown();,21,1385,,,1
146028893216,RETURN,1,,return unknown();,21,1388,,,1
146028893217,RETURN,-1,,return ValueFlow::Value{i};,17,1389,,,5
146028893218,RETURN,1,,"return ValueFlow::Value{expr->str() == ""true""};",17,1392,,,1
146028893219,RETURN,1,,return unknown();,25,1399,,,1
146028893220,RETURN,-1,,return v;,21,1401,,,5
146028893221,RETURN,1,,return unknown();,25,1406,,,1
146028893222,RETURN,1,,return ValueFlow::Value{0};,25,1408,,,1
146028893223,RETURN,1,,return ValueFlow::Value{v.intvalue == 0};,25,1410,,,1
146028893224,RETURN,1,,return unknown();,21,1416,,,1
146028893225,RETURN,1,,return unknown();,25,1419,,,1
146028893226,RETURN,1,,return unknown();,25,1428,,,1
146028893227,RETURN,-1,,return lhs;,21,1429,,,6
146028893228,RETURN,-1,,return rhs;,17,1432,,,6
146028893229,RETURN,-1,,"return executeMultiCondition(false, expr);",17,1434,,,1
146028893230,RETURN,-1,,"return executeMultiCondition(true, expr);",17,1436,,,1
146028893231,RETURN,-1,,return execute(expr->astOperand2());,17,1439,,,2
146028893232,RETURN,1,,return ValueFlow::Value::unknown();,21,1442,,,1
146028893233,RETURN,1,,return unknown();,21,1445,,,1
146028893234,RETURN,1,,return unknown();,21,1448,,,1
146028893235,RETURN,-1,,return lhs;,17,1454,,,7
146028893236,RETURN,-1,,return unknown();,25,1462,,,1
146028893237,RETURN,-1,,return unknown();,21,1467,,,1
146028893238,RETURN,1,,return unknown();,21,1472,,,1
146028893239,RETURN,1,,return ValueFlow::Value{strValue[static_cast<std::size_t>(index)]};,21,1475,,,1
146028893240,RETURN,1,,return ValueFlow::Value{};,21,1477,,,1
146028893241,RETURN,1,,return std::move(result.front());,29,1491,,,1
146028893242,RETURN,1,,return std::move(result.front());,29,1499,,,1
146028893243,RETURN,-1,,return unknown();,21,1501,,,3
146028893244,RETURN,-1,,return r;,17,1503,,,9
146028893245,RETURN,1,,return unknown();,21,1509,,,1
146028893246,RETURN,-1,,return unknown();,25,1516,,,1
146028893247,RETURN,-1,,return lhs;,17,1523,,,6
146028893248,RETURN,1,,return unknown();,21,1527,,,1
146028893249,RETURN,1,,return execute(child->astOperand2());,21,1530,,,1
146028893250,RETURN,1,,return execute(child->astOperand1());,21,1532,,,1
146028893251,RETURN,-1,,return unknown();,17,1534,,,8
146028893252,RETURN,1,,return execute(expr->astOperand2());,25,1538,,,1
146028893253,RETURN,-1,,return unknown();,21,1539,,,2
146028893254,RETURN,-1,,return execute(expr->astOperand1());,17,1541,,,2
146028893255,RETURN,-1,,return result;,17,1549,,,4
146028893256,RETURN,1,,return unknown();,37,1569,,,1
146028893257,RETURN,1,,return lf(args);,29,1583,,,1
146028893258,RETURN,-1,,"return evaluateLibraryFunction(arg_map, returnValue, settings, ftok->isCpp());",29,1593,,,5
146028893259,RETURN,-1,,return result;,17,1611,,,9
146028893260,RETURN,-1,,return unknown();,13,1614,,,11
146028893261,RETURN,1,,return nullptr;,17,1619,,,1
146028893262,RETURN,1,,return nullptr;,17,1633,,,1
146028893263,RETURN,-1,,return *it;,13,1634,,,7
146028893264,RETURN,-1,,return returnValue;,13,1642,,,4
146028893265,RETURN,1,,return unknown();,17,1652,,,1
146028893266,RETURN,1,,return v;,17,1655,,,1
146028893267,RETURN,1,,return v;,17,1657,,,1
146028893268,RETURN,1,,return v;,21,1660,,,1
146028893269,RETURN,-1,,return v2;,17,1675,,,10
146028893270,RETURN,1,,return v;,17,1678,,,1
146028893271,RETURN,1,,return *value;,17,1680,,,1
146028893272,RETURN,-1,,return v;,13,1681,,,13
146028893273,RETURN,1,,return {unknown()};,17,1687,,,1
146028893274,RETURN,1,,return {unknown()};,17,1689,,,1
146028893275,RETURN,1,,return {execute(top->astOperand1())};,21,1694,,,1
146028893276,RETURN,1,,return {unknown()};,25,1698,,,1
146028893277,RETURN,1,,return {unknown()};,25,1701,,,1
146028893278,RETURN,1,,return {unknown()};,25,1707,,,1
146028893279,RETURN,-1,,return {unknown()};,25,1722,,,1
146028893280,RETURN,1,,return result;,25,1725,,,1
146028893281,RETURN,-1,,return {unknown()};,21,1728,,,1
146028893282,RETURN,-1,,return {};,13,1731,,,4
146028893283,RETURN,-1,,return ex.execute(expr);,5,1739,,,3
146028893284,RETURN,-1,,return ex.execute(scope);,5,1745,,,3
146028893285,RETURN,1,,return nullptr;,13,1758,,,1
146028893286,RETURN,1,,return nullptr;,17,1772,,,1
146028893287,RETURN,1,,return nullptr;,9,1778,,,1
146028893288,RETURN,-1,,"return {tokenList, expr};",5,1793,,,12
146028893289,RETURN,1,,return ValueFlow::Value::unknown();,17,1812,,,1
146028893290,RETURN,-1,,"return execute(expr.get(), pm, settings);",13,1819,,,5
146028893291,RETURN,-1,,"return functions.at(returnValue)(args, settings);",5,1822,,,4
146028893292,RETURN,-1,,return x == 1;,17,52,,,1
146028893293,RETURN,-1,,return x == 0;,17,55,,,1
146028893294,RETURN,1,,return ChildrenToVisit::none;,21,127,,,1
146028893295,RETURN,1,,return ChildrenToVisit::op1_and_op2;,21,130,,,1
146028893296,RETURN,-1,,return ChildrenToVisit::done;,17,131,,,7
146028893297,RETURN,1,,return ChildrenToVisit::done;,21,141,,,1
146028893298,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,17,142,,,3
146028893299,RETURN,-1,,"return std::make_pair(checkThen, checkElse);",13,57,,,7
146028893300,RETURN,1,,return false;,17,63,,,1
146028893301,RETURN,1,,return false;,17,65,,,1
146028893302,RETURN,-1,,return true;,13,68,,,6
146028893303,RETURN,1,,return nullptr;,17,74,,,1
146028893304,RETURN,1,,return nullptr;,17,76,,,1
146028893305,RETURN,1,,return nullptr;,25,81,,,1
146028893306,RETURN,1,,return nullptr;,25,83,,,1
146028893307,RETURN,1,,return nullptr;,21,90,,,1
146028893308,RETURN,-1,,return ftok;,17,91,,,3
146028893309,RETURN,-1,,return nullptr;,13,93,,,6
146028893310,RETURN,1,,return nullptr;,17,99,,,1
146028893311,RETURN,1,,return tok;,17,101,,,1
146028893312,RETURN,-1,,return top;,13,106,,,8
146028893313,RETURN,1,,return tok->linkAt(-1);,17,114,,,1
146028893314,RETURN,1,,return tok->previous();,17,116,,,1
146028893315,RETURN,-1,,return tok;,13,117,,,4
146028893316,RETURN,-1,,return continueB;,13,133,,,4
146028893317,RETURN,-1,,return result;,13,144,,,4
146028893318,RETURN,1,,return action;,21,152,,,1
146028893319,RETURN,-1,,return result;,13,155,,,4
146028893320,RETURN,1,,return parent;,25,186,,,1
146028893321,RETURN,1,,return parent;,25,188,,,1
146028893322,RETURN,1,,return parent;,21,191,,,1
146028893323,RETURN,1,,return parent;,21,193,,,1
146028893324,RETURN,-1,,return nullptr;,13,195,,,4
146028893325,RETURN,1,,return;,17,200,,,1
146028893326,RETURN,1,,return tok->astParent();,21,387,,,1
146028893327,RETURN,-1,,return nullptr;,13,390,,,3
146028893328,RETURN,1,,return start->previous();,21,397,,,1
146028893329,RETURN,1,,return start;,21,399,,,1
146028893330,RETURN,-1,,return nullptr;,13,401,,,2
146028893331,RETURN,1,,return;,9,409,,,1
146028893332,RETURN,-1,,return getpid();,5,53,,,1
146028893333,RETURN,-1,,"return """";",13,92,,,2
146028893334,RETURN,1,,"return ""could not open file"";",9,98,,,1
146028893335,RETURN,1,,"return ""not a valid JSON - "" + lastErr;",13,104,,,1
146028893336,RETURN,1,,"return ""'productName' is not a string"";",17,112,,,1
146028893337,RETURN,1,,"return ""'about' is not a string"";",17,121,,,1
146028893338,RETURN,1,,"return ""'addons' is not an array"";",17,130,,,1
146028893339,RETURN,1,,"return ""'addons' array entry is not a string"";",21,134,,,1
146028893340,RETURN,1,,"return ""'suppressions' is not an array"";",17,148,,,1
146028893341,RETURN,1,,"return ""'suppressions' array entry is not a string"";",21,152,,,1
146028893342,RETURN,1,,"return ""could not parse suppression '"" + s + ""' - "" + err;",21,156,,,1
146028893343,RETURN,1,,"return ""'safety' is not a bool"";",17,165,,,1
146028893344,RETURN,-1,,"return """";",5,170,,,18
146028893345,RETURN,1,,return {};,9,175,,,1
146028893346,RETURN,1,,return {};,9,178,,,1
146028893347,RETURN,1,,return {};,9,180,,,1
146028893348,RETURN,-1,,return {};,9,190,,,8
146028893349,RETURN,-1,,"return {productName.substr(0, pos1), productName.substr(pos1+1)};",5,192,,,7
146028893350,RETURN,1,,"return std::string(""--enable parameter is empty"");",17,203,,,1
146028893351,RETURN,1,,return errmsg;,17,206,,,1
146028893352,RETURN,1,,"return std::string(""--enable parameter is empty"");",13,211,,,1
146028893353,RETURN,-1,,"return parseEnabled(str.substr(prevPos), groups);",9,212,,,7
146028893354,RETURN,1,,"return "" parameter is empty"";",13,249,,,1
146028893355,RETURN,-1,,"return "" parameter with the unknown name '"" + str + ""'"";",9,250,,,2
146028893356,RETURN,-1,,"return """";",5,253,,,7
146028893357,RETURN,-1,,"return applyEnabled(str, true);",5,258,,,1
146028893358,RETURN,-1,,"return applyEnabled(str, false);",5,263,,,1
146028893359,RETURN,1,,"return (enable ? ""--enable"" : ""--disable"") + errmsg;",9,271,,,1
146028893360,RETURN,-1,,return errmsg;,5,285,,,11
146028893361,RETURN,1,,return false;,9,291,,,1
146028893362,RETURN,1,,return false;,9,293,,,1
146028893363,RETURN,-1,,return true;,5,294,,,3
146028893364,RETURN,1,,return true;,9,637,,,1
146028893365,RETURN,1,,return true;,9,639,,,1
146028893366,RETURN,1,,return true;,9,641,,,1
146028893367,RETURN,1,,return true;,9,643,,,1
146028893368,RETURN,1,,return true;,9,645,,,1
146028893369,RETURN,1,,return true;,9,647,,,1
146028893370,RETURN,-1,,return false;,5,648,,,7
146028893371,RETURN,-1,,"return a.name == ""premiumaddon.json"";",13,655,,,1
146028893372,RETURN,1,,return text;,9,691,,,1
146028893373,RETURN,-1,,return it != mMisraRuleTexts.end() ? it->second : text;,5,693,,,4
146028893374,RETURN,-1,,return SourceLocation();,9,76,,,1
146028893375,RETURN,-1,,return Standards::C89;,9,30,,,3
146028893376,RETURN,-1,,return Standards::C99;,9,32,,,6
146028893377,RETURN,-1,,return Standards::C11;,9,34,,,9
146028893378,RETURN,-1,,return Standards::C17;,9,36,,,12
146028893379,RETURN,-1,,return Standards::C23;,9,38,,,15
146028893380,RETURN,-1,,return Standards::CLatest;,9,40,,,18
146028893381,RETURN,1,,return false;,9,48,,,1
146028893382,RETURN,-1,,return b;,5,55,,,7
146028893383,RETURN,-1,,return getC(c);,5,60,,,1
146028893384,RETURN,-1,,"return ""c89"";",9,67,,,3
146028893385,RETURN,-1,,"return ""c99"";",9,69,,,6
146028893386,RETURN,-1,,"return ""c11"";",9,71,,,9
146028893387,RETURN,-1,,"return ""c17"";",9,73,,,12
146028893388,RETURN,-1,,"return ""c23"";",9,75,,,15
146028893389,RETURN,-1,,"return """";",5,77,,,2
146028893390,RETURN,-1,,return mapC(simplecpp::getCStd(std));,5,82,,,1
146028893391,RETURN,-1,,return Standards::CPP03;,9,89,,,3
146028893392,RETURN,-1,,return Standards::CPP11;,9,91,,,6
146028893393,RETURN,-1,,return Standards::CPP14;,9,93,,,9
146028893394,RETURN,-1,,return Standards::CPP17;,9,95,,,12
146028893395,RETURN,-1,,return Standards::CPP20;,9,97,,,15
146028893396,RETURN,-1,,return Standards::CPP23;,9,99,,,18
146028893397,RETURN,-1,,return Standards::CPP26;,9,101,,,21
146028893398,RETURN,-1,,return Standards::CPPLatest;,9,103,,,24
146028893399,RETURN,1,,return false;,9,111,,,1
146028893400,RETURN,-1,,return b;,5,118,,,7
146028893401,RETURN,-1,,return getCPP(cpp);,5,123,,,1
146028893402,RETURN,-1,,"return ""c++03"";",9,130,,,3
146028893403,RETURN,-1,,"return ""c++11"";",9,132,,,6
146028893404,RETURN,-1,,"return ""c++14"";",9,134,,,9
146028893405,RETURN,-1,,"return ""c++17"";",9,136,,,12
146028893406,RETURN,-1,,"return ""c++20"";",9,138,,,15
146028893407,RETURN,-1,,"return ""c++23"";",9,140,,,18
146028893408,RETURN,-1,,"return ""c++26"";",9,142,,,21
146028893409,RETURN,-1,,"return """";",5,144,,,2
146028893410,RETURN,-1,,return mapCPP(simplecpp::getCppStd(std));,5,149,,,1
146028893411,RETURN,-1,,return setC(str) || setCPP(str);,5,154,,,1
146028893412,RETURN,-1,,return ret;,13,71,,,5
146028893413,RETURN,-1,,return ostr.str();,5,94,,,8
146028893414,RETURN,1,,return ret;,9,105,,,1
146028893415,RETURN,-1,,return ret;,5,116,,,7
146028893416,RETURN,1,,return ret;,9,124,,,1
146028893417,RETURN,1,,return ret;,9,127,,,1
146028893418,RETURN,-1,,return ret;,5,136,,,11
146028893419,RETURN,1,,return;,9,159,,,1
146028893420,RETURN,-1,,return ret;,5,57,,,8
146028893421,RETURN,-1,,return true;,9,67,,,9
146028893422,RETURN,-1,,return c > 0 && std::isalnum(c);,9,69,,,11
146028893423,RETURN,1,,return errmsg;,13,103,,,1
146028893424,RETURN,-1,,"return """";",5,106,,,8
146028893425,RETURN,1,,"return std::string(""failed to load suppressions XML '"") + filename + ""' ("" + tinyxml2::XMLDocument::ErrorIDToName(error) + "")."";",9,115,,,1
146028893426,RETURN,1,,"return std::string(""failed to load suppressions XML '"") + filename + ""' (no root node found)."";",9,119,,,1
146028893427,RETURN,1,,"return std::string(""invalid suppression xml file '"") + filename + ""', expected 'suppress' element but got a '"" + e->Name() + ""'."";",13,123,,,1
146028893428,RETURN,1,,"return std::string(""unknown element '"") + name + ""' in suppressions XML '"" + filename + ""', expected id/fileName/lineNumber/symbolName/hash."";",17,140,,,1
146028893429,RETURN,1,,return err;,13,145,,,1
146028893430,RETURN,-1,,"return """";",5,148,,,9
146028893431,RETURN,-1,,return suppressions;,9,161,,,2
146028893432,RETURN,-1,,return suppressions;,13,180,,,3
146028893433,RETURN,-1,,return suppressions;,17,198,,,3
146028893434,RETURN,-1,,return suppressions;,5,205,,,8
146028893435,RETURN,-1,,return suppression;,5,253,,,8
146028893436,RETURN,-1,,return addSuppression(parseLine(line));,5,258,,,1
146028893437,RETURN,-1,,"return ""suppression '"" + suppression.toString() + ""' already exists"";",9,269,,,1
146028893438,RETURN,1,,"return ""Failed to add suppression. No id."";",9,274,,,1
146028893439,RETURN,-1,,"return ""Failed to add suppression. Invalid id \\"""" + suppression.errorId + ""\\"""";",13,278,,,1
146028893440,RETURN,-1,,"return ""Failed to add suppression. Invalid id \\"""" + suppression.errorId + ""\\"""";",13,281,,,1
146028893441,RETURN,1,,"return ""Failed to add suppression. Invalid glob pattern '"" + suppression.errorId + ""'."";",9,286,,,1
146028893442,RETURN,1,,"return ""Failed to add suppression. Invalid glob pattern '"" + suppression.fileName + ""'."";",9,288,,,1
146028893443,RETURN,-1,,"return """";",5,292,,,10
146028893444,RETURN,1,,return errmsg;,13,300,,,1
146028893445,RETURN,-1,,"return """";",5,302,,,2
146028893446,RETURN,-1,,return true;,9,317,,,2
146028893447,RETURN,-1,,return false;,5,320,,,5
146028893448,RETURN,1,,return false;,9,331,,,1
146028893449,RETURN,1,,return false;,9,354,,,1
146028893450,RETURN,1,,return false;,9,358,,,1
146028893451,RETURN,-1,,return true;,5,373,,,17
146028893452,RETURN,1,,return false;,9,379,,,1
146028893453,RETURN,1,,return false;,9,381,,,1
146028893454,RETURN,1,,return false;,13,384,,,1
146028893455,RETURN,1,,return false;,13,387,,,1
146028893456,RETURN,1,,return false;,17,390,,,1
146028893457,RETURN,1,,return false;,13,393,,,1
146028893458,RETURN,1,,return true;,17,407,,,1
146028893459,RETURN,-1,,return false;,9,409,,,2
146028893460,RETURN,-1,,return true;,5,411,,,5
146028893461,RETURN,1,,return false;,9,417,,,1
146028893462,RETURN,-1,,return true;,5,420,,,4
146028893463,RETURN,1,,return ret.substr(1);,9,438,,,1
146028893464,RETURN,-1,,return ret;,5,439,,,8
146028893465,RETURN,-1,,return returnValue;,5,456,,,7
146028893466,RETURN,1,,return true;,13,469,,,1
146028893467,RETURN,-1,,return false;,5,471,,,3
146028893468,RETURN,1,,return false;,13,480,,,1
146028893469,RETURN,-1,,"return isSuppressed(SuppressionList::ErrorMessage::fromErrorMessage(errmsg, macroNames));",5,482,,,2
146028893470,RETURN,-1,,return result;,5,542,,,4
146028893471,RETURN,-1,,return result;,5,565,,,4
146028893472,RETURN,-1,,return result;,5,584,,,3
146028893473,RETURN,-1,,return mSuppressions;,5,591,,,2
146028893474,RETURN,-1,,return err;,5,650,,,4
146028893475,RETURN,-1,,return s;,5,669,,,5
146028893476,RETURN,1,,return;,9,60,,,1
146028893477,RETURN,-1,,return tok;,5,104,,,3
146028893478,RETURN,1,,return false;,9,110,,,1
146028893479,RETURN,1,,return true;,9,113,,,1
146028893480,RETURN,1,,return false;,9,115,,,1
146028893481,RETURN,1,,return true;,13,119,,,1
146028893482,RETURN,1,,return !findLambdaStartToken(tok2);,13,121,,,1
146028893483,RETURN,-1,,return isExecutableScope(startTok);,9,122,,,5
146028893484,RETURN,-1,,return false;,5,124,,,7
146028893485,RETURN,1,,return nullptr;,9,130,,,1
146028893486,RETURN,1,,return tok;,9,134,,,1
146028893487,RETURN,-1,,"return Token::simpleMatch(tok, ""{"") ? tok : nullptr;",5,138,,,6
146028893488,RETURN,1,,return false;,13,153,,,1
146028893489,RETURN,-1,,return endInitList.top().second == scope;,9,154,,,2
146028893490,RETURN,-1,,return lambdaStartToken;,9,166,,,10
146028893491,RETURN,1,,return;,9,806,,,1
146028893492,RETURN,1,,return false;,17,1553,,,1
146028893493,RETURN,-1,,return var->nameToken() == tok2;,13,1554,,,4
146028893494,RETURN,1,,return false;,9,1543,,,1
146028893495,RETURN,1,,return true;,9,1546,,,1
146028893496,RETURN,1,,return false;,9,1548,,,1
146028893497,RETURN,1,,return false;,13,1557,,,1
146028893498,RETURN,-1,,return true;,5,1559,,,5
146028893499,RETURN,-1,,return result + tok->expressionString();,5,1567,,,4
146028893500,RETURN,-1,,"return std::tie(parentOp, operand1, operand2) < std::tie(k.parentOp, k.operand1, k.operand2);",13,1576,,,1
146028893501,RETURN,-1,,return scope && (scope->type == ScopeType::eLambda || scope->type == ScopeType::eNamespace);,9,1697,,,1
146028893502,RETURN,1,,return false;,9,1906,,,1
146028893503,RETURN,-1,,return true;,13,1923,,,6
146028893504,RETURN,-1,,return true;,17,1937,,,6
146028893505,RETURN,1,,return false;,9,1943,,,1
146028893506,RETURN,1,,return false;,13,1953,,,1
146028893507,RETURN,1,,return false;,21,2003,,,1
146028893508,RETURN,1,,return false;,17,2008,,,1
146028893509,RETURN,1,,return false;,21,2013,,,1
146028893510,RETURN,1,,return false;,21,2034,,,1
146028893511,RETURN,1,,return false;,17,2040,,,1
146028893512,RETURN,-1,,return true;,13,2054,,,4
146028893513,RETURN,-1,,return true;,9,2067,,,4
146028893514,RETURN,1,,return false;,13,2073,,,1
146028893515,RETURN,-1,,return true;,13,2081,,,4
146028893516,RETURN,-1,,return true;,13,2094,,,5
146028893517,RETURN,-1,,return false;,5,2099,,,3
146028893518,RETURN,1,,return true;,25,2127,,,1
146028893519,RETURN,-1,,return false;,17,2129,,,2
146028893520,RETURN,1,,return &*it;,17,2132,,,1
146028893521,RETURN,-1,,return nullptr;,9,2134,,,2
146028893522,RETURN,1,,return;,9,2169,,,1
146028893523,RETURN,1,,return *this;,9,2267,,,1
146028893524,RETURN,-1,,return *this;,5,2285,,,16
146028893525,RETURN,-1,,return mScope && mScope->isClassOrStructOrUnion();,5,2289,,,1
146028893526,RETURN,-1,,"return isArray() && nameToken() && nameToken()->previous() && (nameToken()->strAt(-1) == ""*"");",5,2294,,,1
146028893527,RETURN,-1,,return mValueType ? (mValueType->sign == ValueType::Sign::UNSIGNED) : mTypeStartToken->isUnsigned();,5,2299,,,1
146028893528,RETURN,-1,,return declEnd;,5,2312,,,5
146028893529,RETURN,1,,return;,13,2405,,,1
146028893530,RETURN,1,,return;,13,2433,,,1
146028893531,RETURN,1,,return nullptr;,9,2449,,,1
146028893532,RETURN,1,,return mValueType->smartPointerType;,9,2452,,,1
146028893533,RETURN,-1,,return ptrType;,9,2466,,,6
146028893534,RETURN,-1,,return nullptr;,5,2468,,,7
146028893535,RETURN,1,,return nullptr;,9,2474,,,1
146028893536,RETURN,1,,return mValueType->containerTypeToken->type();,9,2477,,,1
146028893537,RETURN,-1,,return nullptr;,5,2479,,,3
146028893538,RETURN,-1,,return getFlag(fIsStlType) && valueType() && valueType()->container && valueType()->container->stdStringLike && valueType()->container->view;,5,2484,,,1
146028893539,RETURN,-1,,return ret;,5,2496,,,3
146028893540,RETURN,1,,return false;,9,2502,,,1
146028893541,RETURN,1,,return true;,9,2504,,,1
146028893542,RETURN,-1,,"return name.size() > 8 && startsWith(name,""operator"") && std::strchr(""+-*/%&|~^<>!=[("", name[8]);",5,2506,,,5
146028893543,RETURN,-1,,"return Token::Match(tok, ""&|&&| ."");",5,2513,,,2
146028893544,RETURN,-1,,return tok1;,5,2702,,,4
146028893545,RETURN,-1,,"return ret + "")"";",5,2715,,,6
146028893546,RETURN,-1,,return name;,5,2726,,,4
146028893547,RETURN,1,,return false;,9,2747,,,1
146028893548,RETURN,1,,return true;,25,2767,,,1
146028893549,RETURN,1,,return true;,25,2780,,,1
146028893550,RETURN,-1,,return false;,5,2787,,,14
146028893551,RETURN,-1,,return true;,17,2815,,,3
146028893552,RETURN,-1,,return false;,5,2819,,,4
146028893553,RETURN,1,,return start->next();,17,2843,,,1
146028893554,RETURN,-1,,return start;,9,2845,,,4
146028893555,RETURN,1,,return true;,9,2825,,,1
146028893556,RETURN,1,,return true;,9,2834,,,1
146028893557,RETURN,1,,return true;,17,2857,,,1
146028893558,RETURN,-1,,return !first && !second;,21,2882,,,1
146028893559,RETURN,-1,,return !second->nextArgument();,17,2885,,,1
146028893560,RETURN,-1,,return !first->nextArgument();,17,2892,,,1
146028893561,RETURN,-1,,return false;,5,3060,,,12
146028893562,RETURN,1,,return true;,9,3069,,,1
146028893563,RETURN,1,,return true;,9,3072,,,1
146028893564,RETURN,-1,,return false;,5,3073,,,5
146028893565,RETURN,1,,return nullptr;,9,3079,,,1
146028893566,RETURN,1,,return tok->next();,13,3086,,,1
146028893567,RETURN,-1,,return nullptr;,5,3088,,,3
146028893568,RETURN,1,,return false;,9,3095,,,1
146028893569,RETURN,1,,return false;,9,3097,,,1
146028893570,RETURN,1,,return unknown;,9,3100,,,1
146028893571,RETURN,1,,return unknown;,9,3103,,,1
146028893572,RETURN,1,,return unknown;,9,3105,,,1
146028893573,RETURN,1,,return true;,9,3107,,,1
146028893574,RETURN,1,,return false;,9,3109,,,1
146028893575,RETURN,-1,,return emptyEnableIf;,13,3126,,,1
146028893576,RETURN,1,,return true;,9,3131,,,1
146028893577,RETURN,1,,return unknown;,9,3133,,,1
146028893578,RETURN,-1,,return false;,5,3134,,,20
146028893579,RETURN,-1,,"return Token::findsimplematch(defStart, ""const"", defEnd);",9,3140,,,1
146028893580,RETURN,-1,,"return checkReturns(function, unknown, false, [](const Token* defStart, const Token* defEnd) {
        return Token::findsimplematch(defStart, ""const"", defEnd);
    });",5,3139,,,1
146028893581,RETURN,-1,,"return includeRValueRef ? Token::Match(defEnd->previous(), ""&|&&"") : Token::simpleMatch(defEnd->previous(), ""&"");",9,3147,,,1
146028893582,RETURN,-1,,"return checkReturns(function, unknown, false, [includeRValueRef](const Token* /*defStart*/, const Token* defEnd) {
        return includeRValueRef ? Token::Match(defEnd->previous(), ""&|&&"") : Token::simpleMatch(defEnd->previous(), ""&"");
    });",5,3146,,,1
146028893583,RETURN,-1,,"return Token::simpleMatch(defEnd->previous(), ""*"");",9,3154,,,1
146028893584,RETURN,-1,,"return checkReturns(function, unknown, false, [](const Token* /*defStart*/, const Token* defEnd) {
        return Token::simpleMatch(defEnd->previous(), ""*"");
    });",5,3153,,,1
146028893585,RETURN,-1,,return defEnd->previous() && defEnd->previous()->isStandardType();,9,3161,,,1
146028893586,RETURN,-1,,"return checkReturns(function, unknown, true, [](const Token* /*defStart*/, const Token* defEnd) {
        return defEnd->previous() && defEnd->previous()->isStandardType();
    });",5,3160,,,1
146028893587,RETURN,-1,,"return Token::simpleMatch(defEnd->previous(), ""void"");",9,3168,,,1
146028893588,RETURN,-1,,"return checkReturns(function, unknown, true, [](const Token* /*defStart*/, const Token* defEnd) {
        return Token::simpleMatch(defEnd->previous(), ""void"");
    });",5,3167,,,1
146028893589,RETURN,1,,return result;,9,3176,,,1
146028893590,RETURN,1,,return result;,9,3179,,,1
146028893591,RETURN,1,,return result;,9,3181,,,1
146028893592,RETURN,-1,,return result;,5,3197,,,8
146028893593,RETURN,1,,return nullptr;,9,3203,,,1
146028893594,RETURN,1,,return arg->link()->next();,9,3205,,,1
146028893595,RETURN,1,,return arg->link()->linkAt(2)->next();,9,3207,,,1
146028893596,RETURN,-1,,return nullptr;,5,3208,,,4
146028893597,RETURN,1,,return true;,13,3215,,,1
146028893598,RETURN,1,,return true;,13,3217,,,1
146028893599,RETURN,1,,return true;,13,3222,,,1
146028893600,RETURN,1,,return true;,13,3224,,,1
146028893601,RETURN,1,,return true;,9,3228,,,1
146028893602,RETURN,-1,,return false;,5,3230,,,4
146028893603,RETURN,-1,,return function;,9,3262,,,3
146028893604,RETURN,-1,,return nullptr;,5,3264,,,10
146028893605,RETURN,-1,,return &scope->functionList.back();,5,3271,,,4
146028893606,RETURN,1,,return;,13,3304,,,1
146028893607,RETURN,1,,return;,9,3309,,,1
146028893608,RETURN,-1,,return;,37,3335,,,2
146028893609,RETURN,-1,,return;,29,3347,,,9
146028893610,RETURN,-1,,return;,33,3413,,,2
146028893611,RETURN,-1,,return;,29,3437,,,5
146028893612,RETURN,-1,,return classScope && classScope->type == ScopeType::eClass;,5,3489,,,1
146028893613,RETURN,-1,,"return (classDef && classDef->str() == ""enum"") ||
           (classScope && classScope->type == ScopeType::eEnum);",5,3495,,,1
146028893614,RETURN,-1,,return classScope && classScope->type == ScopeType::eStruct;,5,3501,,,1
146028893615,RETURN,-1,,return classScope && classScope->type == ScopeType::eUnion;,5,3506,,,1
146028893616,RETURN,1,,return nullptr;,17,3524,,,1
146028893617,RETURN,1,,return nullptr;,17,3549,,,1
146028893618,RETURN,1,,return nullptr;,17,3555,,,1
146028893619,RETURN,1,,return nullptr;,17,3568,,,1
146028893620,RETURN,-1,,return tok2;,5,3590,,,4
146028893621,RETURN,1,,return emptyString;,9,3601,,,1
146028893622,RETURN,-1,,return result;,5,3614,,,9
146028893623,RETURN,1,,return it->second;,13,3648,,,1
146028893624,RETURN,1,,return func;,17,3655,,,1
146028893625,RETURN,-1,,return nullptr;,5,3658,,,3
146028893626,RETURN,1,,return true;,13,3671,,,1
146028893627,RETURN,1,,return true;,13,3673,,,1
146028893628,RETURN,1,,return true;,13,3677,,,1
146028893629,RETURN,-1,,return false;,5,3679,,,4
146028893630,RETURN,-1,,return d.type && (d.type == this || d.type->findDependency(ancestor));,9,3685,,,1
146028893631,RETURN,-1,,"return this == ancestor || std::any_of(derivedFrom.cbegin(), derivedFrom.cend(), [&](const BaseInfo& d) {
        return d.type && (d.type == this || d.type->findDependency(ancestor));
    });",5,3684,,,1
146028893632,RETURN,1,,return true;,13,3693,,,1
146028893633,RETURN,1,,return true;,13,3695,,,1
146028893634,RETURN,-1,,return false;,5,3697,,,2
146028893635,RETURN,-1,,return true;,13,3722,,,7
146028893636,RETURN,-1,,return arr;,5,3763,,,13
146028893637,RETURN,-1,,"return ""Global"";",9,3770,,,3
146028893638,RETURN,-1,,"return ""Class"";",9,3772,,,6
146028893639,RETURN,-1,,"return ""Struct"";",9,3774,,,9
146028893640,RETURN,-1,,"return ""Union"";",9,3776,,,12
146028893641,RETURN,-1,,"return ""Namespace"";",9,3778,,,15
146028893642,RETURN,-1,,"return ""Function"";",9,3780,,,18
146028893643,RETURN,-1,,"return ""If"";",9,3782,,,21
146028893644,RETURN,-1,,"return ""Else"";",9,3784,,,24
146028893645,RETURN,-1,,"return ""For"";",9,3786,,,27
146028893646,RETURN,-1,,"return ""While"";",9,3788,,,30
146028893647,RETURN,-1,,"return ""Do"";",9,3790,,,33
146028893648,RETURN,-1,,"return ""Switch"";",9,3792,,,36
146028893649,RETURN,-1,,"return ""Try"";",9,3794,,,39
146028893650,RETURN,-1,,"return ""Catch"";",9,3796,,,42
146028893651,RETURN,-1,,"return ""Unconditional"";",9,3798,,,45
146028893652,RETURN,-1,,"return ""Lambda"";",9,3800,,,48
146028893653,RETURN,-1,,"return ""Enum"";",9,3802,,,51
146028893654,RETURN,-1,,"return ""Unknown"";",5,3804,,,2
146028893655,RETURN,-1,,return s;,5,3810,,,2
146028893656,RETURN,-1,,"return ""Public"";",9,3817,,,3
146028893657,RETURN,-1,,"return ""Protected"";",9,3819,,,6
146028893658,RETURN,-1,,"return ""Private"";",9,3821,,,9
146028893659,RETURN,-1,,"return ""Global"";",9,3823,,,12
146028893660,RETURN,-1,,"return ""Namespace"";",9,3825,,,15
146028893661,RETURN,-1,,"return ""Argument"";",9,3827,,,18
146028893662,RETURN,-1,,"return ""Local"";",9,3829,,,21
146028893663,RETURN,-1,,"return ""Throw"";",9,3831,,,24
146028893664,RETURN,-1,,"return ""Unknown"";",5,3833,,,2
146028893665,RETURN,-1,,"return ""Constructor"";",9,3840,,,3
146028893666,RETURN,-1,,"return ""CopyConstructor"";",9,3842,,,6
146028893667,RETURN,-1,,"return ""MoveConstructor"";",9,3844,,,9
146028893668,RETURN,-1,,"return ""OperatorEqual"";",9,3846,,,12
146028893669,RETURN,-1,,"return ""Destructor"";",9,3848,,,15
146028893670,RETURN,-1,,"return ""Function"";",9,3850,,,18
146028893671,RETURN,-1,,"return ""Lambda"";",9,3852,,,21
146028893672,RETURN,-1,,"return ""Unknown"";",9,3854,,,23
146028893673,RETURN,-1,,return oss.str();,5,3866,,,4
146028893674,RETURN,-1,,return oss.str();,5,3880,,,4
146028893675,RETURN,-1,,return oss.str();,5,3897,,,3
146028893676,RETURN,1,,return argType;,9,4436,,,1
146028893677,RETURN,1,,return argType;,21,4444,,,1
146028893678,RETURN,-1,,return nullptr;,5,4449,,,5
146028893679,RETURN,1,,return;,9,4459,,,1
146028893680,RETURN,1,,return;,9,4461,,,1
146028893681,RETURN,1,,return;,13,4467,,,1
146028893682,RETURN,1,,return;,21,4501,,,1
146028893683,RETURN,1,,return;,17,4507,,,1
146028893684,RETURN,1,,return true;,9,4599,,,1
146028893685,RETURN,1,,return true;,9,4602,,,1
146028893686,RETURN,1,,return false;,9,4606,,,1
146028893687,RETURN,-1,,return defaultVal;,5,4607,,,7
146028893688,RETURN,-1,,return result;,5,4630,,,5
146028893689,RETURN,1,,return nullptr;,9,4638,,,1
146028893690,RETURN,-1,,"return getOverriddenFunctionRecursive(nestedIn->definedType, foundAllBaseClasses);",5,4639,,,3
146028893691,RETURN,1,,return false;,9,4646,,,1
146028893692,RETURN,1,,return false;,9,4649,,,1
146028893693,RETURN,-1,,"return thisName.compare(0, pos + 1, baseName, 0, pos + 1) == 0;",5,4650,,,5
146028893694,RETURN,-1,,return f.isDestructor() && f.isImplicitlyVirtual();,17,4707,,,1
146028893695,RETURN,-1,,return func;,21,4700,,,1
146028893696,RETURN,1,,return &*it;,17,4710,,,1
146028893697,RETURN,-1,,return func;,17,4718,,,1
146028893698,RETURN,-1,,return nullptr;,5,4722,,,2
146028893699,RETURN,-1,,return &*it;,9,4730,,,4
146028893700,RETURN,-1,,return nullptr;,5,4732,,,2
146028893701,RETURN,-1,,return AccessControl::Global;,9,4789,,,3
146028893702,RETURN,-1,,return AccessControl::Private;,9,4791,,,6
146028893703,RETURN,-1,,return AccessControl::Public;,9,4793,,,9
146028893704,RETURN,-1,,return AccessControl::Public;,9,4795,,,12
146028893705,RETURN,-1,,return AccessControl::Namespace;,9,4797,,,15
146028893706,RETURN,-1,,return AccessControl::Local;,9,4799,,,17
146028893707,RETURN,1,,return;,9,4826,,,1
146028893708,RETURN,-1,,return tok->linkAt(2);,9,4942,,,1
146028893709,RETURN,-1,,return tok->linkAt(4);,9,4947,,,1
146028893710,RETURN,-1,,return next;,9,4955,,,4
146028893711,RETURN,-1,,return typeend->linkAt(1);,9,4973,,,4
146028893712,RETURN,-1,,return tok;,13,4994,,,2
146028893713,RETURN,-1,,return tok;,25,5020,,,2
146028893714,RETURN,-1,,return tok;,5,5028,,,14
146028893715,RETURN,-1,,return var.name() == varname;,9,5034,,,1
146028893716,RETURN,1,,return &*it;,9,5037,,,1
146028893717,RETURN,1,,return var;,21,5043,,,1
146028893718,RETURN,-1,,return nullptr;,5,5047,,,5
146028893719,RETURN,1,,return tok2;,13,5062,,,1
146028893720,RETURN,-1,,return tok;,5,5065,,,3
146028893721,RETURN,-1,,return tok;,5,5076,,,3
146028893722,RETURN,1,,return false;,9,5082,,,1
146028893723,RETURN,1,,return false;,9,5087,,,1
146028893724,RETURN,1,,return false;,9,5092,,,1
146028893725,RETURN,1,,return false;,13,5102,,,1
146028893726,RETURN,1,,return false;,9,5128,,,1
146028893727,RETURN,-1,,return nullptr != vartok;,5,5149,,,17
146028893728,RETURN,1,,return nullptr;,21,5192,,,1
146028893729,RETURN,-1,,return tok2;,5,5226,,,7
146028893730,RETURN,1,,return enumScope;,21,5237,,,1
146028893731,RETURN,-1,,return nullptr;,5,5241,,,2
146028893732,RETURN,1,,return e;,17,5254,,,1
146028893733,RETURN,-1,,return nullptr;,5,5257,,,2
146028893734,RETURN,1,,return nullptr;,9,5263,,,1
146028893735,RETURN,1,,return enumerator;,21,5314,,,1
146028893736,RETURN,1,,return enumerator;,25,5320,,,1
146028893737,RETURN,1,,return nullptr;,13,5327,,,1
146028893738,RETURN,1,,return enumerator;,13,5342,,,1
146028893739,RETURN,1,,return enumerator;,17,5359,,,1
146028893740,RETURN,1,,return enumerator;,25,5370,,,1
146028893741,RETURN,1,,return enumerator;,17,5386,,,1
146028893742,RETURN,1,,return enumerator;,21,5392,,,1
146028893743,RETURN,1,,return enumerator;,29,5401,,,1
146028893744,RETURN,-1,,return nullptr;,5,5410,,,8
146028893745,RETURN,1,,return nullptr;,21,5423,,,1
146028893746,RETURN,1,,return type;,21,5426,,,1
146028893747,RETURN,1,,return type;,21,5429,,,1
146028893748,RETURN,-1,,return nullptr;,5,5434,,,2
146028893749,RETURN,1,,return start->definedType;,13,5447,,,1
146028893750,RETURN,1,,return type;,17,5454,,,1
146028893751,RETURN,1,,return type;,21,5461,,,1
146028893752,RETURN,1,,return type;,21,5471,,,1
146028893753,RETURN,1,,return type;,21,5476,,,1
146028893754,RETURN,1,,return nullptr;,13,5487,,,1
146028893755,RETURN,1,,return type;,25,5540,,,1
146028893756,RETURN,1,,return scope->definedType;,17,5546,,,1
146028893757,RETURN,-1,,return nullptr;,5,5550,,,4
146028893758,RETURN,1,,return false;,9,5555,,,1
146028893759,RETURN,-1,,"return Token::simpleMatch(listTok, ""[ ]"");",5,5559,,,5
146028893760,RETURN,-1,,return true;,13,5569,,,2
146028893761,RETURN,-1,,return true;,13,5575,,,2
146028893762,RETURN,1,,return true;,13,5578,,,1
146028893763,RETURN,-1,,return false;,9,5579,,,4
146028893764,RETURN,-1,,"return std::any_of(nestedList.begin(), nestedList.end(), [&](const Scope* s) {
        // Inline function
        if (s->type == ScopeType::eUnconditional && Token::simpleMatch(s->bodyStart->previous(), "") {"")) {
            if (tokStart)
                *tokStart = nullptr; // bailout for e.g. loop-like macros
            return true;
        }
        // Lambda function
        if (!onlyInline && s->type == ScopeType::eLambda && !hasEmptyCaptureList(s->bodyStart)) {
            if (tokStart)
                *tokStart = s->bodyStart;
            return true;
        }
        if (s->hasInlineOrLambdaFunction(tokStart, onlyInline))
            return true;
        return false;
    });",5,5564,,,1
146028893765,RETURN,-1,,return base->classScope;,21,5619,,,1
146028893766,RETURN,1,,return t->classScope;,21,5624,,,1
146028893767,RETURN,-1,,return nullptr;,5,5629,,,2
146028893768,RETURN,-1,,return result;,5,5647,,,4
146028893769,RETURN,-1,,return;,13,5658,,,2
146028893770,RETURN,-1,,return;,13,5662,,,2
146028893771,RETURN,-1,,return;,13,5666,,,2
146028893772,RETURN,1,,return;,13,5669,,,1
146028893773,RETURN,1,,"return """";",9,5699,,,1
146028893774,RETURN,-1,,return ret;,13,5713,,,3
146028893775,RETURN,-1,,return typeToken->str();,13,5716,,,1
146028893776,RETURN,-1,,"return """";",5,5720,,,3
146028893777,RETURN,1,,return false;,13,5730,,,1
146028893778,RETURN,-1,,"return vt &&
        vt->type == argType->type &&
        (argType->sign == ValueType::Sign::UNKNOWN_SIGN || vt->sign == argType->sign) &&
        vt->pointer == argType->pointer &&
        (vt->constness & 1) >= (argType->constness & 1) &&
        (vt->volatileness & 1) >= (argType->volatileness & 1);",9,5732,,,4
146028893779,RETURN,1,,return false;,9,5725,,,1
146028893780,RETURN,-1,,"return std::any_of(classScope->functionList.cbegin(),
                       classScope->functionList.cend(),
                       [&](const Function& f) {
        if (!f.isConstructor() || f.argCount() != 1 || !f.getArgumentVar(0))
            return false;
        const ValueType* vt = f.getArgumentVar(0)->valueType();
        return vt &&
        vt->type == argType->type &&
        (argType->sign == ValueType::Sign::UNKNOWN_SIGN || vt->sign == argType->sign) &&
        vt->pointer == argType->pointer &&
        (vt->constness & 1) >= (argType->constness & 1) &&
        (vt->volatileness & 1) >= (argType->volatileness & 1);
    });",5,5726,,,2
146028893781,RETURN,-1,,return ret;,25,5871,,,4
146028893782,RETURN,-1,,return a.second > b.second;,9,5987,,,1
146028893783,RETURN,-1,,return m->isPure();,9,6010,,,1
146028893784,RETURN,-1,,return m->isImplicitlyVirtual() && m != *itPure;,9,6013,,,1
146028893785,RETURN,-1,,return matches.empty() ? nullptr : matches[0];,9,5792,,,1
146028893786,RETURN,1,,return func;,17,5971,,,1
146028893787,RETURN,1,,return fb[0].first;,13,5995,,,1
146028893788,RETURN,1,,return fb[0].first;,17,5998,,,1
146028893789,RETURN,1,,return fb[1].first;,17,6002,,,1
146028893790,RETURN,1,,return fb[0].first;,17,6004,,,1
146028893791,RETURN,1,,return matches[0];,9,6019,,,1
146028893792,RETURN,1,,return ret;,13,6037,,,1
146028893793,RETURN,-1,,return nullptr;,5,6040,,,31
146028893794,RETURN,1,,return nullptr;,9,6048,,,1
146028893795,RETURN,-1,,return f;,13,6054,,,1
146028893796,RETURN,1,,return f;,17,6082,,,1
146028893797,RETURN,1,,return func;,25,6116,,,1
146028893798,RETURN,1,,return func;,21,6128,,,1
146028893799,RETURN,1,,"return tok1->valueType()->typeScope->findFunction(tok, tok1->valueType()->constness == 1, tok1->valueType()->reference);",13,6137,,,1
146028893800,RETURN,1,,"return vt.typeScope->findFunction(tok, vt.constness == 1);",17,6142,,,1
146028893801,RETURN,1,,"return var->typeScope()->findFunction(tok, var->valueType()->constness == 1);",17,6146,,,1
146028893802,RETURN,1,,"return var->smartPointerType()->classScope->findFunction(tok, var->valueType()->constness == 1);",17,6148,,,1
146028893803,RETURN,1,,"return var->iteratorType()->classScope->findFunction(tok, var->valueType()->constness == 1);",17,6150,,,1
146028893804,RETURN,1,,"return vt.typeScope->findFunction(tok, vt.constness == 1);",21,6156,,,1
146028893805,RETURN,1,,return func;,17,6166,,,1
146028893806,RETURN,1,,return func;,25,6176,,,1
146028893807,RETURN,1,,"return vt.typeScope->findFunction(tok, false);",13,6186,,,1
146028893808,RETURN,-1,,return nullptr;,5,6188,,,7
146028893809,RETURN,-1,,return s.className == name;,9,6196,,,1
146028893810,RETURN,-1,,return it == scopeList.end() ? nullptr : &*it;,5,6198,,,3
146028893811,RETURN,1,,return scope;,13,6208,,,1
146028893812,RETURN,1,,return nestedScope;,17,6212,,,1
146028893813,RETURN,1,,return nestedScope;,13,6222,,,1
146028893814,RETURN,1,,return thisScope.findRecordInNestedList(nested_type->typeStart->str());,17,6230,,,1
146028893815,RETURN,1,,return const_cast<S*>(nested_type->classScope);,13,6232,,,1
146028893816,RETURN,-1,,return nullptr;,5,6235,,,6
146028893817,RETURN,-1,,"return findRecordInNestedListImpl<const Scope, const Type>(*this, name, isC, visited);",5,6241,,,2
146028893818,RETURN,-1,,"return findRecordInNestedListImpl<Scope, Type>(*this, name, isC, visited);",5,6247,,,2
146028893819,RETURN,1,,return it->second;,9,6259,,,1
146028893820,RETURN,1,,return t;,21,6268,,,1
146028893821,RETURN,-1,,return nullptr;,5,6274,,,6
146028893822,RETURN,-1,,"return findTypeImpl<const Scope, const Type>(*this, name);",5,6279,,,1
146028893823,RETURN,-1,,"return findTypeImpl<Scope, Type>(*this, name);",5,6284,,,1
146028893824,RETURN,-1,,return s->className == name;,9,6292,,,1
146028893825,RETURN,1,,return *it;,9,6295,,,1
146028893826,RETURN,1,,return child;,13,6300,,,1
146028893827,RETURN,-1,,return nullptr;,5,6302,,,5
146028893828,RETURN,-1,,return f.type == FunctionType::eDestructor;,9,6310,,,1
146028893829,RETURN,-1,,return it == functionList.end() ? nullptr : &*it;,5,6312,,,3
146028893830,RETURN,1,,return nullptr;,13,6335,,,1
146028893831,RETURN,1,,return scope->findRecordInNestedList(tok->str());,13,6337,,,1
146028893832,RETURN,-1,,return nullptr;,5,6341,,,5
146028893833,RETURN,1,,return startScope->definedType;,9,6354,,,1
146028893834,RETURN,1,,return scope->definedType;,17,6360,,,1
146028893835,RETURN,1,,return type;,25,6365,,,1
146028893836,RETURN,-1,,return nullptr;,9,6370,,,4
146028893837,RETURN,1,,return type;,17,6403,,,1
146028893838,RETURN,1,,return type;,21,6407,,,1
146028893839,RETURN,1,,return type;,25,6442,,,1
146028893840,RETURN,1,,return type;,29,6446,,,1
146028893841,RETURN,-1,,return nullptr;,5,6456,,,13
146028893842,RETURN,1,,return startScope->definedType;,9,6469,,,1
146028893843,RETURN,1,,return type;,17,6502,,,1
146028893844,RETURN,-1,,return nullptr;,5,6511,,,11
146028893845,RETURN,1,,return s;,9,6521,,,1
146028893846,RETURN,1,,"return findNamespace(tok, scope->nestedIn);",9,6523,,,1
146028893847,RETURN,-1,,return nullptr;,5,6525,,,5
146028893848,RETURN,1,,return nullptr;,17,6552,,,1
146028893849,RETURN,-1,,return const_cast<Function *>(function);,5,6559,,,9
146028893850,RETURN,-1,,return cpp_keywords.find(iName) != cpp_keywords.cend();,9,6569,,,3
146028893851,RETURN,-1,,return c_keywords.find(iName) != c_keywords.cend();,5,6572,,,6
146028893852,RETURN,-1,,return size;,5,6586,,,4
146028893853,RETURN,-1,,"return yield == Library::Container::Yield::ITEM || yield == Library::Container::Yield::AT_INDEX ||
           yield == Library::Container::Yield::BUFFER || yield == Library::Container::Yield::BUFFER_NT;",5,6678,,,1
146028893854,RETURN,-1,,return yield == Library::Container::Yield::BUFFER || yield == Library::Container::Yield::BUFFER_NT;,5,6684,,,1
146028893855,RETURN,-1,,return v.nameToken()->str() == name;,17,6901,,,1
146028893856,RETURN,1,,return;,9,6695,,,1
146028893857,RETURN,1,,return;,9,6697,,,1
146028893858,RETURN,-1,,return;,9,6717,,,2
146028893859,RETURN,-1,,return;,9,6803,,,2
146028893860,RETURN,-1,,return;,9,6816,,,8
146028893861,RETURN,-1,,return;,9,6822,,,5
146028893862,RETURN,-1,,return;,9,6829,,,5
146028893863,RETURN,-1,,return;,9,6835,,,5
146028893864,RETURN,-1,,return;,13,6848,,,5
146028893865,RETURN,-1,,return;,13,6861,,,4
146028893866,RETURN,-1,,return;,13,6871,,,2
146028893867,RETURN,-1,,return;,9,6889,,,9
146028893868,RETURN,1,,return;,17,6899,,,1
146028893869,RETURN,-1,,return;,13,6908,,,2
146028893870,RETURN,-1,,return;,9,6912,,,6
146028893871,RETURN,-1,,return;,13,7038,,,2
146028893872,RETURN,-1,,return;,9,7044,,,2
146028893873,RETURN,-1,,return;,9,7056,,,6
146028893874,RETURN,1,,return;,9,7060,,,1
146028893875,RETURN,1,,return;,9,7062,,,1
146028893876,RETURN,-1,,return;,13,7076,,,2
146028893877,RETURN,-1,,return;,13,7081,,,2
146028893878,RETURN,-1,,return;,17,7087,,,2
146028893879,RETURN,-1,,return;,17,7092,,,2
146028893880,RETURN,-1,,return;,17,7100,,,2
146028893881,RETURN,-1,,return;,17,7108,,,2
146028893882,RETURN,-1,,return;,17,7113,,,2
146028893883,RETURN,-1,,return;,13,7122,,,2
146028893884,RETURN,-1,,return;,13,7127,,,2
146028893885,RETURN,-1,,return;,13,7131,,,2
146028893886,RETURN,-1,,return;,13,7135,,,2
146028893887,RETURN,-1,,return;,13,7142,,,2
146028893888,RETURN,-1,,return;,13,7147,,,2
146028893889,RETURN,-1,,return;,9,7181,,,5
146028893890,RETURN,-1,,return type;,5,7212,,,4
146028893891,RETURN,1,,return nullptr;,17,7327,,,1
146028893892,RETURN,1,,return nullptr;,13,7420,,,1
146028893893,RETURN,-1,,return (type && (valuetype->type != ValueType::Type::UNKNOWN_TYPE || valuetype->pointer > 0 || valuetype->reference != Reference::None)) ? type : nullptr;,5,7438,,,15
146028893894,RETURN,-1,,"return tok && tok->valueType() && tok->valueType()->typeScope && tok->valueType()->typeScope->isClassOrStruct() ?
           tok->valueType()->typeScope :
           nullptr;",5,7443,,,1
146028893895,RETURN,1,,return it->second;,13,7456,,,1
146028893896,RETURN,1,,return it->second;,13,7463,,,1
146028893897,RETURN,-1,,return nullptr;,5,7466,,,8
146028893898,RETURN,1,,return nullptr;,9,7471,,,1
146028893899,RETURN,1,,return tok->function();,9,7473,,,1
146028893900,RETURN,1,,return lambda;,13,7481,,,1
146028893901,RETURN,-1,,return nullptr;,5,7483,,,4
146028893902,RETURN,-1,,return vt;,5,7924,,,3
146028893903,RETURN,1,,return ValueType::Type::VOID;,9,7930,,,1
146028893904,RETURN,1,,return ValueType::Type::BOOL;,9,7932,,,1
146028893905,RETURN,1,,return ValueType::Type::CHAR;,9,7934,,,1
146028893906,RETURN,1,,return ValueType::Type::SHORT;,9,7936,,,1
146028893907,RETURN,1,,return ValueType::Type::WCHAR_T;,9,7938,,,1
146028893908,RETURN,1,,return ValueType::Type::INT;,9,7940,,,1
146028893909,RETURN,1,,return longType ? ValueType::Type::LONGLONG : ValueType::Type::LONG;,9,7942,,,1
146028893910,RETURN,1,,return ValueType::Type::FLOAT;,9,7944,,,1
146028893911,RETURN,1,,return longType ? ValueType::Type::LONGDOUBLE : ValueType::Type::DOUBLE;,9,7946,,,1
146028893912,RETURN,-1,,return ValueType::Type::UNKNOWN_TYPE;,5,7947,,,10
146028893913,RETURN,-1,,return true;,9,7979,,,3
146028893914,RETURN,-1,,return true;,9,7984,,,3
146028893915,RETURN,-1,,return true;,9,8009,,,6
146028893916,RETURN,-1,,return true;,9,8022,,,4
146028893917,RETURN,-1,,return false;,5,8025,,,9
146028893918,RETURN,-1,,"return """";",9,8033,,,3
146028893919,RETURN,-1,,return ret;,5,8148,,,11
146028893920,RETURN,1,,return false;,9,8154,,,1
146028893921,RETURN,-1,,return constness & (1 << (pointer - indirect));,5,8155,,,2
146028893922,RETURN,1,,return false;,9,8161,,,1
146028893923,RETURN,-1,,return volatileness & (1 << (pointer - indirect));,5,8162,,,2
146028893924,RETURN,1,,return platform.sizeof_pointer;,9,8167,,,1
146028893925,RETURN,1,,return typeScope->definedType->sizeOf;,9,8170,,,1
146028893926,RETURN,-1,,return platform.sizeof_bool;,9,8174,,,3
146028893927,RETURN,-1,,return 1;,9,8176,,,6
146028893928,RETURN,-1,,return platform.sizeof_short;,9,8178,,,9
146028893929,RETURN,-1,,return platform.sizeof_wchar_t;,9,8180,,,12
146028893930,RETURN,-1,,return platform.sizeof_int;,9,8182,,,15
146028893931,RETURN,-1,,return platform.sizeof_long;,9,8184,,,18
146028893932,RETURN,-1,,return platform.sizeof_long_long;,9,8186,,,21
146028893933,RETURN,-1,,return platform.sizeof_float;,9,8188,,,24
146028893934,RETURN,-1,,return platform.sizeof_double;,9,8190,,,27
146028893935,RETURN,-1,,return platform.sizeof_long_double;,9,8192,,,30
146028893936,RETURN,-1,,return 0;,5,8198,,,4
146028893937,RETURN,-1,,"return std::tie(vt->type, vt->container, vt->pointer, vt->typeScope, vt->smartPointer);",9,8206,,,1
146028893938,RETURN,1,,return false;,9,8204,,,1
146028893939,RETURN,-1,,return tie(this) == tie(that);,5,8208,,,4
146028893940,RETURN,1,,return ret;,9,8275,,,1
146028893941,RETURN,-1,,return ret.substr(1);,5,8276,,,8
146028893942,RETURN,1,,return;,9,8283,,,1
146028893943,RETURN,1,,return ValueType::MatchResult::UNKNOWN;,9,8292,,,1
146028893944,RETURN,1,,return ValueType::MatchResult::FALLBACK1;,13,8295,,,1
146028893945,RETURN,1,,return ValueType::MatchResult::FALLBACK1;,13,8297,,,1
146028893946,RETURN,1,,return ValueType::MatchResult::FALLBACK2;,13,8299,,,1
146028893947,RETURN,-1,,return ValueType::MatchResult::NOMATCH;,9,8300,,,4
146028893948,RETURN,1,,return ValueType::MatchResult::NOMATCH;,13,8304,,,1
146028893949,RETURN,1,,return ValueType::MatchResult::NOMATCH;,13,8306,,,1
146028893950,RETURN,1,,return ValueType::MatchResult::NOMATCH;,13,8308,,,1
146028893951,RETURN,1,,return ValueType::MatchResult::NOMATCH;,13,8310,,,1
146028893952,RETURN,1,,return ValueType::MatchResult::FALLBACK1;,13,8314,,,1
146028893953,RETURN,1,,return func->type == ValueType::UNKNOWN_TYPE ? ValueType::MatchResult::UNKNOWN : ValueType::MatchResult::NOMATCH;,13,8316,,,1
146028893954,RETURN,1,,"return call->type < func->type ?
                   ValueType::MatchResult::FALLBACK1 :
                   ValueType::MatchResult::FALLBACK2;",13,8318,,,1
146028893955,RETURN,1,,return ValueType::MatchResult::FALLBACK1;,13,8322,,,1
146028893956,RETURN,1,,return ValueType::MatchResult::FALLBACK2;,13,8324,,,1
146028893957,RETURN,1,,return ValueType::MatchResult::FALLBACK2;,13,8326,,,1
146028893958,RETURN,-1,,return ValueType::MatchResult::UNKNOWN;,9,8327,,,7
146028893959,RETURN,1,,return ValueType::MatchResult::NOMATCH;,13,8333,,,1
146028893960,RETURN,1,,return ValueType::MatchResult::NOMATCH;,13,8338,,,1
146028893961,RETURN,1,,return ValueType::MatchResult::UNKNOWN;,13,8343,,,1
146028893962,RETURN,1,,return ValueType::MatchResult::FALLBACK1;,9,8347,,,1
146028893963,RETURN,1,,return ValueType::MatchResult::FALLBACK1;,9,8350,,,1
146028893964,RETURN,-1,,return ValueType::MatchResult::SAME;,5,8352,,,10
146028893965,RETURN,1,,return ValueType::MatchResult::SAME;,13,8379,,,1
146028893966,RETURN,1,,return ValueType::MatchResult::NOMATCH;,13,8381,,,1
146028893967,RETURN,-1,,return res;,5,8383,,,10
146028893968,RETURN,1,,return tok;,9,43,,,1
146028893969,RETURN,-1,,return tok;,5,63,,,3
146028893970,RETURN,-1,,return tokenAndName.token() == mToken;,13,71,,,1
146028893971,RETURN,-1,,return tokenAndName.name() == mName;,13,81,,,1
146028893972,RETURN,-1,,return tokenAndName.fullName() == mFullName;,13,91,,,1
146028893973,RETURN,-1,,"return ret + ""    </TokenAndName>\\n"";",5,248,,,4
146028893974,RETURN,1,,return mParamEnd->tokAt(4);,9,254,,,1
146028893975,RETURN,-1,,return nullptr;,5,255,,,2
146028893976,RETURN,1,,"return Token::findsimplematch(aliasStartToken(), "";"");",9,261,,,1
146028893977,RETURN,-1,,return nullptr;,5,262,,,2
146028893978,RETURN,1,,return true;,13,271,,,1
146028893979,RETURN,-1,,return false;,5,273,,,4
146028893980,RETURN,1,,return 0;,9,391,,,1
146028893981,RETURN,1,,return 0;,9,393,,,1
146028893982,RETURN,1,,return 0;,9,395,,,1
146028893983,RETURN,1,,return 0;,9,398,,,1
146028893984,RETURN,1,,return numberOfParameters;,21,408,,,1
146028893985,RETURN,1,,return numberOfParameters;,21,413,,,1
146028893986,RETURN,1,,return 0;,17,420,,,1
146028893987,RETURN,1,,return 0;,17,439,,,1
146028893988,RETURN,1,,return 0;,17,442,,,1
146028893989,RETURN,1,,return numberOfParameters;,21,445,,,1
146028893990,RETURN,1,,return numberOfParameters;,21,449,,,1
146028893991,RETURN,1,,return 0;,13,463,,,1
146028893992,RETURN,1,,return 0;,17,471,,,1
146028893993,RETURN,1,,return numberOfParameters;,17,473,,,1
146028893994,RETURN,1,,return numberOfParameters;,17,475,,,1
146028893995,RETURN,1,,return 0;,13,493,,,1
146028893996,RETURN,1,,return 0;,13,497,,,1
146028893997,RETURN,1,,return 0;,13,500,,,1
146028893998,RETURN,1,,return 0;,13,507,,,1
146028893999,RETURN,1,,return 0;,13,519,,,1
146028894000,RETURN,1,,return 0;,13,528,,,1
146028894001,RETURN,1,,"return tok->str() == "">"" && !Token::Match(tok->next(), ""%num%"") ? numberOfParameters : 0;",17,533,,,1
146028894002,RETURN,1,,"return !Token::Match(tok->next(), ""%num%"") ? numberOfParameters : 0;",21,537,,,1
146028894003,RETURN,1,,return 0;,17,546,,,1
146028894004,RETURN,-1,,return 0;,5,555,,,11
146028894005,RETURN,1,,return nullptr;,9,568,,,1
146028894006,RETURN,-1,,return tok;,5,596,,,9
146028894007,RETURN,-1,,return findTemplateDeclarationEndImpl(tok);,5,601,,,1
146028894008,RETURN,-1,,return findTemplateDeclarationEndImpl(tok);,5,606,,,1
146028894009,RETURN,1,,return;,9,612,,,1
146028894010,RETURN,1,,return;,9,629,,,1
146028894011,RETURN,1,,return false;,9,642,,,1
146028894012,RETURN,-1,,return true;,9,649,,,4
146028894013,RETURN,-1,,return false;,5,652,,,5
146028894014,RETURN,-1,,return codeWithTemplates;,5,709,,,4
146028894015,RETURN,1,,return nameToken->next();,9,730,,,1
146028894016,RETURN,1,,return end->next();,13,735,,,1
146028894017,RETURN,-1,,return nullptr;,5,738,,,3
146028894018,RETURN,1,,return;,9,745,,,1
146028894019,RETURN,1,,return;,9,750,,,1
146028894020,RETURN,1,,return false;,9,762,,,1
146028894021,RETURN,-1,,"return Token::simpleMatch(endToken, "") const"");",5,764,,,6
146028894022,RETURN,-1,,"return Token::Match(param->previous(), ""typename|class %name% ,|>"");",9,773,,,1
146028894023,RETURN,1,,return false;,9,770,,,1
146028894024,RETURN,-1,,"return std::all_of(params.cbegin(), params.cend(), [](const Token* param) {
        return Token::Match(param->previous(), ""typename|class %name% ,|>"");
    });",5,772,,,2
146028894025,RETURN,1,,return false;,9,780,,,1
146028894026,RETURN,1,,return true;,9,782,,,1
146028894027,RETURN,1,,return true;,9,784,,,1
146028894028,RETURN,1,,return true;,9,786,,,1
146028894029,RETURN,-1,,"return Token::Match(tok->tokAt(-2), ""(|{|}|;|=|<<|:|.|*|&|return|<|,|!|[ :: %name% ::|<|("");",5,787,,,5
146028894030,RETURN,1,,return;,9,1058,,,1
146028894031,RETURN,1,,return;,9,1132,,,1
146028894032,RETURN,1,,return false;,9,1416,,,1
146028894033,RETURN,1,,return false;,13,1421,,,1
146028894034,RETURN,-1,,return true;,5,1425,,,6
146028894035,RETURN,1,,return false;,13,1434,,,1
146028894036,RETURN,1,,return true;,21,1446,,,1
146028894037,RETURN,-1,,return true;,13,1453,,,1
146028894038,RETURN,-1,,return false;,5,1458,,,3
146028894039,RETURN,1,,return false;,13,1466,,,1
146028894040,RETURN,1,,return true;,21,1478,,,1
146028894041,RETURN,-1,,return true;,13,1485,,,1
146028894042,RETURN,-1,,return false;,5,1490,,,3
146028894043,RETURN,-1,,return true;,21,1508,,,2
146028894044,RETURN,-1,,return true;,9,1517,,,4
146028894045,RETURN,-1,,return false;,5,1519,,,2
146028894046,RETURN,-1,,return it->second;,9,1529,,,1
146028894047,RETURN,-1,,return namepos;,5,1544,,,9
146028894048,RETURN,-1,,"return Token::simpleMatch(tok->tokAt(offset), scope.c_str(), scope.size());",5,1622,,,8
146028894049,RETURN,-1,,"return Token::simpleMatch(inst.token(), name.c_str(), name.size());",33,1828,,,1
146028894050,RETURN,-1,,"return lower->isAssignmentOp() || Token::Match(lower, ""}|;|(|[|]|)|,|?|:|%oror%|return|throw|case"");",5,2317,,,1
146028894051,RETURN,-1,,"return isLowerThanLogicalAnd(lower) || lower->str() == ""&&"";",5,2321,,,1
146028894052,RETURN,-1,,"return isLowerThanOr(lower) || lower->str() == ""|"";",5,2325,,,1
146028894053,RETURN,-1,,"return isLowerThanXor(lower) || lower->str() == ""^"";",5,2329,,,1
146028894054,RETURN,-1,,"return isLowerThanAnd(lower) || lower->str() == ""&"";",5,2333,,,1
146028894055,RETURN,-1,,"return isLowerThanShift(lower) || Token::Match(lower, ""%comp%|<<|>>"");",5,2337,,,1
146028894056,RETURN,-1,,"return isLowerThanPlusMinus(lower) || Token::Match(lower, ""+|-"");",5,2341,,,1
146028894057,RETURN,-1,,"return isLowerThanMulDiv(lower) || Token::Match(lower, ""[*/%]"");",5,2345,,,1
146028894058,RETURN,-1,,return ret;,13,2378,,,2
146028894059,RETURN,-1,,return ret;,5,2440,,,4
146028894060,RETURN,1,,return nullptr;,9,2462,,,1
146028894061,RETURN,-1,,return tok;,5,2463,,,5
146028894062,RETURN,1,,return;,9,2468,,,1
146028894063,RETURN,1,,return true;,9,2645,,,1
146028894064,RETURN,1,,return false;,13,2652,,,1
146028894065,RETURN,-1,,return tok && offset > 0;,5,2657,,,4
146028894066,RETURN,1,,return true;,9,2663,,,1
146028894067,RETURN,1,,return false;,13,2667,,,1
146028894068,RETURN,-1,,return tok && offset < 0;,5,2672,,,3
146028894069,RETURN,-1,,return ret;,5,2933,,,7
146028894070,RETURN,-1,,return templateDeclarationNameToken == *it;,13,3011,,,1
146028894071,RETURN,-1,,"return Token::Match(templateDeclarationNameToken, ""%name% !!<"") &&
           (templateDeclarationNameToken->str().find('<') == std::string::npos);",5,3016,,,2
146028894072,RETURN,-1,,return typeForNewName;,5,3073,,,7
146028894073,RETURN,-1,,return false;,13,3203,,,2
146028894074,RETURN,-1,,return false;,13,3279,,,2
146028894075,RETURN,1,,return false;,13,3303,,,1
146028894076,RETURN,1,,return false;,13,3306,,,1
146028894077,RETURN,-1,,return false;,13,3319,,,2
146028894078,RETURN,-1,,return instantiated;,5,3337,,,19
146028894079,RETURN,1,,return false;,9,3345,,,1
146028894080,RETURN,1,,return false;,17,3350,,,1
146028894081,RETURN,1,,return false;,17,3354,,,1
146028894082,RETURN,1,,return false;,17,3357,,,1
146028894083,RETURN,1,,return false;,17,3361,,,1
146028894084,RETURN,1,,return false;,17,3365,,,1
146028894085,RETURN,1,,return false;,17,3369,,,1
146028894086,RETURN,1,,return false;,13,3372,,,1
146028894087,RETURN,-1,,"return it == strings.cend() && tok && tok->str() == "">"";",5,3376,,,9
146028894088,RETURN,1,,return false;,9,3451,,,1
146028894089,RETURN,1,,return false;,9,3454,,,1
146028894090,RETURN,-1,,return true;,17,3466,,,1
146028894091,RETURN,1,,return true;,13,3469,,,1
146028894092,RETURN,-1,,return false;,5,3472,,,4
146028894093,RETURN,-1,,"return specMatch(spec, decl);",17,3481,,,1
146028894094,RETURN,-1,,"return specMatch(spec, decl);",21,3487,,,1
146028894095,RETURN,-1,,"return specMatch(spec, decl);",17,3502,,,1
146028894096,RETURN,-1,,"return specMatch(spec, decl);",21,3508,,,1
146028894097,RETURN,1,,return i;,21,3880,,,1
146028894098,RETURN,1,,return i;,21,3888,,,1
146028894099,RETURN,-1,,return 0;,13,3892,,,4
146028894100,RETURN,1,,return score(xarg) < score(yarg);,25,3913,,,1
146028894101,RETURN,-1,,return false;,21,3914,,,2
146028894102,RETURN,1,,return nameOrdinal.at(x.fullName()) < nameOrdinal.at(y.fullName());,17,3897,,,1
146028894103,RETURN,1,,return xargs.size() < yargs.size();,21,3904,,,1
146028894104,RETURN,1,,return isConstMethod(x.nameToken());,21,3906,,,1
146028894105,RETURN,-1,,"return std::lexicographical_compare(xargs.begin(),
                                                    xargs.end(),
                                                    yargs.begin(),
                                                    yargs.end(),
                                                    [&](const Token* xarg, const Token* yarg) {
                    if (xarg != yarg)
                        return score(xarg) < score(yarg);
                    return false;
                });",17,3907,,,7
146028894106,RETURN,-1,,return false;,13,3917,,,3
146028894107,RETURN,-1,,return decl.token() == it->token();,17,3949,,,1
146028894108,RETURN,1,,return;,13,3842,,,1
146028894109,RETURN,-1,,return lhs.second.seconds() > rhs.second.seconds();,9,32,,,1
146028894110,RETURN,-1,,"return d.first.size() == pos && iter->first.compare(0, d.first.size(), d.first) == 0;",21,76,,,1
146028894111,RETURN,1,,return;,9,44,,,1
146028894112,RETURN,-1,,return x < y;,13,55,,,1
146028894113,RETURN,-1,,"return ConstTokenRange(this, t);",5,91,,,1
146028894114,RETURN,-1,,return stdTypes.find(str) != stdTypes.end();,5,208,,,1
146028894115,RETURN,1,,return;,9,214,,,1
146028894116,RETURN,-1,,return std::islower(c);,9,227,,,1
146028894117,RETURN,1,,return false;,9,225,,,1
146028894118,RETURN,-1,,"return std::none_of(mStr.begin(), mStr.end(), [](char c) {
        return std::islower(c);
    });",5,226,,,2
146028894119,RETURN,1,,"return ret.substr(0,pos);",13,258,,,1
146028894120,RETURN,-1,,return ret;,5,261,,,7
146028894121,RETURN,1,,return 1;,17,413,,,1
146028894122,RETURN,1,,return 1;,17,422,,,1
146028894123,RETURN,1,,return 1;,13,430,,,1
146028894124,RETURN,-1,,return 1;,13,438,,,2
146028894125,RETURN,1,,return 1;,13,443,,,1
146028894126,RETURN,1,,return 1;,17,452,,,1
146028894127,RETURN,1,,return 1;,17,456,,,1
146028894128,RETURN,1,,return 1;,17,466,,,1
146028894129,RETURN,1,,return 1;,17,472,,,1
146028894130,RETURN,1,,return 1;,17,478,,,1
146028894131,RETURN,1,,return 1;,13,487,,,1
146028894132,RETURN,1,,return 1;,13,495,,,1
146028894133,RETURN,1,,return 1;,21,505,,,1
146028894134,RETURN,1,,return 1;,21,511,,,1
146028894135,RETURN,1,,return 1;,17,519,,,1
146028894136,RETURN,1,,return -1;,9,531,,,1
146028894137,RETURN,-1,,return 0xFFFF;,5,533,,,4
146028894138,RETURN,1,,return ret;,17,549,,,1
146028894139,RETURN,-1,,return 1;,17,553,,,1
146028894140,RETURN,1,,return 1;,17,560,,,1
146028894141,RETURN,1,,return 0;,17,565,,,1
146028894142,RETURN,-1,,return -1;,21,577,,,1
146028894143,RETURN,1,,return 1;,9,589,,,1
146028894144,RETURN,-1,,return -1;,5,591,,,7
146028894145,RETURN,-1,,"return multiCompareImpl(tok, haystack, varid);",5,597,,,1
146028894146,RETURN,1,,return false;,9,603,,,1
146028894147,RETURN,1,,return false;,13,615,,,1
146028894148,RETURN,-1,,return true;,5,626,,,10
146028894149,RETURN,1,,return (*str == ' ' && *word == 0);,13,633,,,1
146028894150,RETURN,-1,,return true;,5,641,,,2
146028894151,RETURN,1,,return nullptr;,13,648,,,1
146028894152,RETURN,1,,return str;,13,651,,,1
146028894153,RETURN,1,,return true;,9,660,,,1
146028894154,RETURN,-1,,return false;,13,680,,,2
146028894155,RETURN,1,,return false;,17,686,,,1
146028894156,RETURN,1,,return false;,17,708,,,1
146028894157,RETURN,1,,return false;,17,717,,,1
146028894158,RETURN,-1,,return false;,17,731,,,1
146028894159,RETURN,-1,,return true;,5,743,,,5
146028894160,RETURN,-1,,return pos < s.size() ? pos : s.size();,5,754,,,7
146028894161,RETURN,-1,,return sizeofstring;,5,769,,,8
146028894162,RETURN,-1,,return getStrArraySize(tok) * sizeofType;,5,781,,,5
146028894163,RETURN,1,,return tok->next();,13,810,,,1
146028894164,RETURN,1,,return nullptr;,13,814,,,1
146028894165,RETURN,-1,,return nullptr;,5,816,,,2
146028894166,RETURN,-1,,return nextArgumentImpl(this);,5,821,,,1
146028894167,RETURN,-1,,return nextArgumentImpl(this);,5,826,,,1
146028894168,RETURN,1,,return tok->next();,13,833,,,1
146028894169,RETURN,1,,return nullptr;,13,841,,,1
146028894170,RETURN,-1,,return nullptr;,5,843,,,2
146028894171,RETURN,1,,return tok->next();,13,850,,,1
146028894172,RETURN,1,,return nullptr;,13,854,,,1
146028894173,RETURN,-1,,return nullptr;,5,856,,,2
146028894174,RETURN,-1,,"return tok->strAt(-1) == ""operator"";",5,864,,,2
146028894175,RETURN,1,,return nullptr;,9,870,,,1
146028894176,RETURN,1,,return nullptr;,9,873,,,1
146028894177,RETURN,1,,return nullptr;,9,878,,,1
146028894178,RETURN,1,,return nullptr;,17,899,,,1
146028894179,RETURN,1,,return nullptr;,13,901,,,1
146028894180,RETURN,1,,return closing;,17,909,,,1
146028894181,RETURN,1,,return closing;,17,914,,,1
146028894182,RETURN,-1,,return closing;,5,923,,,15
146028894183,RETURN,-1,,return const_cast<Token*>(static_cast<const Token*>(this)->findClosingBracket());,5,929,,,1
146028894184,RETURN,1,,return nullptr;,9,935,,,1
146028894185,RETURN,1,,return nullptr;,17,944,,,1
146028894186,RETURN,1,,return nullptr;,13,946,,,1
146028894187,RETURN,1,,return opening;,17,951,,,1
146028894188,RETURN,-1,,return opening;,5,955,,,7
146028894189,RETURN,-1,,return const_cast<Token*>(static_cast<const Token*>(this)->findOpeningBracket());,5,961,,,1
146028894190,RETURN,1,,return tok;,13,971,,,1
146028894191,RETURN,-1,,return nullptr;,5,973,,,2
146028894192,RETURN,-1,,"return findsimplematchImpl(startTok, pattern, pattern_len);",5,978,,,1
146028894193,RETURN,-1,,"return findsimplematchImpl(startTok, pattern, pattern_len);",5,983,,,1
146028894194,RETURN,1,,return tok;,13,991,,,1
146028894195,RETURN,-1,,return nullptr;,5,993,,,2
146028894196,RETURN,-1,,"return findsimplematchImpl(startTok, pattern, pattern_len, end);",5,998,,,1
146028894197,RETURN,-1,,"return findsimplematchImpl(startTok, pattern, pattern_len, end);",5,1002,,,1
146028894198,RETURN,1,,return tok;,13,1010,,,1
146028894199,RETURN,-1,,return nullptr;,5,1012,,,2
146028894200,RETURN,-1,,"return findmatchImpl(startTok, pattern, varId);",5,1017,,,1
146028894201,RETURN,-1,,"return findmatchImpl(startTok, pattern, varId);",5,1021,,,1
146028894202,RETURN,1,,return tok;,13,1029,,,1
146028894203,RETURN,-1,,return nullptr;,5,1031,,,2
146028894204,RETURN,-1,,"return findmatchImpl(startTok, pattern, end, varId);",5,1036,,,1
146028894205,RETURN,-1,,"return findmatchImpl(startTok, pattern, end, varId);",5,1040,,,1
146028894206,RETURN,1,,return newToken;,29,1108,,,1
146028894207,RETURN,1,,return newToken;,29,1112,,,1
146028894208,RETURN,-1,,return newToken;,5,1189,,,7
146028894209,RETURN,1,,return;,9,1195,,,1
146028894210,RETURN,-1,,return ret;,5,1294,,,6
146028894211,RETURN,-1,,return stringify(options);,5,1303,,,5
146028894212,RETURN,1,,"return """";",9,1309,,,1
146028894213,RETURN,1,,return ret;,13,1320,,,1
146028894214,RETURN,-1,,return ret;,5,1382,,,10
146028894215,RETURN,-1,,"return stringifyList(options, fileNames, end);",5,1393,,,8
146028894216,RETURN,-1,,"return stringifyList(false, attributes, false, false, false, nullptr, end);",5,1398,,,1
146028894217,RETURN,-1,,"return stringifyList(varid, false, true, true, true, nullptr, nullptr);",5,1403,,,1
146028894218,RETURN,-1,,return start;,5,1463,,,4
146028894219,RETURN,-1,,return end;,5,1480,,,4
146028894220,RETURN,-1,,"return std::pair<const Token *, const Token *>(start,end);",5,1522,,,14
146028894221,RETURN,1,,return false;,9,1528,,,1
146028894222,RETURN,1,,return false;,13,1533,,,1
146028894223,RETURN,1,,return false;,13,1536,,,1
146028894224,RETURN,1,,return true;,17,1545,,,1
146028894225,RETURN,1,,return false;,17,1551,,,1
146028894226,RETURN,-1,,return false;,9,1555,,,6
146028894227,RETURN,-1,,return true;,5,1558,,,3
146028894228,RETURN,1,,return false;,9,1564,,,1
146028894229,RETURN,1,,return true;,9,1566,,,1
146028894230,RETURN,1,,return false;,13,1571,,,1
146028894231,RETURN,1,,return true;,13,1573,,,1
146028894232,RETURN,-1,,return false;,5,1577,,,8
146028894233,RETURN,-1,,return ret;,5,1613,,,4
146028894234,RETURN,-1,,"return stringFromTokenRange(tokens.first, tokens.second);",5,1619,,,3
146028894235,RETURN,-1,,return ret;,5,1721,,,3
146028894236,RETURN,1,,return str();,9,1728,,,1
146028894237,RETURN,1,,"return ""("" + str() + "" "" + astOperand1()->astStringZ3() + "")"";",9,1730,,,1
146028894238,RETURN,-1,,"return ""("" + str() + "" "" + astOperand1()->astStringZ3() + "" "" + astOperand2()->astStringZ3() + "")"";",5,1731,,,3
146028894239,RETURN,-1,,return value.valueKind == valueKind;,17,1776,,,1
146028894240,RETURN,-1,,return !v.isImpossible() && v.isIntValue() && v.intvalue <= val;,9,1919,,,1
146028894241,RETURN,1,,return nullptr;,9,1917,,,1
146028894242,RETURN,-1,,"return ValueFlow::findValue(*mImpl->mValues, settings, [&](const ValueFlow::Value& v) {
        return !v.isImpossible() && v.isIntValue() && v.intvalue <= val;
    });",5,1918,,,2
146028894243,RETURN,-1,,return !v.isImpossible() && v.isIntValue() && v.intvalue >= val;,9,1928,,,1
146028894244,RETURN,1,,return nullptr;,9,1926,,,1
146028894245,RETURN,-1,,"return ValueFlow::findValue(*mImpl->mValues, settings, [&](const ValueFlow::Value& v) {
        return !v.isImpossible() && v.isIntValue() && v.intvalue >= val;
    });",5,1927,,,2
146028894246,RETURN,-1,,return value.isIntValue() && !value.isImpossible() && value.intvalue != val;,9,1937,,,1
146028894247,RETURN,1,,return nullptr;,9,1935,,,1
146028894248,RETURN,-1,,return it == mImpl->mValues->end() ? nullptr : &*it;,5,1939,,,4
146028894249,RETURN,1,,return nullptr;,9,1945,,,1
146028894250,RETURN,1,,return nullptr;,13,1960,,,1
146028894251,RETURN,1,,return nullptr;,13,1962,,,1
146028894252,RETURN,-1,,return ret;,5,1964,,,6
146028894253,RETURN,1,,return nullptr;,9,1970,,,1
146028894254,RETURN,-1,,return ret;,5,1984,,,7
146028894255,RETURN,1,,return nullptr;,9,1990,,,1
146028894256,RETURN,-1,,return ret;,5,2002,,,7
146028894257,RETURN,1,,return true;,9,2008,,,1
146028894258,RETURN,1,,return false;,9,2010,,,1
146028894259,RETURN,-1,,return std::abs(x.intvalue - y.intvalue) == 1;,5,2011,,,3
146028894260,RETURN,-1,,return isPoint;,5,2021,,,4
146028894261,RETURN,-1,,"return x->compareValue(*y, less{});",21,2046,,,1
146028894262,RETURN,-1,,return true;,21,2053,,,2
146028894263,RETURN,-1,,return true;,21,2057,,,2
146028894264,RETURN,-1,,return true;,17,2069,,,3
146028894265,RETURN,1,,return true;,17,2078,,,1
146028894266,RETURN,-1,,return result;,5,2081,,,4
146028894267,RETURN,-1,,"return !isAdjacent(*x, *y);",9,2093,,,1
146028894268,RETURN,1,,return std::next(x);,9,2091,,,1
146028894269,RETURN,-1,,return values.erase(x);,5,2101,,,7
146028894270,RETURN,-1,,"return xx->compareValue(*yy, less{});",13,2151,,,3
146028894271,RETURN,1,,return false;,17,2167,,,1
146028894272,RETURN,1,,return false;,17,2169,,,1
146028894273,RETURN,1,,return false;,17,2171,,,1
146028894274,RETURN,1,,return false;,17,2173,,,1
146028894275,RETURN,1,,return false;,17,2177,,,1
146028894276,RETURN,1,,return false;,17,2179,,,1
146028894277,RETURN,-1,,return true;,13,2180,,,7
146028894278,RETURN,1,,return;,13,2193,,,1
146028894279,RETURN,1,,return false;,9,2201,,,1
146028894280,RETURN,1,,return x.tokvalue->exprId() == 0 || x.tokvalue->exprId() == y.tokvalue->exprId();,9,2204,,,1
146028894281,RETURN,-1,,return true;,5,2205,,,3
146028894282,RETURN,-1,,"return sameValueType(x, value);",13,2213,,,1
146028894283,RETURN,-1,,"return x.isKnown() && sameValueType(x, value) && !x.equalValue(value);",9,2220,,,1
146028894284,RETURN,1,,return false;,9,2222,,,1
146028894285,RETURN,1,,return false;,13,2233,,,1
146028894286,RETURN,-1,,return false;,13,2261,,,6
146028894287,RETURN,-1,,return true;,5,2284,,,5
146028894288,RETURN,-1,,return top ? top->mImpl->mValueType : nullptr;,5,2317,,,4
146028894289,RETURN,-1,,return var->type() == vars.front()->type();,13,2376,,,1
146028894290,RETURN,1,,return nullptr;,9,2333,,,1
146028894291,RETURN,1,,return tok->type();,9,2338,,,1
146028894292,RETURN,1,,return tok->variable()->type();,9,2340,,,1
146028894293,RETURN,1,,return tok->function()->retType;,9,2342,,,1
146028894294,RETURN,1,,return nullptr;,13,2347,,,1
146028894295,RETURN,1,,return nullptr;,13,2351,,,1
146028894296,RETURN,-1,,return function->retType;,9,2352,,,7
146028894297,RETURN,1,,"return typeOf(tok->previous(), typeTok);",9,2355,,,1
146028894298,RETURN,1,,"return Token::typeOf(lhsVarTok, typeTok);",9,2357,,,1
146028894299,RETURN,1,,"return Token::typeOf(tok->astOperand2(), typeTok);",9,2359,,,1
146028894300,RETURN,1,,"return Token::typeOf(tok->astOperand1(), typeTok);",9,2361,,,1
146028894301,RETURN,1,,return nullptr;,13,2366,,,1
146028894302,RETURN,1,,return nullptr;,13,2368,,,1
146028894303,RETURN,1,,return nullptr;,13,2370,,,1
146028894304,RETURN,1,,return nullptr;,13,2373,,,1
146028894305,RETURN,1,,return vars.front()->type();,13,2378,,,1
146028894306,RETURN,-1,,return nullptr;,5,2381,,,14
146028894307,RETURN,1,,return {};,9,2387,,,1
146028894308,RETURN,1,,"return {tok, tok->next()};",9,2389,,,1
146028894309,RETURN,1,,return {};,13,2393,,,1
146028894310,RETURN,1,,"return { vt->smartPointerTypeToken, vt->smartPointerTypeToken->linkAt(-1) };",17,2397,,,1
146028894311,RETURN,1,,"return { vt->containerTypeToken, vt->containerTypeToken->linkAt(-1) };",17,2402,,,1
146028894312,RETURN,1,,"return { vt->containerTypeToken, vt->containerTypeToken->linkAt(-1) };",25,2415,,,1
146028894313,RETURN,1,,return r;,21,2425,,,1
146028894314,RETURN,1,,"return { tok2->next(), tok2->astOperand1() };",25,2429,,,1
146028894315,RETURN,-1,,"return { tok2->next(), declEnd };",21,2433,,,5
146028894316,RETURN,1,,"return { vt->containerTypeToken, vt->containerTypeToken->linkAt(-1) };",21,2450,,,1
146028894317,RETURN,1,,return result;,13,2454,,,1
146028894318,RETURN,-1,,"return {var->typeStartToken(), var->typeEndToken()->next()};",9,2455,,,9
146028894319,RETURN,1,,return {};,13,2461,,,1
146028894320,RETURN,1,,return {};,13,2465,,,1
146028894321,RETURN,-1,,"return { function->retDef, function->returnDefEnd() };",9,2466,,,7
146028894322,RETURN,-1,,"return {function->retDef, function->returnDefEnd()};",9,2471,,,3
146028894323,RETURN,1,,return Token::typeDecl(tok->astOperand1());,9,2474,,,1
146028894324,RETURN,1,,return Token::typeDecl(tok->astOperand2());,9,2476,,,1
146028894325,RETURN,1,,return {};,9,2480,,,1
146028894326,RETURN,-1,,"return {t->classDef->next(), t->classDef->tokAt(2)};",5,2481,,,11
146028894327,RETURN,1,,return ret;,13,2489,,,1
146028894328,RETURN,1,,"return """";",9,2493,,,1
146028894329,RETURN,-1,,"return r.first->stringifyList(r.second, false);",5,2494,,,5
146028894330,RETURN,-1,,return mImpl->mScopeInfo;,5,2503,,,1
146028894331,RETURN,1,,return false;,9,2510,,,1
146028894332,RETURN,1,,return false;,9,2512,,,1
146028894333,RETURN,-1,,return value.isIntValue() && value.isKnown();,5,2514,,,5
146028894334,RETURN,-1,,"return mImpl->mValues && std::any_of(mImpl->mValues->begin(), mImpl->mValues->end(), std::mem_fn(&ValueFlow::Value::isKnown));",5,2519,,,1
146028894335,RETURN,-1,,return value.isKnown() && value.valueType == t;,9,2526,,,1
146028894336,RETURN,-1,,"return mImpl->mValues &&
           std::any_of(mImpl->mValues->begin(), mImpl->mValues->end(), [&](const ValueFlow::Value& value) {
        return value.isKnown() && value.valueType == t;
    });",5,2524,,,1
146028894337,RETURN,-1,,"return value.isKnown() && value.isSymbolicValue() && value.tokvalue &&
        value.tokvalue->exprId() == tok->exprId();",9,2536,,,1
146028894338,RETURN,1,,return false;,9,2533,,,1
146028894339,RETURN,-1,,"return mImpl->mValues &&
           std::any_of(mImpl->mValues->begin(), mImpl->mValues->end(), [&](const ValueFlow::Value& value) {
        return value.isKnown() && value.isSymbolicValue() && value.tokvalue &&
        value.tokvalue->exprId() == tok->exprId();
    });",5,2534,,,2
146028894340,RETURN,-1,,return value.isKnown() && value.valueType == t;,9,2555,,,1
146028894341,RETURN,1,,return nullptr;,9,2544,,,1
146028894342,RETURN,1,,return nullptr;,9,2546,,,1
146028894343,RETURN,1,,return nullptr;,13,2551,,,1
146028894344,RETURN,-1,,return &v;,9,2552,,,4
146028894345,RETURN,-1,,return it == mImpl->mValues->end() ? nullptr : &*it;,5,2557,,,6
146028894346,RETURN,-1,,return value.isIntValue() && !value.isImpossible() && value.intvalue == val;,9,2565,,,1
146028894347,RETURN,1,,return nullptr;,9,2563,,,1
146028894348,RETURN,-1,,return it == mImpl->mValues->end() ? nullptr : &*it;,5,2567,,,4
146028894349,RETURN,-1,,return ret;,5,2587,,,4
146028894350,RETURN,1,,return nullptr;,9,2593,,,1
146028894351,RETURN,-1,,"return getCompareValue(*mImpl->mValues, condition, path, std::greater<MathLib::bigint>{});",5,2594,,,2
146028894352,RETURN,1,,return nullptr;,9,2600,,,1
146028894353,RETURN,-1,,"return getCompareValue(*mImpl->mValues, condition, path, std::less<MathLib::bigint>{});",5,2601,,,2
146028894354,RETURN,-1,,"return value.isMovedValue() && !value.isImpossible() &&
        value.moveKind != ValueFlow::Value::MoveKind::NonMovedVariable;",9,2609,,,1
146028894355,RETURN,1,,return nullptr;,9,2607,,,1
146028894356,RETURN,-1,,return it == mImpl->mValues->end() ? nullptr : &*it;,5,2612,,,4
146028894357,RETURN,-1,,return value.isContainerSizeValue() && !value.isImpossible() && value.intvalue == val;,9,2621,,,1
146028894358,RETURN,1,,return nullptr;,9,2619,,,1
146028894359,RETURN,-1,,return it == mImpl->mValues->end() ? nullptr : &*it;,5,2623,,,4
146028894360,RETURN,-1,,return attr != nullptr;,5,2670,,,5
146028894361,RETURN,1,,return nullptr;,13,2679,,,1
146028894362,RETURN,-1,,return tok;,5,2682,,,2
146028894363,RETURN,1,,return nullptr;,9,2688,,,1
146028894364,RETURN,1,,return nullptr;,9,2691,,,1
146028894365,RETURN,1,,return tok;,9,2694,,,1
146028894366,RETURN,1,,return tok->linkAt(1);,9,2696,,,1
146028894367,RETURN,1,,return nullptr;,9,2698,,,1
146028894368,RETURN,1,,return tok->link();,9,2710,,,1
146028894369,RETURN,-1,,return nullptr;,5,2711,,,11
146028894370,RETURN,-1,,return findLambdaEndScope(const_cast<Token*>(tok));,5,2714,,,1
146028894371,RETURN,-1,,return mTokensFrontBack.list.getFiles()[mImpl->mFileIndex];,5,2718,,,1
146028894372,RETURN,1,,return false;,9,84,,,1
146028894373,RETURN,-1,,"return Token::simpleMatch(tok, ""enum"");",5,90,,,5
146028894374,RETURN,1,,return false;,9,109,,,1
146028894375,RETURN,-1,,"return Token::Match(tok2, ""class|struct|union|enum"");",5,113,,,5
146028894376,RETURN,1,,return 0;,13,142,,,1
146028894377,RETURN,-1,,return podtype->size;,9,144,,,4
146028894378,RETURN,-1,,return it->second;,5,146,,,4
146028894379,RETURN,1,,return 0;,9,152,,,1
146028894380,RETURN,1,,return Token::getStrLength(type) + 1U;,9,155,,,1
146028894381,RETURN,1,,return 0;,13,161,,,1
146028894382,RETURN,-1,,return podtype->size;,9,163,,,4
146028894383,RETURN,1,,return mSettings.platform.sizeof_long_double;,13,167,,,1
146028894384,RETURN,1,,return mSettings.platform.sizeof_long_long;,13,169,,,1
146028894385,RETURN,-1,,return it->second;,5,172,,,7
146028894386,RETURN,1,,return false;,17,191,,,1
146028894387,RETURN,1,,return false;,17,205,,,1
146028894388,RETURN,1,,return false;,17,208,,,1
146028894389,RETURN,1,,return false;,17,210,,,1
146028894390,RETURN,1,,return false;,21,213,,,1
146028894391,RETURN,1,,return false;,21,216,,,1
146028894392,RETURN,-1,,return true;,17,219,,,4
146028894393,RETURN,-1,,return true;,21,230,,,2
146028894394,RETURN,-1,,return true;,25,241,,,2
146028894395,RETURN,-1,,return true;,29,257,,,1
146028894396,RETURN,-1,,return true;,29,259,,,1
146028894397,RETURN,-1,,return true;,33,265,,,1
146028894398,RETURN,1,,return true;,33,268,,,1
146028894399,RETURN,1,,return true;,33,270,,,1
146028894400,RETURN,1,,return true;,33,272,,,1
146028894401,RETURN,1,,return true;,33,274,,,1
146028894402,RETURN,-1,,return false;,29,275,,,6
146028894403,RETURN,-1,,"return tok->strAt(1) != "";"";",29,277,,,1
146028894404,RETURN,-1,,"return tok->strAt(1) != "";"";",29,279,,,1
146028894405,RETURN,1,,return true;,25,286,,,1
146028894406,RETURN,-1,,return false;,5,292,,,4
146028894407,RETURN,1,,return;,9,298,,,1
146028894408,RETURN,-1,,return tok;,5,351,,,5
146028894409,RETURN,1,,return nullptr;,13,391,,,1
146028894410,RETURN,1,,return nullptr;,13,406,,,1
146028894411,RETURN,-1,,return nullptr;,9,415,,,3
146028894412,RETURN,-1,,return tok;,5,430,,,25
146028894413,RETURN,1,,return nullptr;,21,475,,,1
146028894414,RETURN,-1,,return tok2;,5,498,,,2
146028894415,RETURN,-1,,"return const_cast<Token*>(processFunc(const_cast<const Token*>(tok2), inOperator));",5,503,,,1
146028894416,RETURN,1,,return;,9,509,,,1
146028894417,RETURN,1,,return;,9,534,,,1
146028894418,RETURN,-1,,return;,21,613,,,9
146028894419,RETURN,-1,,return;,21,623,,,5
146028894420,RETURN,-1,,return;,21,637,,,11
146028894421,RETURN,-1,,return;,21,646,,,7
146028894422,RETURN,-1,,return;,21,655,,,7
146028894423,RETURN,-1,,return mTypedefToken;,13,665,,,1
146028894424,RETURN,-1,,return mUsed;,13,669,,,1
146028894425,RETURN,1,,return false;,17,674,,,1
146028894426,RETURN,1,,return false;,17,677,,,1
146028894427,RETURN,-1,,"return Token::Match(it->second.mNameToken, ""%name% ("");",13,678,,,5
146028894428,RETURN,-1,,return mFail;,13,682,,,1
146028894429,RETURN,-1,,return mReplaceFailed;,13,686,,,1
146028894430,RETURN,-1,,"return mRangeType.second && mRangeType.second->str() == ""{"";",13,690,,,1
146028894431,RETURN,-1,,"return mNameToken ? mNameToken->str() : """";",13,694,,,1
146028894432,RETURN,1,,return;,17,699,,,1
146028894433,RETURN,-1,,return;,21,741,,,4
146028894434,RETURN,-1,,return;,17,751,,,6
146028894435,RETURN,-1,,return;,17,758,,,3
146028894436,RETURN,-1,,return;,17,769,,,2
146028894437,RETURN,-1,,return;,21,804,,,2
146028894438,RETURN,-1,,return;,17,834,,,2
146028894439,RETURN,1,,return true;,21,920,,,1
146028894440,RETURN,1,,return true;,21,922,,,1
146028894441,RETURN,1,,return true;,21,924,,,1
146028894442,RETURN,1,,return true;,21,926,,,1
146028894443,RETURN,1,,return true;,29,932,,,1
146028894444,RETURN,-1,,return true;,21,936,,,2
146028894445,RETURN,1,,return true;,21,939,,,1
146028894446,RETURN,-1,,return isGeneric;,21,950,,,4
146028894447,RETURN,-1,,return false;,17,952,,,8
146028894448,RETURN,-1,,return -1;,13,954,,,2
146028894449,RETURN,1,,return false;,17,959,,,1
146028894450,RETURN,1,,return false;,17,961,,,1
146028894451,RETURN,1,,return res != 0;,21,965,,,1
146028894452,RETURN,1,,return false;,17,968,,,1
146028894453,RETURN,1,,return false;,17,970,,,1
146028894454,RETURN,1,,return true;,17,974,,,1
146028894455,RETURN,1,,return false;,17,976,,,1
146028894456,RETURN,1,,return true;,17,978,,,1
146028894457,RETURN,1,,return false;,21,985,,,1
146028894458,RETURN,1,,return false;,21,987,,,1
146028894459,RETURN,1,,return false;,21,992,,,1
146028894460,RETURN,1,,return false;,21,994,,,1
146028894461,RETURN,1,,return false;,21,996,,,1
146028894462,RETURN,-1,,return true;,13,1001,,,11
146028894463,RETURN,-1,,return mEndToken;,13,1005,,,1
146028894464,RETURN,-1,,return mNameToken;,13,1009,,,1
146028894465,RETURN,1,,return !tok->tokAt(3)->isKeyword();,17,1015,,,1
146028894466,RETURN,1,,return true;,17,1017,,,1
146028894467,RETURN,-1,,return false;,13,1018,,,3
146028894468,RETURN,-1,,return to;,13,1029,,,2
146028894469,RETURN,-1,,return ret;,5,1137,,,4
146028894470,RETURN,-1,,return tok;,5,1145,,,5
146028894471,RETURN,1,,return;,13,1171,,,1
146028894472,RETURN,-1,,return;,13,1184,,,2
146028894473,RETURN,-1,,return;,17,1355,,,1
146028894474,RETURN,1,,return;,21,1665,,,1
146028894475,RETURN,1,,return;,33,2326,,,1
146028894476,RETURN,-1,,return child.name == childName;,17,2415,,,1
146028894477,RETURN,-1,,return &child != this && child.type == Record && (child.name == scope || child.fullName == scope);,21,2436,,,1
146028894478,RETURN,1,,return;,17,2387,,,1
146028894479,RETURN,-1,,return &children.back();,13,2410,,,2
146028894480,RETURN,-1,,"return std::any_of(children.cbegin(), children.cend(), [&](const ScopeInfo3& child) {
                return child.name == childName;
            });",13,2414,,,1
146028894481,RETURN,1,,return &child;,21,2422,,,1
146028894482,RETURN,1,,return temp;,21,2426,,,1
146028894483,RETURN,-1,,return nullptr;,13,2428,,,2
146028894484,RETURN,1,,return &*it;,21,2439,,,1
146028894485,RETURN,1,,return temp;,33,2446,,,1
146028894486,RETURN,-1,,return nullptr;,13,2452,,,4
146028894487,RETURN,1,,return false;,17,2457,,,1
146028894488,RETURN,1,,return true;,17,2460,,,1
146028894489,RETURN,1,,return false;,21,2466,,,1
146028894490,RETURN,1,,return true;,21,2468,,,1
146028894491,RETURN,1,,return true;,21,2470,,,1
146028894492,RETURN,-1,,return false;,13,2472,,,4
146028894493,RETURN,1,,return this;,17,2477,,,1
146028894494,RETURN,1,,return temp;,21,2481,,,1
146028894495,RETURN,-1,,return nullptr;,13,2483,,,3
146028894496,RETURN,1,,return;,13,2490,,,1
146028894497,RETURN,1,,return;,13,2492,,,1
146028894498,RETURN,-1,,return;,13,2507,,,2
146028894499,RETURN,1,,return;,29,2535,,,1
146028894500,RETURN,1,,return;,33,2541,,,1
146028894501,RETURN,-1,,return;,13,2571,,,2
146028894502,RETURN,-1,,return tok;,9,2640,,,4
146028894503,RETURN,-1,,return scope == ns + suffix;,25,2730,,,1
146028894504,RETURN,1,,return false;,13,2654,,,1
146028894505,RETURN,-1,,return false;,13,2659,,,2
146028894506,RETURN,-1,,return false;,13,2668,,,2
146028894507,RETURN,-1,,return false;,13,2673,,,1
146028894508,RETURN,1,,return true;,13,2710,,,1
146028894509,RETURN,1,,return true;,13,2716,,,1
146028894510,RETURN,1,,return true;,25,2726,,,1
146028894511,RETURN,1,,return true;,25,2732,,,1
146028894512,RETURN,1,,return true;,17,2755,,,1
146028894513,RETURN,-1,,return false;,9,2758,,,32
146028894514,RETURN,-1,,return qualification;,9,2771,,,5
146028894515,RETURN,1,,return nullptr;,13,2777,,,1
146028894516,RETURN,1,,return end;,17,2781,,,1
146028894517,RETURN,-1,,return nullptr;,9,2786,,,5
146028894518,RETURN,-1,,"return (Token::Match(openParen->tokAt(-2), "":: %name% ("") ||
            Token::Match(openParen->tokAt(-3), "":: ~ %name% ("")) &&
           TokenList::isFunctionHead(openParen, ""{:"");",5,2792,,,1
146028894519,RETURN,1,,return false;,9,2800,,,1
146028894520,RETURN,1,,return true;,9,2804,,,1
146028894521,RETURN,1,,return true;,13,2812,,,1
146028894522,RETURN,1,,return true;,13,2818,,,1
146028894523,RETURN,-1,,return false;,5,2821,,,4
146028894524,RETURN,-1,,return dist;,5,2831,,,6
146028894525,RETURN,-1,,return tok;,5,2837,,,2
146028894526,RETURN,1,,return false;,9,2843,,,1
146028894527,RETURN,1,,return substitute;,13,2890,,,1
146028894528,RETURN,1,,return substitute;,17,3040,,,1
146028894529,RETURN,-1,,return substitute;,5,3359,,,15
146028894530,RETURN,1,,return false;,13,3388,,,1
146028894531,RETURN,1,,return false;,13,3391,,,1
146028894532,RETURN,-1,,return true;,5,3446,,,18
146028894533,RETURN,1,,return;,9,3599,,,1
146028894534,RETURN,-1,,return tok->tokAt(4);,13,3774,,,2
146028894535,RETURN,-1,,return tok;,17,3785,,,2
146028894536,RETURN,-1,,return nullptr;,9,3788,,,3
146028894537,RETURN,1,,return nullptr;,9,3900,,,1
146028894538,RETURN,-1,,return tok;,5,3901,,,5
146028894539,RETURN,1,,return tok;,17,3916,,,1
146028894540,RETURN,1,,return tok;,13,3920,,,1
146028894541,RETURN,-1,,return nullptr;,5,3922,,,3
146028894542,RETURN,1,,return nullptr;,9,3928,,,1
146028894543,RETURN,-1,,"return (tok && tok->str() == ""{"") ? tok : nullptr;",5,3937,,,4
146028894544,RETURN,1,,return;,9,4108,,,1
146028894545,RETURN,-1,,return mVariableId.find(varname) != mVariableId.end();,13,4131,,,1
146028894546,RETURN,-1,,return global ? mVariableId_global : mVariableId;,13,4135,,,1
146028894547,RETURN,-1,,return mVarId;,13,4138,,,1
146028894548,RETURN,1,,return false;,9,4152,,,1
146028894549,RETURN,-1,,return true;,5,4161,,,4
146028894550,RETURN,-1,,return;,9,4170,,,3
146028894551,RETURN,-1,,return;,9,4178,,,4
146028894552,RETURN,1,,return false;,9,4189,,,1
146028894553,RETURN,1,,return false;,17,4203,,,1
146028894554,RETURN,1,,return false;,17,4229,,,1
146028894555,RETURN,1,,return false;,17,4239,,,1
146028894556,RETURN,1,,return false;,21,4242,,,1
146028894557,RETURN,1,,return false;,21,4244,,,1
146028894558,RETURN,1,,return false;,21,4253,,,1
146028894559,RETURN,1,,return false;,25,4287,,,1
146028894560,RETURN,1,,return false;,17,4305,,,1
146028894561,RETURN,1,,return false;,13,4317,,,1
146028894562,RETURN,1,,return false;,13,4319,,,1
146028894563,RETURN,-1,,"return (typeCount >= 2 && tok2 && Token::Match(tok2->tokAt(-2), ""!!:: %type%""));",5,4322,,,19
146028894564,RETURN,1,,return;,13,4335,,,1
146028894565,RETURN,-1,,return;,9,4356,,,8
146028894566,RETURN,1,,return false;,13,4417,,,1
146028894567,RETURN,1,,return false;,21,4444,,,1
146028894568,RETURN,-1,,return true;,5,4463,,,14
146028894569,RETURN,1,,return;,17,4678,,,1
146028894570,RETURN,-1,,return ret;,5,4909,,,3
146028894571,RETURN,1,,return nullptr;,13,4919,,,1
146028894572,RETURN,-1,,return nullptr;,17,4930,,,1
146028894573,RETURN,1,,return nullptr;,13,4934,,,1
146028894574,RETURN,1,,return nullptr;,13,4936,,,1
146028894575,RETURN,1,,return nullptr;,13,4943,,,1
146028894576,RETURN,1,,return nullptr;,13,4945,,,1
146028894577,RETURN,1,,return nullptr;,17,4949,,,1
146028894578,RETURN,-1,,"return Token::Match(memberToken, ""~| %name%"") ? memberToken : nullptr;",5,4955,,,6
146028894579,RETURN,1,,return nullptr;,9,4961,,,1
146028894580,RETURN,1,,return ret;,9,4966,,,1
146028894581,RETURN,1,,return ret;,13,4972,,,1
146028894582,RETURN,-1,,return nullptr;,5,4975,,,6
146028894583,RETURN,1,,return tok;,13,4983,,,1
146028894584,RETURN,-1,,return nullptr;,5,4985,,,4
146028894585,RETURN,-1,,"return Token::Match(tok, ""~| %name% ("") ? tok : nullptr;",5,4991,,,3
146028894586,RETURN,1,,return start;,13,5003,,,1
146028894587,RETURN,-1,,return tok;,5,5009,,,4
146028894588,RETURN,-1,,"return ScopeInfo2(tok->str(), tokStart->link());",13,5155,,,1
146028894589,RETURN,1,,return;,9,5317,,,1
146028894590,RETURN,1,,return;,9,5435,,,1
146028894591,RETURN,1,,return false;,9,5474,,,1
146028894592,RETURN,1,,return false;,9,5570,,,1
146028894593,RETURN,1,,return false;,9,5606,,,1
146028894594,RETURN,1,,return false;,9,5620,,,1
146028894595,RETURN,1,,return false;,9,5658,,,1
146028894596,RETURN,1,,return false;,9,5686,,,1
146028894597,RETURN,1,,return false;,9,5739,,,1
146028894598,RETURN,1,,return false;,9,5769,,,1
146028894599,RETURN,1,,return false;,9,5775,,,1
146028894600,RETURN,1,,return false;,9,5781,,,1
146028894601,RETURN,1,,return false;,9,5787,,,1
146028894602,RETURN,1,,return false;,13,5808,,,1
146028894603,RETURN,1,,return false;,9,5844,,,1
146028894604,RETURN,-1,,return true;,5,5874,,,112
146028894605,RETURN,1,,"return """";",9,6178,,,1
146028894606,RETURN,-1,,return outs;,5,6214,,,8
146028894607,RETURN,1,,return;,9,6221,,,1
146028894608,RETURN,-1,,return line;,5,6373,,,5
146028894609,RETURN,-1,,return v.second == scopeLevel;,17,6386,,,1
146028894610,RETURN,-1,,return v.first == tok->strAt(-1);,13,6395,,,1
146028894611,RETURN,-1,,return v.first == tok->strAt(1);,13,6412,,,1
146028894612,RETURN,1,,return;,9,6510,,,1
146028894613,RETURN,1,,return;,9,6512,,,1
146028894614,RETURN,1,,return;,9,6543,,,1
146028894615,RETURN,1,,return;,9,6561,,,1
146028894616,RETURN,1,,return false;,13,6622,,,1
146028894617,RETURN,-1,,return true;,5,6624,,,2
146028894618,RETURN,1,,return nullptr;,13,6655,,,1
146028894619,RETURN,-1,,return tokEnd;,5,6668,,,4
146028894620,RETURN,1,,return tok;,9,6675,,,1
146028894621,RETURN,-1,,return tok;,13,6690,,,1
146028894622,RETURN,1,,return tok;,17,6701,,,1
146028894623,RETURN,1,,return tok;,13,6708,,,1
146028894624,RETURN,1,,return tok;,13,6734,,,1
146028894625,RETURN,-1,,return tok;,25,6743,,,1
146028894626,RETURN,-1,,return tokBracesEnd;,5,6767,,,13
146028894627,RETURN,1,,return;,9,6945,,,1
146028894628,RETURN,-1,,return q == leftTok->str();,21,7472,,,1
146028894629,RETURN,1,,return false;,17,7610,,,1
146028894630,RETURN,1,,return false;,9,7643,,,1
146028894631,RETURN,-1,,return !alt.empty();,5,7655,,,9
146028894632,RETURN,1,,return;,9,7663,,,1
146028894633,RETURN,1,,return tok;,13,7702,,,1
146028894634,RETURN,1,,return tok;,9,7706,,,1
146028894635,RETURN,1,,return tok;,9,7715,,,1
146028894636,RETURN,1,,return tok;,9,7719,,,1
146028894637,RETURN,1,,return tok;,9,7721,,,1
146028894638,RETURN,-1,,return tok;,5,7740,,,16
146028894639,RETURN,1,,return;,9,7778,,,1
146028894640,RETURN,-1,,return ret;,5,7993,,,4
146028894641,RETURN,-1,,return false;,9,8057,,,1
146028894642,RETURN,-1,,return ret;,5,8076,,,7
146028894643,RETURN,1,,return true;,13,8167,,,1
146028894644,RETURN,1,,return true;,13,8170,,,1
146028894645,RETURN,-1,,return false;,5,8172,,,2
146028894646,RETURN,1,,return false;,9,8183,,,1
146028894647,RETURN,-1,,"return isNumberOneOf(s, 1L, ""1.0"");",5,8184,,,2
146028894648,RETURN,1,,return;,9,8190,,,1
146028894649,RETURN,1,,return;,9,8210,,,1
146028894650,RETURN,1,,return inner;,17,8288,,,1
146028894651,RETURN,-1,,return ternaryOp.empty() ? nullptr : ternaryOp.top();,5,8292,,,3
146028894652,RETURN,-1,,"return Token::simpleMatch(tok, ""[ ["") && tok->link() && tok->link()->previous() == tok->linkAt(1);",5,8297,,,1
146028894653,RETURN,-1,,"return Token::simpleMatch(tok, ""alignas ("") && tok->linkAt(1);",5,8302,,,1
146028894654,RETURN,1,,return tok->link();,9,8309,,,1
146028894655,RETURN,-1,,return tok->linkAt(1);,9,8311,,,1
146028894656,RETURN,-1,,return tok;,5,8313,,,3
146028894657,RETURN,1,,return true;,9,8319,,,1
146028894658,RETURN,1,,return true;,9,8321,,,1
146028894659,RETURN,1,,return true;,9,8323,,,1
146028894660,RETURN,1,,return true;,9,8325,,,1
146028894661,RETURN,-1,,return false;,5,8326,,,5
146028894662,RETURN,1,,return true;,13,8926,,,1
146028894663,RETURN,1,,return true;,13,8928,,,1
146028894664,RETURN,-1,,return false;,5,8932,,,2
146028894665,RETURN,-1,,return str;,5,8971,,,4
146028894666,RETURN,1,,return;,9,8977,,,1
146028894667,RETURN,1,,return false;,9,9015,,,1
146028894668,RETURN,1,,return false;,9,9017,,,1
146028894669,RETURN,-1,,"return end && Token::Match(end->link(), ""} (| %type%| )| [,;[({=]"");",5,9024,,,6
146028894670,RETURN,-1,,"return gcc ? Token::Match(tok, ""__attribute__|__attribute ("") : Token::Match(tok, ""__declspec|_declspec ("");",5,9187,,,1
146028894671,RETURN,-1,,return after;,5,9194,,,4
146028894672,RETURN,-1,,return vartok;,5,9214,,,6
146028894673,RETURN,1,,return nullptr;,9,9219,,,1
146028894674,RETURN,1,,return ftok;,13,9237,,,1
146028894675,RETURN,1,,return prev->link()->previous();,17,9244,,,1
146028894676,RETURN,1,,return prev->link()->tokAt(-2);,17,9246,,,1
146028894677,RETURN,1,,return prev->link()->tokAt(-2);,13,9249,,,1
146028894678,RETURN,1,,return tok->previous();,13,9251,,,1
146028894679,RETURN,-1,,return nullptr;,5,9253,,,6
146028894680,RETURN,1,,return;,9,9406,,,1
146028894681,RETURN,-1,,return ret;,17,9582,,,4
146028894682,RETURN,1,,return nullptr;,9,9661,,,1
146028894683,RETURN,-1,,return end;,5,9668,,,7
146028894684,RETURN,1,,return;,9,9674,,,1
146028894685,RETURN,-1,,"return ctr && startsWith(ctr->startPattern, ""std ::"");",5,9977,,,3
146028894686,RETURN,-1,,"return ptr && startsWith(ptr->name, ""std::"");",5,9983,,,3
146028894687,RETURN,1,,return;,9,9990,,,1
146028894688,RETURN,1,,return;,9,10044,,,1
146028894689,RETURN,1,,return;,9,10139,,,1
146028894690,RETURN,1,,return;,9,10175,,,1
146028894691,RETURN,1,,return;,9,10177,,,1
146028894692,RETURN,1,,return true;,13,10233,,,1
146028894693,RETURN,1,,return false;,17,10257,,,1
146028894694,RETURN,-1,,return true;,9,10260,,,4
146028894695,RETURN,-1,,return false;,5,10263,,,2
146028894696,RETURN,1,,return;,9,10269,,,1
146028894697,RETURN,1,,return;,9,10398,,,1
146028894698,RETURN,1,,return;,9,10474,,,1
146028894699,RETURN,1,,return;,17,10488,,,1
146028894700,RETURN,1,,return;,9,10544,,,1
146028894701,RETURN,1,,return tok->next();,17,10695,,,1
146028894702,RETURN,-1,,return tokLastEnd;,13,10696,,,2
146028894703,RETURN,-1,,return tokLastEnd;,5,10701,,,4
146028894704,RETURN,1,,return;,9,10707,,,1
146028894705,RETURN,1,,return;,17,10718,,,1
146028894706,RETURN,1,,return;,9,10748,,,1
146028894707,RETURN,1,,return true;,13,10772,,,1
146028894708,RETURN,-1,,return false;,5,10777,,,2
146028894709,RETURN,1,,return true;,13,10784,,,1
146028894710,RETURN,-1,,return false;,5,10789,,,2
146028894711,RETURN,-1,,return tok;,5,10802,,,4
146028894712,RETURN,1,,return;,9,10808,,,1
146028894713,RETURN,1,,return;,17,10838,,,1
146028894714,RETURN,1,,return;,17,10843,,,1
146028894715,RETURN,-1,,"return startsWith(d.str, ""#if"") &&
        d.linenr >= start->linenr() &&
        d.linenr <= end->linenr() &&
        start->fileIndex() < list.getFiles().size() &&
        d.file == list.getFiles()[start->fileIndex()];",9,10916,,,1
146028894716,RETURN,-1,,"return std::any_of(directives.cbegin(), directives.cend(), [&](const Directive& d) {
        return startsWith(d.str, ""#if"") &&
        d.linenr >= start->linenr() &&
        d.linenr <= end->linenr() &&
        start->fileIndex() < list.getFiles().size() &&
        d.file == list.getFiles()[start->fileIndex()];
    });",5,10915,,,3
146028894717,RETURN,-1,,"return d.linenr < bodyStart->linenr() && d.str == ""#pragma pack(1)"" && d.file == list.getFiles().front();",9,10929,,,1
146028894718,RETURN,-1,,"return std::any_of(directives.cbegin(), directives.cend(), [&](const Directive& d) {
        return d.linenr < bodyStart->linenr() && d.str == ""#pragma pack(1)"" && d.file == list.getFiles().front();
    });",5,10928,,,3
146028894719,RETURN,-1,,return s_empty_string;,9,83,,,2
146028894720,RETURN,-1,,return getFiles()[0];,5,85,,,2
146028894721,RETURN,-1,,"return Path::sameFileName(f, fileName);",9,119,,,1
146028894722,RETURN,1,,"return static_cast<int>(std::distance(mFiles.cbegin(), it));",9,122,,,1
146028894723,RETURN,-1,,return mFiles.size() - 1;,5,131,,,6
146028894724,RETURN,1,,return;,9,155,,,1
146028894725,RETURN,-1,,return;,13,168,,,2
146028894726,RETURN,1,,return;,9,188,,,1
146028894727,RETURN,1,,return;,9,206,,,1
146028894728,RETURN,1,,return;,9,227,,,1
146028894729,RETURN,1,,return;,9,248,,,1
146028894730,RETURN,1,,return tok2;,17,294,,,1
146028894731,RETURN,-1,,return tok2;,5,306,,,9
146028894732,RETURN,-1,,"return createTokensInternal(code, file0);",5,353,,,3
146028894733,RETURN,-1,,"return createTokensInternal(code, """");",5,367,,,3
146028894734,RETURN,-1,,return outputList.empty();,5,379,,,5
146028894735,RETURN,-1,,return (std::hash<std::string>{})(hashData);,5,448,,,3
146028894736,RETURN,1,,return false;,13,473,,,1
146028894737,RETURN,-1,,"return Token::Match(tok, ""%name%| ,|)"");",9,479,,,5
146028894738,RETURN,1,,return tok;,9,483,,,1
146028894739,RETURN,1,,return tok;,17,490,,,1
146028894740,RETURN,-1,,return vartok;,13,492,,,1
146028894741,RETURN,-1,,return vartok->linkAt(1)->next();,13,496,,,2
146028894742,RETURN,-1,,return tok;,5,500,,,7
146028894743,RETURN,1,,return false;,9,506,,,1
146028894744,RETURN,1,,return false;,9,509,,,1
146028894745,RETURN,1,,return false;,9,512,,,1
146028894746,RETURN,1,,return false;,9,516,,,1
146028894747,RETURN,1,,return false;,9,519,,,1
146028894748,RETURN,1,,return true;,9,522,,,1
146028894749,RETURN,1,,return false;,9,525,,,1
146028894750,RETURN,1,,return false;,9,528,,,1
146028894751,RETURN,1,,return false;,9,531,,,1
146028894752,RETURN,1,,return true;,9,534,,,1
146028894753,RETURN,1,,return false;,13,539,,,1
146028894754,RETURN,1,,return false;,13,541,,,1
146028894755,RETURN,1,,return true;,17,548,,,1
146028894756,RETURN,-1,,"return tok3->str() != "";"";",17,553,,,4
146028894757,RETURN,-1,,return res;,13,559,,,5
146028894758,RETURN,1,,return true;,13,563,,,1
146028894759,RETURN,1,,return false;,13,566,,,1
146028894760,RETURN,-1,,return false;,5,572,,,14
146028894761,RETURN,1,,return nullptr;,9,579,,,1
146028894762,RETURN,1,,return nullptr;,17,585,,,1
146028894763,RETURN,1,,return nullptr;,9,591,,,1
146028894764,RETURN,1,,return nullptr;,9,593,,,1
146028894765,RETURN,-1,,"return (tok && tok->str() == ""("") ? tok : nullptr;",5,596,,,8
146028894766,RETURN,-1,,return tok->isCpp11init() == TokenImpl::Cpp11init::CPP11INIT;,5,605,,,2
146028894767,RETURN,1,,return false;,13,639,,,1
146028894768,RETURN,1,,return true;,17,642,,,1
146028894769,RETURN,-1,,"return Token::simpleMatch(caseTok, ""case"");",9,647,,,6
146028894770,RETURN,1,,return false;,9,611,,,1
146028894771,RETURN,1,,return nameToken->isCpp11init() == TokenImpl::Cpp11init::CPP11INIT;,13,615,,,1
146028894772,RETURN,1,,return false;,9,621,,,1
146028894773,RETURN,1,,return true;,9,626,,,1
146028894774,RETURN,1,,return true;,13,634,,,1
146028894775,RETURN,1,,return false;,9,661,,,1
146028894776,RETURN,1,,return false;,9,663,,,1
146028894777,RETURN,1,,return false;,9,665,,,1
146028894778,RETURN,1,,return false;,9,667,,,1
146028894779,RETURN,1,,return false;,17,672,,,1
146028894780,RETURN,1,,return true;,9,680,,,1
146028894781,RETURN,1,,return false;,13,684,,,1
146028894782,RETURN,-1,,return true;,5,688,,,23
146028894783,RETURN,-1,,"return Token::Match(tok, ""{|;"");",5,695,,,2
146028894784,RETURN,-1,,return;,13,728,,,2
146028894785,RETURN,1,,return;,9,773,,,1
146028894786,RETURN,1,,return false;,17,946,,,1
146028894787,RETURN,1,,return true;,9,952,,,1
146028894788,RETURN,-1,,"return !Token::Match(parent, ""%type%"") || parent->isKeyword();",9,956,,,3
146028894789,RETURN,1,,return true;,9,960,,,1
146028894790,RETURN,-1,,"return tok->strAt(-1) == "")"" && iscast(tok->linkAt(-1), cpp);",5,962,,,5
146028894791,RETURN,-1,,"return !Token::Match(tok, ""new ::| %type%"");",13,977,,,5
146028894792,RETURN,-1,,return !findLambdaEndTokenWithoutAST(tok);,9,979,,,4
146028894793,RETURN,1,,return nullptr;,9,1469,,,1
146028894794,RETURN,1,,return nullptr;,9,1471,,,1
146028894795,RETURN,1,,return tok->astOperand1();,9,1473,,,1
146028894796,RETURN,1,,return nullptr;,9,1475,,,1
146028894797,RETURN,1,,return nullptr;,9,1478,,,1
146028894798,RETURN,-1,,return params->astOperand1();,5,1479,,,8
146028894799,RETURN,1,,return nullptr;,9,1484,,,1
146028894800,RETURN,1,,return nullptr;,9,1500,,,1
146028894801,RETURN,-1,,return tok->link()->next();,5,1501,,,7
146028894802,RETURN,-1,,return tok;,13,1563,,,2
146028894803,RETURN,1,,return tok;,13,1570,,,1
146028894804,RETURN,-1,,return nullptr;,5,1574,,,3
146028894805,RETURN,1,,return nullptr;,9,1582,,,1
146028894806,RETURN,1,,return tok2;,9,1585,,,1
146028894807,RETURN,-1,,return nullptr;,5,1586,,,6
146028894808,RETURN,1,,return tok2;,13,1599,,,1
146028894809,RETURN,-1,,return endTok;,9,1613,,,4
146028894810,RETURN,1,,return type;,13,1630,,,1
146028894811,RETURN,1,,return type->link()->linkAt(1)->next();,13,1634,,,1
146028894812,RETURN,-1,,return decl;,17,1671,,,11
146028894813,RETURN,1,,return nullptr;,21,1712,,,1
146028894814,RETURN,-1,,return tok2;,13,1722,,,2
146028894815,RETURN,1,,return nullptr;,13,1734,,,1
146028894816,RETURN,-1,,return endPar;,9,1768,,,28
146028894817,RETURN,1,,return tok;,9,1772,,,1
146028894818,RETURN,1,,return tok->linkAt(1);,9,1775,,,1
146028894819,RETURN,-1,,return tok;,13,1792,,,7
146028894820,RETURN,1,,return typetok;,13,1815,,,1
146028894821,RETURN,1,,return tok1;,13,1839,,,1
146028894822,RETURN,-1,,return endToken->previous();,9,1843,,,13
146028894823,RETURN,1,,return tok1;,13,1852,,,1
146028894824,RETURN,-1,,return endToken->previous();,9,1855,,,10
146028894825,RETURN,-1,,return tok;,5,1858,,,13
146028894826,RETURN,-1,,return mOrigFiles.at(tok->fileIndex());,5,2000,,,1
146028894827,RETURN,-1,,return mFiles.at(tok->fileIndex());,5,2005,,,1
146028894828,RETURN,-1,,"return ErrorMessage::FileLocation(tok, this).stringify();",5,2010,,,1
146028894829,RETURN,1,,return true;,9,2016,,,1
146028894830,RETURN,1,,return true;,13,2019,,,1
146028894831,RETURN,-1,,return false;,5,2021,,,3
146028894832,RETURN,1,,return;,9,2027,,,1
146028894833,RETURN,1,,return;,9,2042,,,1
146028894834,RETURN,1,,return false;,13,2163,,,1
146028894835,RETURN,1,,return true;,17,2167,,,1
146028894836,RETURN,-1,,return false;,9,2170,,,4
146028894837,RETURN,1,,return false;,13,2252,,,1
146028894838,RETURN,-1,,return cpp_keywords.find(str) != cpp_keywords.end();,13,2256,,,3
146028894839,RETURN,-1,,return latest_cpp_keywords.find(str) != latest_cpp_keywords.end();,9,2260,,,7
146028894840,RETURN,1,,return false;,9,2267,,,1
146028894841,RETURN,-1,,return c_keywords.find(str) != c_keywords.end();,9,2271,,,3
146028894842,RETURN,-1,,return latest_c_keywords.find(str) != latest_c_keywords.end();,5,2275,,,8
146028894843,RETURN,1,,return false;,9,2284,,,1
146028894844,RETURN,-1,,return mLang == Standards::Language::C;,5,2286,,,3
146028894845,RETURN,1,,return true;,9,2295,,,1
146028894846,RETURN,-1,,return mLang == Standards::Language::CPP;,5,2297,,,3
146028894847,RETURN,1,,return nullptr;,9,2314,,,1
146028894848,RETURN,1,,return nullptr;,9,2318,,,1
146028894849,RETURN,1,,return nullptr;,9,2320,,,1
146028894850,RETURN,1,,return tok;,17,2325,,,1
146028894851,RETURN,-1,,return (tok && endsWith.find(tok->str()) != std::string::npos) ? tok : nullptr;,9,2328,,,3
146028894852,RETURN,1,,return nullptr;,13,2362,,,1
146028894853,RETURN,-1,,return (tok && endsWith.find(tok->str()) != std::string::npos) ? tok : nullptr;,9,2363,,,12
146028894854,RETURN,-1,,return nullptr;,5,2365,,,7
146028894855,RETURN,1,,return (lhs.size() < rhs.size()) ? -1 : 1;,9,31,,,1
146028894856,RETURN,1,,return (c1 < c2) ? -1 : 1;,13,36,,,1
146028894857,RETURN,-1,,return 0;,5,38,,,3
146028894858,RETURN,-1,,return false;,17,47,,,1
146028894859,RETURN,-1,,return true;,5,51,,,2
146028894860,RETURN,-1,,return true;,13,100,,,1
146028894861,RETURN,-1,,return false;,13,105,,,1
146028894862,RETURN,-1,,"return matchglob(pattern, name);",9,120,,,1
146028894863,RETURN,-1,,"return std::any_of(begin(patterns), end(patterns), [&name](const std::string &pattern) {
        return matchglob(pattern, name);
    });",5,119,,,1
146028894864,RETURN,-1,,return std::tolower(c);,9,129,,,1
146028894865,RETURN,1,,"return """";",9,137,,,1
146028894866,RETURN,-1,,"return s.substr(beg, end - beg + 1);",5,139,,,6
146028894867,RETURN,-1,,return result;,5,184,,,4
146028894868,RETURN,-1,,return l;,5,201,,,6
146028894869,RETURN,1,,"return ""st"";",9,193,,,1
146028894870,RETURN,1,,"return ""nd"";",9,195,,,1
146028894871,RETURN,1,,"return ""rd"";",9,197,,,1
146028894872,RETURN,-1,,"return ""th"";",5,198,,,4
146028894873,RETURN,-1,,"return b ? ""true"" : ""false"";",5,348,,,1
146028894874,RETURN,1,,return false;,13,177,,,1
146028894875,RETURN,-1,,return v.isImpossible();,9,178,,,2
146028894876,RETURN,1,,return false;,9,204,,,1
146028894877,RETURN,1,,return false;,9,206,,,1
146028894878,RETURN,1,,return false;,9,208,,,1
146028894879,RETURN,1,,return false;,9,210,,,1
146028894880,RETURN,-1,,return true;,5,211,,,5
146028894881,RETURN,-1,,return value == std::numeric_limits<MathLib::bigint>::max() || value == std::numeric_limits<MathLib::bigint>::min();,5,277,,,1
146028894882,RETURN,1,,return;,9,286,,,1
146028894883,RETURN,1,,return false;,17,325,,,1
146028894884,RETURN,1,,return false;,17,327,,,1
146028894885,RETURN,-1,,return true;,13,328,,,3
146028894886,RETURN,1,,return {*v};,13,321,,,1
146028894887,RETURN,-1,,return result;,9,330,,,4
146028894888,RETURN,1,,return;,13,344,,,1
146028894889,RETURN,-1,,return ValueFlow::Value{i};,13,354,,,1
146028894890,RETURN,-1,,return r;,9,356,,,5
146028894891,RETURN,-1,,return result;,5,358,,,4
146028894892,RETURN,1,,return {v->intvalue};,13,365,,,1
146028894893,RETURN,-1,,return std::vector<MathLib::bigint>{};,9,366,,,2
146028894894,RETURN,-1,,"return parseCompareInt(tok, true_value, false_value, [](const Token* t) -> std::vector<MathLib::bigint> {
        if (const ValueFlow::Value* v = t->getKnownValue(Value::ValueType::INT))
            return {v->intvalue};
        return std::vector<MathLib::bigint>{};
    });",5,363,,,1
146028894895,RETURN,1,,return false;,9,373,,,1
146028894896,RETURN,1,,return true;,9,377,,,1
146028894897,RETURN,1,,return unknownFunction.empty() || unknown;,9,380,,,1
146028894898,RETURN,-1,,return false;,5,381,,,7
146028894899,RETURN,-1,,return i1 * dim.num;,17,440,,,1
146028894900,RETURN,1,,return 0;,17,438,,,1
146028894901,RETURN,1,,return 0;,13,451,,,1
146028894902,RETURN,-1,,return total;,5,453,,,5
146028894903,RETURN,1,,return 1;,9,459,,,1
146028894904,RETURN,-1,,return x + 1;,5,467,,,9
146028894905,RETURN,-1,,"return std::max(max, a);",13,483,,,3
146028894906,RETURN,-1,,return v;,17,490,,,2
146028894907,RETURN,-1,,return 0;,9,474,,,1
146028894908,RETURN,-1,,return align == 0 ? 0 : bitCeil(align);,9,478,,,3
146028894909,RETURN,-1,,"return total + accumulateStructMembers(vt.typeScope, accHelper);",9,493,,,6
146028894910,RETURN,1,,return settings.platform.sizeof_pointer;,9,496,,,1
146028894911,RETURN,-1,,return 0;,5,497,,,5
146028894912,RETURN,1,,return 0;,17,533,,,1
146028894913,RETURN,-1,,"return vt.typeScope->type == ScopeType::eUnion ? std::max(total, n) : total + padding + n;",13,536,,,9
146028894914,RETURN,-1,,return v;,17,543,,,2
146028894915,RETURN,-1,,return 0;,9,504,,,1
146028894916,RETURN,1,,return settings.platform.sizeof_pointer;,9,507,,,1
146028894917,RETURN,1,,return 1;,9,509,,,1
146028894918,RETURN,1,,return settings.platform.sizeof_short;,9,511,,,1
146028894919,RETURN,1,,return settings.platform.sizeof_wchar_t;,9,513,,,1
146028894920,RETURN,1,,return settings.platform.sizeof_int;,9,515,,,1
146028894921,RETURN,1,,return settings.platform.sizeof_long;,9,517,,,1
146028894922,RETURN,1,,return settings.platform.sizeof_long_long;,9,519,,,1
146028894923,RETURN,1,,return settings.platform.sizeof_float;,9,521,,,1
146028894924,RETURN,1,,return settings.platform.sizeof_double;,9,523,,,1
146028894925,RETURN,1,,return settings.platform.sizeof_long_double;,9,525,,,1
146028894926,RETURN,1,,return 3 * settings.platform.sizeof_pointer;,9,527,,,1
146028894927,RETURN,1,,return 0;,13,547,,,1
146028894928,RETURN,1,,return 0;,13,550,,,1
146028894929,RETURN,-1,,return total;,9,552,,,11
146028894930,RETURN,-1,,return 0;,5,554,,,14
146028894931,RETURN,-1,,return tok && (!tok->hasKnownIntValue() || tok->getKnownIntValue() != 0);,5,652,,,1
146028894932,RETURN,1,,return nullptr;,9,658,,,1
146028894933,RETURN,1,,return nullptr;,9,660,,,1
146028894934,RETURN,1,,return tok->astParent()->astOperand1();,9,662,,,1
146028894935,RETURN,1,,return tok->astParent()->astOperand2();,9,664,,,1
146028894936,RETURN,-1,,return nullptr;,5,665,,,5
146028894937,RETURN,-1,,return true;,9,886,,,3
146028894938,RETURN,1,,return false;,13,894,,,1
146028894939,RETURN,-1,,return true;,9,906,,,9
146028894940,RETURN,1,,return false;,13,912,,,1
146028894941,RETURN,1,,return false;,13,914,,,1
146028894942,RETURN,1,,return false;,13,917,,,1
146028894943,RETURN,1,,return false;,13,921,,,1
146028894944,RETURN,-1,,return true;,9,926,,,11
146028894945,RETURN,-1,,return false;,5,929,,,4
146028894946,RETURN,1,,return result;,9,988,,,1
146028894947,RETURN,1,,return result;,9,990,,,1
146028894948,RETURN,-1,,return result;,5,1004,,,6
146028894949,RETURN,1,,return false;,9,1010,,,1
146028894950,RETURN,1,,return false;,9,1013,,,1
146028894951,RETURN,-1,,return vt.type != ValueType::UNKNOWN_INT && vt.isIntegral();,5,1015,,,7
146028894952,RETURN,1,,return false;,9,1021,,,1
146028894953,RETURN,1,,return true;,9,1023,,,1
146028894954,RETURN,1,,return tok1->getKnownIntValue() == tok2->getKnownIntValue();,9,1025,,,1
146028894955,RETURN,-1,,return false;,5,1026,,,4
146028894956,RETURN,1,,return false;,29,1080,,,1
146028894957,RETURN,-1,,return v.isSymbolicValue();,25,1081,,,2
146028894958,RETURN,-1,,"return valueFlowGenericForward(startToken,
                                   endToken,
                                   makeAnalyzer(exprTok, std::move(value), settings),
                                   tokenlist,
                                   errorLogger,
                                   settings);",5,1248,,,2
146028894959,RETURN,-1,,return result;,5,1269,,,4
146028894960,RETURN,-1,,"return valueFlowForward(startToken, endToken, exprTok, std::move(v), tokenlist, errorLogger, settings, loc);",5,1287,,,7
146028894961,RETURN,-1,,return result;,5,1305,,,4
146028894962,RETURN,1,,"return parent == top || Token::simpleMatch(parent, "";"");",9,1351,,,1
146028894963,RETURN,-1,,return parent && parent->str() != op;,5,1352,,,10
146028894964,RETURN,1,,"return ""object"";",9,1361,,,1
146028894965,RETURN,-1,,return result;,5,1380,,,4
146028894966,RETURN,-1,,return msg;,5,1418,,,14
146028894967,RETURN,1,,return false;,13,1426,,,1
146028894968,RETURN,1,,return false;,13,1428,,,1
146028894969,RETURN,1,,return false;,13,1430,,,1
146028894970,RETURN,1,,return false;,13,1432,,,1
146028894971,RETURN,-1,,return true;,9,1433,,,5
146028894972,RETURN,-1,,return result;,5,1436,,,5
146028894973,RETURN,1,,return false;,9,1442,,,1
146028894974,RETURN,1,,return true;,9,1445,,,1
146028894975,RETURN,1,,return false;,9,1447,,,1
146028894976,RETURN,1,,return true;,9,1449,,,1
146028894977,RETURN,1,,return true;,9,1451,,,1
146028894978,RETURN,-1,,return false;,5,1452,,,8
146028894979,RETURN,1,,return false;,9,1459,,,1
146028894980,RETURN,1,,return false;,9,1461,,,1
146028894981,RETURN,1,,return false;,9,1463,,,1
146028894982,RETURN,-1,,return !hasUniqueOwnership(ptrTok);,5,1465,,,6
146028894983,RETURN,1,,return ValueFlow::Value{};,9,1473,,,1
146028894984,RETURN,-1,,return values.front();,5,1474,,,4
146028894985,RETURN,-1,,return vt.isTypeEqual(vartok->valueType());,13,1625,,,1
146028894986,RETURN,1,,return std::vector<ValueFlow::LifetimeToken> {};,9,1486,,,1
146028894987,RETURN,1,,return std::vector<ValueFlow::LifetimeToken>{};,9,1488,,,1
146028894988,RETURN,1,,"return {{tok, std::move(errorPath)}};",9,1491,,,1
146028894989,RETURN,1,,"return {{tok, std::move(errorPath)}};",9,1493,,,1
146028894990,RETURN,1,,"return {{tok, true, std::move(errorPath)}};",17,1498,,,1
146028894991,RETURN,-1,,"return {{tok, true, std::move(errorPath)}};",17,1501,,,2
146028894992,RETURN,1,,"return {{tok, true, std::move(errorPath)}};",21,1510,,,1
146028894993,RETURN,1,,"return getLifetimeTokens(vartok, escape, std::move(errorPath), pred, settings, depth - 1);",21,1512,,,1
146028894994,RETURN,1,,"return {{tok, true, std::move(errorPath)}};",21,1519,,,1
146028894995,RETURN,1,,"return ValueFlow::LifetimeToken::setAddressOf(
                        getLifetimeTokens(contok, escape, std::move(errorPath), pred, settings, depth - 1),
                        false);",21,1522,,,1
146028894996,RETURN,-1,,return std::vector<ValueFlow::LifetimeToken>{};,17,1525,,,8
146028894997,RETURN,-1,,return std::vector<ValueFlow::LifetimeToken> {};,17,1527,,,1
146028894998,RETURN,1,,"return {{tok, std::move(errorPath)}};",17,1534,,,1
146028894999,RETURN,1,,return std::vector<ValueFlow::LifetimeToken> {};,29,1549,,,1
146028895000,RETURN,1,,return std::vector<ValueFlow::LifetimeToken> {};,29,1553,,,1
146028895001,RETURN,-1,,return result;,13,1572,,,6
146028895002,RETURN,-1,,"return ValueFlow::LifetimeToken::setAddressOf(
                    getLifetimeTokens(tok->tokAt(-2)->astOperand1(), escape, std::move(errorPath), pred, settings, depth - 1),
                    false);",17,1579,,,2
146028895003,RETURN,1,,"return {{tok, std::move(errorPath)}};",13,1604,,,1
146028895004,RETURN,-1,,"return ValueFlow::LifetimeToken::setAddressOf(
                    getLifetimeTokens(v.tokvalue, escape, std::move(errorPath), pred, settings, depth - 1),
                    false);",17,1612,,,4
146028895005,RETURN,-1,,"return ValueFlow::LifetimeToken::setAddressOf(getLifetimeTokens(vartok, escape, std::move(errorPath), pred, settings, depth - 1),
                                                          !(astIsContainer(vartok) && Token::simpleMatch(vartok->astParent(), ""["")));",13,1617,,,1
146028895006,RETURN,1,,"return getLifetimeTokens(vartok, escape, std::move(errorPath), pred, settings, depth - 1);",13,1628,,,1
146028895007,RETURN,-1,,"return {{tok, std::move(errorPath)}};",5,1630,,,8
146028895008,RETURN,-1,,return false;,9,1636,,,1
146028895009,RETURN,-1,,"return getLifetimeTokens(tok, escape, std::move(errorPath), [](const Token*) {
        return false;
    }, settings);",5,1635,,,1
146028895010,RETURN,-1,,return result;,9,1645,,,2
146028895011,RETURN,-1,,return result;,5,1647,,,4
146028895012,RETURN,1,,return nullptr;,9,1654,,,1
146028895013,RETURN,1,,return nullptr;,9,1656,,,1
146028895014,RETURN,-1,,return lts.front().token;,5,1660,,,7
146028895015,RETURN,1,,return tok2->variable();,9,1667,,,1
146028895016,RETURN,-1,,return nullptr;,5,1668,,,4
146028895017,RETURN,-1,,"return getLifetimeVariable(tok, errorPath, settings, nullptr);",5,1674,,,2
146028895018,RETURN,-1,,return !val.isLifetimeValue();,5,1679,,,1
146028895019,RETURN,1,,return !vtParent->container->view;,9,1685,,,1
146028895020,RETURN,-1,,return vtParent->type == ValueType::CONTAINER;,5,1686,,,2
146028895021,RETURN,1,,return false;,9,1692,,,1
146028895022,RETURN,1,,return true;,9,1694,,,1
146028895023,RETURN,1,,return false;,9,1696,,,1
146028895024,RETURN,1,,return false;,9,1699,,,1
146028895025,RETURN,1,,return true;,13,1702,,,1
146028895026,RETURN,1,,return true;,17,1705,,,1
146028895027,RETURN,1,,return true;,17,1707,,,1
146028895028,RETURN,-1,,return false;,5,1711,,,6
146028895029,RETURN,1,,return false;,9,1717,,,1
146028895030,RETURN,1,,return false;,9,1719,,,1
146028895031,RETURN,1,,return true;,9,1721,,,1
146028895032,RETURN,1,,return true;,9,1723,,,1
146028895033,RETURN,1,,return true;,13,1726,,,1
146028895034,RETURN,1,,return true;,13,1728,,,1
146028895035,RETURN,1,,return true;,13,1730,,,1
146028895036,RETURN,-1,,return false;,5,1733,,,6
146028895037,RETURN,-1,,return tok;,5,1740,,,2
146028895038,RETURN,1,,return false;,9,1748,,,1
146028895039,RETURN,1,,return true;,13,1761,,,1
146028895040,RETURN,-1,,return !(start1 == x.second && start2 == y.second);,5,1767,,,9
146028895041,RETURN,-1,,"return isNotEqual(x, std::make_pair(tokenList.front(), tokenList.back()));",5,1774,,,6
146028895042,RETURN,1,,return false;,9,1779,,,1
146028895043,RETURN,1,,return false;,9,1781,,,1
146028895044,RETURN,-1,,"return isNotEqual(x, y->originalTypeName, cpp);",5,1782,,,3
146028895045,RETURN,1,,return true;,13,1791,,,1
146028895046,RETURN,1,,return true;,13,1797,,,1
146028895047,RETURN,1,,return true;,13,1799,,,1
146028895048,RETURN,1,,return true;,13,1801,,,1
146028895049,RETURN,-1,,return false;,5,1803,,,6
146028895050,RETURN,1,,return true;,9,1809,,,1
146028895051,RETURN,1,,return true;,9,1811,,,1
146028895052,RETURN,1,,return true;,9,1813,,,1
146028895053,RETURN,1,,return true;,13,1819,,,1
146028895054,RETURN,1,,return false;,13,1821,,,1
146028895055,RETURN,1,,return false;,13,1825,,,1
146028895056,RETURN,-1,,return true;,5,1827,,,12
146028895057,RETURN,1,,return false;,9,1840,,,1
146028895058,RETURN,1,,return false;,9,1842,,,1
146028895059,RETURN,1,,return false;,9,1844,,,1
146028895060,RETURN,1,,return false;,9,1846,,,1
146028895061,RETURN,-1,,"return Token::simpleMatch(scope->bodyStart->linkAt(-1)->astOperand2(), "":"");",5,1847,,,5
146028895062,RETURN,1,,return nullptr;,9,1853,,,1
146028895063,RETURN,1,,return nullptr;,9,1861,,,1
146028895064,RETURN,1,,return nullptr;,9,1863,,,1
146028895065,RETURN,1,,return innerScope->bodyEnd->next();,9,1869,,,1
146028895066,RETURN,-1,,return innerScope->bodyEnd;,5,1870,,,11
146028895067,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,9,1893,,,2
146028895068,RETURN,-1,,return end;,5,1909,,,8
146028895069,RETURN,-1,,return child->exprId() == expr->exprId();,17,1950,,,1
146028895070,RETURN,-1,,"return findAstNode(value.tokvalue, [&](const Token* child) {
                return child->exprId() == expr->exprId();
            });",13,1949,,,1
146028895071,RETURN,-1,,return;,9,1919,,,5
146028895072,RETURN,1,,return;,9,1925,,,1
146028895073,RETURN,1,,return;,13,1930,,,1
146028895074,RETURN,1,,return;,13,1933,,,1
146028895075,RETURN,1,,return;,13,1937,,,1
146028895076,RETURN,1,,return;,13,1940,,,1
146028895077,RETURN,-1,,return true;,13,2120,,,1
146028895078,RETURN,-1,,return true;,13,2215,,,1
146028895079,RETURN,-1,,return true;,13,2271,,,1
146028895080,RETURN,1,,return LifetimeStore{};,13,2045,,,1
146028895081,RETURN,1,,return LifetimeStore{};,13,2047,,,1
146028895082,RETURN,1,,return LifetimeStore{};,13,2050,,,1
146028895083,RETURN,-1,,return LifetimeStore{};,13,2060,,,2
146028895084,RETURN,-1,,"return LifetimeStore{argtok2, ""Passed to '"" + tok->expressionString() + ""'."", ValueFlow::Value::LifetimeKind::Object};",9,2063,,,11
146028895085,RETURN,1,,return false;,13,2075,,,1
146028895086,RETURN,1,,return false;,17,2081,,,1
146028895087,RETURN,1,,return false;,17,2083,,,1
146028895088,RETURN,1,,return false;,17,2097,,,1
146028895089,RETURN,-1,,return update;,9,2105,,,6
146028895090,RETURN,-1,,"return byRef(
            tok,
            tokenlist,
            errorLogger,
            settings,
            [](const Token*) {
            return true;
        },
            loc);",9,2114,,,1
146028895091,RETURN,1,,return false;,13,2134,,,1
146028895092,RETURN,1,,return false;,21,2174,,,1
146028895093,RETURN,1,,return false;,21,2176,,,1
146028895094,RETURN,-1,,return update;,9,2200,,,7
146028895095,RETURN,-1,,"return byVal(
            tok,
            tokenlist,
            errorLogger,
            settings,
            [](const Token*) {
            return true;
        },
            loc);",9,2209,,,1
146028895096,RETURN,1,,return update;,13,2230,,,1
146028895097,RETURN,1,,return update;,13,2232,,,1
146028895098,RETURN,1,,return update;,13,2234,,,1
146028895099,RETURN,-1,,return update;,9,2256,,,7
146028895100,RETURN,-1,,"return byDerefCopy(
            tok,
            tokenlist,
            errorLogger,
            settings,
            [](const Token*) {
            return true;
        },
            loc);",9,2265,,,1
146028895101,RETURN,-1,,return arg->valueType() && arg->valueType()->type == vt->type;,17,2293,,,1
146028895102,RETURN,1,,return false;,17,2295,,,1
146028895103,RETURN,1,,return true;,17,2297,,,1
146028895104,RETURN,1,,return true;,17,2299,,,1
146028895105,RETURN,1,,return false;,17,2301,,,1
146028895106,RETURN,1,,return false;,17,2303,,,1
146028895107,RETURN,1,,return vt->container->view;,17,2306,,,1
146028895108,RETURN,1,,"return hasBorrowingVariables(vt->typeScope->varlist, args, depth - 1);",17,2308,,,1
146028895109,RETURN,-1,,return true;,9,2310,,,2
146028895110,RETURN,1,,return true;,9,2288,,,1
146028895111,RETURN,-1,,"return std::any_of(vars.cbegin(), vars.cend(), [&](const Variable& var) {
        if (const ValueType* vt = var.valueType()) {
            if (vt->pointer > 0 &&
                std::none_of(args.begin(), args.end(), [vt](const Token* arg) {
                return arg->valueType() && arg->valueType()->type == vt->type;
            }))
                return false;
            if (vt->pointer > 0)
                return true;
            if (vt->reference != Reference::None)
                return true;
            if (vt->isPrimitive())
                return false;
            if (vt->isEnum())
                return false;
            // TODO: Check container inner type
            if (vt->type == ValueType::CONTAINER && vt->container)
                return vt->container->view;
            if (vt->typeScope)
                return hasBorrowingVariables(vt->typeScope->varlist, args, depth - 1);
        }
        return true;
    });",5,2289,,,2
146028895112,RETURN,1,,return;,17,2383,,,1
146028895113,RETURN,1,,return;,9,2323,,,1
146028895114,RETURN,1,,return;,9,2411,,,1
146028895115,RETURN,-1,,return;,13,2468,,,2
146028895116,RETURN,1,,return;,13,2471,,,1
146028895117,RETURN,1,,return;,13,2532,,,1
146028895118,RETURN,1,,return;,13,2534,,,1
146028895119,RETURN,-1,,return;,17,2545,,,1
146028895120,RETURN,1,,return false;,9,2561,,,1
146028895121,RETURN,1,,return false;,9,2563,,,1
146028895122,RETURN,1,,return false;,9,2566,,,1
146028895123,RETURN,1,,return false;,9,2568,,,1
146028895124,RETURN,-1,,return scope->bodyStart == tok;,5,2569,,,7
146028895125,RETURN,1,,return nullptr;,9,2575,,,1
146028895126,RETURN,1,,return nullptr;,9,2595,,,1
146028895127,RETURN,-1,,return f;,5,2596,,,7
146028895128,RETURN,-1,,return !var.isStatic();,21,2647,,,1
146028895129,RETURN,1,,return;,21,2650,,,1
146028895130,RETURN,1,,return;,21,2653,,,1
146028895131,RETURN,1,,return;,9,2606,,,1
146028895132,RETURN,1,,return;,9,2608,,,1
146028895133,RETURN,1,,return;,13,2611,,,1
146028895134,RETURN,1,,return;,13,2613,,,1
146028895135,RETURN,-1,,return;,9,2627,,,6
146028895136,RETURN,1,,return;,9,2631,,,1
146028895137,RETURN,1,,return;,9,2671,,,1
146028895138,RETURN,1,,return;,9,2673,,,1
146028895139,RETURN,1,,return;,13,2738,,,1
146028895140,RETURN,-1,,return getArguments(capture);,9,2779,,,1
146028895141,RETURN,-1,,return capture && bodyTok;,9,2783,,,1
146028895142,RETURN,1,,return false;,9,2790,,,1
146028895143,RETURN,1,,return false;,9,2792,,,1
146028895144,RETURN,1,,return true;,9,2794,,,1
146028895145,RETURN,1,,return true;,9,2796,,,1
146028895146,RETURN,1,,return true;,9,2798,,,1
146028895147,RETURN,1,,return false;,9,2800,,,1
146028895148,RETURN,-1,,return astIsPointer(tok->astParent()) || astIsContainerView(tok->astParent());,5,2801,,,7
146028895149,RETURN,1,,return false;,13,2809,,,1
146028895150,RETURN,-1,,return vt.container->view;,9,2810,,,2
146028895151,RETURN,-1,,"return std::any_of(vtParents.cbegin(), vtParents.cend(), [&](const ValueType& vt) {
        if (!vt.container)
            return false;
        return vt.container->view;
    });",5,2807,,,3
146028895152,RETURN,-1,,return true;,9,2818,,,1
146028895153,RETURN,-1,,return vt.pointer > 0;,5,2822,,,4
146028895154,RETURN,1,,return false;,21,2845,,,1
146028895155,RETURN,1,,return false;,21,2847,,,1
146028895156,RETURN,1,,return false;,21,2849,,,1
146028895157,RETURN,1,,return false;,21,2852,,,1
146028895158,RETURN,1,,return false;,21,2854,,,1
146028895159,RETURN,1,,return false;,21,2856,,,1
146028895160,RETURN,-1,,return true;,17,2859,,,13
146028895161,RETURN,1,,return;,21,2865,,,1
146028895162,RETURN,1,,return;,21,2893,,,1
146028895163,RETURN,-1,,return true;,25,2907,,,1
146028895164,RETURN,1,,return false;,21,2915,,,1
146028895165,RETURN,1,,return true;,21,2917,,,1
146028895166,RETURN,1,,return false;,25,2920,,,1
146028895167,RETURN,1,,return false;,25,2923,,,1
146028895168,RETURN,1,,return false;,25,2925,,,1
146028895169,RETURN,-1,,return exprDependsOnThis(tok2);,21,2926,,,6
146028895170,RETURN,1,,return exprDependsOnThis(tok2);,21,2929,,,1
146028895171,RETURN,-1,,return false;,17,2930,,,5
146028895172,RETURN,1,,return false;,9,3104,,,1
146028895173,RETURN,1,,return false;,9,3119,,,1
146028895174,RETURN,1,,return false;,9,3121,,,1
146028895175,RETURN,1,,return false;,9,3123,,,1
146028895176,RETURN,-1,,return true;,5,3128,,,12
146028895177,RETURN,-1,,"return Token::Match(varTok, ""%varid% . %name% ("", varId) &&
           varTok->next()->originalName().empty();",5,3134,,,3
146028895178,RETURN,-1,,return tok;,5,3143,,,4
146028895179,RETURN,1,,return nullptr;,9,3149,,,1
146028895180,RETURN,1,,return nullptr;,9,3154,,,1
146028895181,RETURN,-1,,return nextAfterAstRightmostLeaf(parent);,5,3155,,,6
146028895182,RETURN,1,,return;,9,3161,,,1
146028895183,RETURN,1,,return tok;,13,3243,,,1
146028895184,RETURN,-1,,return nullptr;,5,3245,,,2
146028895185,RETURN,-1,,return v;,5,3268,,,8
146028895186,RETURN,1,,return false;,17,3278,,,1
146028895187,RETURN,1,,return false;,17,3280,,,1
146028895188,RETURN,1,,return false;,17,3282,,,1
146028895189,RETURN,-1,,return true;,13,3283,,,4
146028895190,RETURN,-1,,return conds;,5,3286,,,4
146028895191,RETURN,1,,return false;,9,3292,,,1
146028895192,RETURN,-1,,"return Token::Match(endToken->tokAt(-2), ""break|continue ;"");",5,3293,,,2
146028895193,RETURN,1,,return nullptr;,9,3299,,,1
146028895194,RETURN,-1,,return scope;,5,3303,,,5
146028895195,RETURN,-1,,return;,9,3324,,,2
146028895196,RETURN,1,,return src->pointer != dst->pointer;,9,3438,,,1
146028895197,RETURN,1,,return false;,9,3440,,,1
146028895198,RETURN,1,,return true;,13,3445,,,1
146028895199,RETURN,1,,return true;,13,3447,,,1
146028895200,RETURN,1,,return src->typeScope != dst->typeScope;,13,3450,,,1
146028895201,RETURN,-1,,return true;,9,3452,,,1
146028895202,RETURN,-1,,return false;,5,3454,,,4
146028895203,RETURN,-1,,return value;,5,3470,,,5
146028895204,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,9,3479,,,2
146028895205,RETURN,-1,,return result;,5,3481,,,3
146028895206,RETURN,1,,return true;,21,3517,,,1
146028895207,RETURN,1,,return var->isStatic();,21,3519,,,1
146028895208,RETURN,-1,,return !var->isArgument();,17,3520,,,3
146028895209,RETURN,-1,,return child->isIncompleteVar();,17,3525,,,1
146028895210,RETURN,1,,return nullptr;,9,3550,,,1
146028895211,RETURN,1,,return nullptr;,9,3552,,,1
146028895212,RETURN,1,,return nullptr;,9,3554,,,1
146028895213,RETURN,1,,return nullptr;,9,3556,,,1
146028895214,RETURN,1,,return tok;,13,3559,,,1
146028895215,RETURN,1,,return next;,17,3569,,,1
146028895216,RETURN,-1,,return nullptr;,5,3572,,,6
146028895217,RETURN,1,,return false;,25,3636,,,1
146028895218,RETURN,1,,return false;,25,3638,,,1
146028895219,RETURN,-1,,return ids.insert(v.tokvalue->exprId()).second;,21,3639,,,3
146028895220,RETURN,-1,,return value.isSymbolicValue() && value.tokvalue && value.tokvalue->exprId() == expr->exprId();,9,3676,,,1
146028895221,RETURN,-1,,return result;,9,3684,,,6
146028895222,RETURN,-1,,return ref.token->varId() == var->declarationId();,21,3748,,,1
146028895223,RETURN,-1,,return;,21,3757,,,2
146028895224,RETURN,1,,return ValueFlow::Value::Bound::Point;,13,3807,,,1
146028895225,RETURN,1,,return ValueFlow::Value::Bound::Point;,13,3813,,,1
146028895226,RETURN,1,,return ValueFlow::Value::Bound::Point;,13,3817,,,1
146028895227,RETURN,-1,,return result;,5,3819,,,6
146028895228,RETURN,1,,return false;,9,3825,,,1
146028895229,RETURN,1,,return false;,9,3827,,,1
146028895230,RETURN,1,,return true;,9,3829,,,1
146028895231,RETURN,1,,return false;,9,3832,,,1
146028895232,RETURN,-1,,return tok->varId() == prev->varId() && tok->variable()->nameToken() == prev;,5,3833,,,7
146028895233,RETURN,-1,,return !var->isPointer() && !var->isSmartPointer();,9,3854,,,1
146028895234,RETURN,-1,,return var->isVolatile();,9,3890,,,1
146028895235,RETURN,1,,return false;,17,3910,,,1
146028895236,RETURN,1,,return true;,17,3912,,,1
146028895237,RETURN,1,,return true;,17,3914,,,1
146028895238,RETURN,1,,return true;,17,3916,,,1
146028895239,RETURN,1,,return true;,17,3918,,,1
146028895240,RETURN,-1,,return false;,13,3919,,,6
146028895241,RETURN,1,,return false;,21,3931,,,1
146028895242,RETURN,-1,,return value.isIntValue();,17,3932,,,2
146028895243,RETURN,1,,return;,9,3846,,,1
146028895244,RETURN,1,,return;,9,3897,,,1
146028895245,RETURN,1,,return false;,21,3973,,,1
146028895246,RETURN,1,,return false;,21,3975,,,1
146028895247,RETURN,1,,return false;,21,3977,,,1
146028895248,RETURN,1,,return true;,21,3979,,,1
146028895249,RETURN,1,,return true;,21,3981,,,1
146028895250,RETURN,-1,,return false;,17,3982,,,6
146028895251,RETURN,1,,return values;,9,3964,,,1
146028895252,RETURN,-1,,return values;,5,3999,,,6
146028895253,RETURN,1,,return false;,9,4005,,,1
146028895254,RETURN,1,,return false;,9,4007,,,1
146028895255,RETURN,1,,return false;,9,4009,,,1
146028895256,RETURN,1,,return false;,9,4011,,,1
146028895257,RETURN,1,,return false;,9,4014,,,1
146028895258,RETURN,1,,return false;,9,4016,,,1
146028895259,RETURN,1,,return false;,9,4019,,,1
146028895260,RETURN,1,,return false;,9,4021,,,1
146028895261,RETURN,-1,,return true;,5,4022,,,13
146028895262,RETURN,1,,"return intersects(c2, c1);",9,4030,,,1
146028895263,RETURN,1,,return true;,13,4034,,,1
146028895264,RETURN,-1,,return false;,5,4036,,,3
146028895265,RETURN,-1,,return types.count(value.valueType) > 0;,17,4086,,,1
146028895266,RETURN,-1,,return value.valueType == ValueFlow::Value::ValueType::CONTAINER_SIZE;,21,4091,,,1
146028895267,RETURN,1,,return value.tokvalue->exprId() == tok->astOperand1()->exprId();,21,4096,,,1
146028895268,RETURN,-1,,return false;,17,4097,,,2
146028895269,RETURN,-1,,return child->exprId() == tok->astOperand1()->exprId();,21,4103,,,1
146028895270,RETURN,-1,,"return findAstNode(tok2,
                                   [&](const Token* child) {
                    return child->exprId() == tok->astOperand1()->exprId();
                });",17,4101,,,1
146028895271,RETURN,1,,return false;,21,4110,,,1
146028895272,RETURN,-1,,return isIncremental(value.tokvalue);,17,4111,,,2
146028895273,RETURN,1,,return value.tokvalue == tok->astOperand2();,25,4117,,,1
146028895274,RETURN,-1,,return false;,21,4118,,,2
146028895275,RETURN,-1,,return value.isUninitValue();,21,4125,,,1
146028895276,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,9,4176,,,2
146028895277,RETURN,-1,,return result;,5,4178,,,3
146028895278,RETURN,1,,return;,9,4212,,,1
146028895279,RETURN,1,,return;,9,4214,,,1
146028895280,RETURN,1,,return;,9,4216,,,1
146028895281,RETURN,1,,return false;,9,4224,,,1
146028895282,RETURN,1,,return false;,9,4226,,,1
146028895283,RETURN,-1,,"return Token::findmatch(endToken->link(), ""break|goto"", endToken);",5,4227,,,3
146028895284,RETURN,-1,,return v;,5,4234,,,3
146028895285,RETURN,-1,,return v.path > 0;,17,4269,,,1
146028895286,RETURN,-1,,return v.path == 0 || v.path == it->path;,17,4274,,,1
146028895287,RETURN,-1,,return astIsBool(vartok);,13,4263,,,1
146028895288,RETURN,1,,return 0;,17,4272,,,1
146028895289,RETURN,-1,,return it->path;,13,4276,,,5
146028895290,RETURN,-1,,return findPath(true_values) | findPath(false_values);,13,4282,,,2
146028895291,RETURN,-1,,return ctx;,13,4315,,,16
146028895292,RETURN,1,,return v.intvalue != 0;,25,4444,,,1
146028895293,RETURN,-1,,return false;,21,4445,,,2
146028895294,RETURN,-1,,"return Token::Match(tok2->astParent(), ""%assign%"") && astIsLHS(tok2);",25,4477,,,1
146028895295,RETURN,1,,return;,17,4398,,,1
146028895296,RETURN,1,,return;,17,4402,,,1
146028895297,RETURN,1,,return;,17,4407,,,1
146028895298,RETURN,1,,return;,17,4409,,,1
146028895299,RETURN,-1,,return;,17,4417,,,2
146028895300,RETURN,-1,,return;,17,4427,,,2
146028895301,RETURN,1,,return;,17,4431,,,1
146028895302,RETURN,1,,return;,21,4440,,,1
146028895303,RETURN,1,,return;,17,4449,,,1
146028895304,RETURN,-1,,return;,25,4464,,,2
146028895305,RETURN,-1,,return;,21,4488,,,3
146028895306,RETURN,-1,,return v.path == path && isNonConditionalPossibleIntValue(v);,17,4534,,,1
146028895307,RETURN,1,,return ChildrenToVisit::op1_and_op2;,17,4537,,,1
146028895308,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,13,4539,,,5
146028895309,RETURN,-1,,return v.isIntValue() || v.isFloatValue();,25,4585,,,1
146028895310,RETURN,-1,,return v.isImpossible();,29,4588,,,1
146028895311,RETURN,-1,,return v.isKnown() || v.isImpossible();,21,4841,,,1
146028895312,RETURN,1,,return;,29,4593,,,1
146028895313,RETURN,-1,,return;,21,4619,,,1
146028895314,RETURN,1,,return;,17,4646,,,1
146028895315,RETURN,-1,,return;,17,4653,,,5
146028895316,RETURN,1,,return;,17,4657,,,1
146028895317,RETURN,1,,return;,17,4660,,,1
146028895318,RETURN,1,,return;,21,4664,,,1
146028895319,RETURN,1,,return;,21,4666,,,1
146028895320,RETURN,1,,return;,21,4669,,,1
146028895321,RETURN,1,,return;,21,4671,,,1
146028895322,RETURN,1,,return;,21,4673,,,1
146028895323,RETURN,1,,return;,21,4681,,,1
146028895324,RETURN,1,,return;,21,4683,,,1
146028895325,RETURN,1,,return;,21,4688,,,1
146028895326,RETURN,1,,return;,21,4690,,,1
146028895327,RETURN,1,,return;,21,4697,,,1
146028895328,RETURN,1,,return;,21,4707,,,1
146028895329,RETURN,-1,,return;,17,4753,,,2
146028895330,RETURN,-1,,return;,17,4761,,,2
146028895331,RETURN,-1,,return;,21,4778,,,2
146028895332,RETURN,-1,,return;,25,4789,,,2
146028895333,RETURN,1,,return;,21,4794,,,1
146028895334,RETURN,1,,return;,21,4813,,,1
146028895335,RETURN,1,,return;,21,4839,,,1
146028895336,RETURN,1,,return;,29,4848,,,1
146028895337,RETURN,1,,return;,29,4850,,,1
146028895338,RETURN,-1,,"return valueFlowForward(start->next(), stop, exprTok, values, tokenlist, errorLogger, settings, loc);",9,4330,,,1
146028895339,RETURN,-1,,"return valueFlowForwardRecursive(top, exprTok, values, tokenlist, errorLogger, settings, loc);",9,4341,,,1
146028895340,RETURN,-1,,return tok;,13,4523,,,4
146028895341,RETURN,-1,,return tok;,9,4525,,,2
146028895342,RETURN,1,,return;,13,4531,,,1
146028895343,RETURN,1,,return;,17,4888,,,1
146028895344,RETURN,1,,return conds;,13,4898,,,1
146028895345,RETURN,1,,return {};,13,4914,,,1
146028895346,RETURN,-1,,return {std::move(cond)};,9,4920,,,12
146028895347,RETURN,-1,,return value.valueType == getType();,9,4927,,,1
146028895348,RETURN,-1,,return result;,9,4934,,,5
146028895349,RETURN,-1,,return ValueFlow::Value::ValueType::ITERATOR_END;,9,4940,,,1
146028895350,RETURN,-1,,return ValueFlow::Value::ValueType::ITERATOR_END;,9,4946,,,1
146028895351,RETURN,-1,,"return Token::Match(tok, ""%|<<|>>|&|^|~|%or%"");",5,4951,,,1
146028895352,RETURN,1,,return false;,9,4957,,,1
146028895353,RETURN,1,,return true;,9,4959,,,1
146028895354,RETURN,1,,return true;,9,4961,,,1
146028895355,RETURN,1,,return true;,9,4963,,,1
146028895356,RETURN,1,,return false;,9,4965,,,1
146028895357,RETURN,1,,return true;,9,4968,,,1
146028895358,RETURN,1,,return true;,9,4970,,,1
146028895359,RETURN,1,,return isIntegralOrPointer(tok->astOperand1()) && isIntegralOrPointer(tok->astOperand2());,9,4972,,,1
146028895360,RETURN,-1,,return false;,5,4973,,,9
146028895361,RETURN,1,,return false;,13,5019,,,1
146028895362,RETURN,-1,,return (astIsBool(tok->astOperand1()));,9,5020,,,2
146028895363,RETURN,1,,return tok;,13,5026,,,1
146028895364,RETURN,-1,,return tok->astOperand1();,9,5027,,,2
146028895365,RETURN,1,,return {};,13,5033,,,1
146028895366,RETURN,1,,return {};,13,5035,,,1
146028895367,RETURN,1,,return {};,13,5037,,,1
146028895368,RETURN,1,,return {};,13,5039,,,1
146028895369,RETURN,1,,return {};,13,5041,,,1
146028895370,RETURN,-1,,return result;,9,5075,,,11
146028895371,RETURN,-1,,return reassign ? ChildrenToVisit::done : ChildrenToVisit::op1_and_op2;,13,5107,,,2
146028895372,RETURN,1,,return false;,9,5095,,,1
146028895373,RETURN,1,,return false;,9,5098,,,1
146028895374,RETURN,1,,return false;,13,5110,,,1
146028895375,RETURN,-1,,return true;,5,5134,,,25
146028895376,RETURN,1,,return;,9,5151,,,1
146028895377,RETURN,-1,,return;,9,5156,,,2
146028895378,RETURN,1,,return;,9,5248,,,1
146028895379,RETURN,1,,return;,29,5369,,,1
146028895380,RETURN,-1,,return p.second.path != path;,13,5391,,,1
146028895381,RETURN,-1,,return !bail;,5,5396,,,12
146028895382,RETURN,1,,return;,9,5432,,,1
146028895383,RETURN,1,,return;,9,5437,,,1
146028895384,RETURN,-1,,return argvalues;,5,5531,,,5
146028895385,RETURN,1,,return;,13,5547,,,1
146028895386,RETURN,1,,return;,13,5558,,,1
146028895387,RETURN,1,,return;,9,5543,,,1
146028895388,RETURN,1,,return !v.isLocalLifetimeValue() && !v.isSubFunctionLifetimeValue();,25,5610,,,1
146028895389,RETURN,-1,,return false;,21,5611,,,2
146028895390,RETURN,1,,return;,9,5649,,,1
146028895391,RETURN,-1,,return (v.isIntValue() || v.isContainerSizeValue() || v.isFloatValue()) && v.isKnown();,9,5679,,,1
146028895392,RETURN,1,,return nullptr;,9,5677,,,1
146028895393,RETURN,1,,return nullptr;,9,5682,,,1
146028895394,RETURN,-1,,return std::addressof(*it);,5,5683,,,5
146028895395,RETURN,-1,,return v.equalValue(*result) && v.valueKind == result->valueKind;,13,5695,,,1
146028895396,RETURN,-1,,"return std::any_of(tok->values().begin(), tok->values().end(), [&](const ValueFlow::Value& v) {
            return v.equalValue(*result) && v.valueKind == result->valueKind;
        });",9,5694,,,1
146028895397,RETURN,1,,return nullptr;,9,5689,,,1
146028895398,RETURN,1,,return nullptr;,9,5692,,,1
146028895399,RETURN,1,,return nullptr;,9,5698,,,1
146028895400,RETURN,-1,,return result;,5,5699,,,6
146028895401,RETURN,1,,return;,13,5706,,,1
146028895402,RETURN,1,,return false;,9,5775,,,1
146028895403,RETURN,1,,return false;,9,5777,,,1
146028895404,RETURN,1,,return true;,9,5779,,,1
146028895405,RETURN,1,,return false;,9,5781,,,1
146028895406,RETURN,1,,return true;,9,5783,,,1
146028895407,RETURN,1,,return true;,9,5785,,,1
146028895408,RETURN,1,,return true;,13,5788,,,1
146028895409,RETURN,1,,return true;,13,5790,,,1
146028895410,RETURN,1,,return true;,13,5792,,,1
146028895411,RETURN,1,,return true;,21,5796,,,1
146028895412,RETURN,1,,return true;,21,5799,,,1
146028895413,RETURN,-1,,return false;,5,5803,,,8
146028895414,RETURN,-1,,return e.first;,9,5813,,,1
146028895415,RETURN,-1,,return locations.insert(e.first).second;,9,5821,,,1
146028895416,RETURN,-1,,return tok->varId() == var->declarationId();,9,5834,,,1
146028895417,RETURN,1,,return {};,9,5832,,,1
146028895418,RETURN,-1,,"return findTokensSkipDeadCode(library, start, scope->bodyEnd, [&](const Token* tok) {
        return tok->varId() == var->declarationId();
    });",5,5833,,,4
146028895419,RETURN,-1,,return tok->scope() == scope;,9,5874,,,1
146028895420,RETURN,1,,return start;,9,5842,,,1
146028895421,RETURN,1,,return start;,9,5845,,,1
146028895422,RETURN,1,,return first->previous();,9,5856,,,1
146028895423,RETURN,-1,,return isLoopExpression ? start : first->previous();,9,5870,,,4
146028895424,RETURN,1,,return first->previous();,9,5876,,,1
146028895425,RETURN,1,,return start;,9,5881,,,1
146028895426,RETURN,1,,return start;,9,5884,,,1
146028895427,RETURN,1,,return tok->linkAt(-1)->previous();,9,5888,,,1
146028895428,RETURN,-1,,return tok;,5,5889,,,20
146028895429,RETURN,1,,return false;,9,5984,,,1
146028895430,RETURN,1,,return false;,9,5986,,,1
146028895431,RETURN,1,,return false;,13,5991,,,1
146028895432,RETURN,1,,return false;,9,5994,,,1
146028895433,RETURN,1,,return false;,9,6002,,,1
146028895434,RETURN,1,,return false;,17,6009,,,1
146028895435,RETURN,1,,return false;,17,6011,,,1
146028895436,RETURN,1,,return false;,17,6013,,,1
146028895437,RETURN,1,,return false;,21,6018,,,1
146028895438,RETURN,1,,"return isContainerSizeChanged(arg->nameToken(),
                                                  scope->bodyStart,
                                                  scope->bodyEnd,
                                                  addressOf ? indirect + 1 : indirect,
                                                  settings,
                                                  depth - 1);",21,6020,,,1
146028895439,RETURN,-1,,return true;,13,6028,,,9
146028895440,RETURN,-1,,return (isChanged || inconclusive);,5,6034,,,18
146028895441,RETURN,1,,return nullptr;,9,6042,,,1
146028895442,RETURN,1,,return nullptr;,9,6044,,,1
146028895443,RETURN,1,,return nullptr;,9,6046,,,1
146028895444,RETURN,1,,return nullptr;,9,6049,,,1
146028895445,RETURN,1,,return nullptr;,9,6052,,,1
146028895446,RETURN,-1,,return varTok;,5,6061,,,13
146028895447,RETURN,1,,return expr;,9,6069,,,1
146028895448,RETURN,1,,return expr;,9,6071,,,1
146028895449,RETURN,1,,return expr;,9,6077,,,1
146028895450,RETURN,-1,,"return ValueFlow::solveExprValue(binaryTok, eval, value);",13,6082,,,2
146028895451,RETURN,-1,,"return ValueFlow::solveExprValue(binaryTok, eval, value);",13,6089,,,2
146028895452,RETURN,-1,,"return ValueFlow::solveExprValue(binaryTok, eval, value);",13,6095,,,3
146028895453,RETURN,-1,,"return ValueFlow::solveExprValue(binaryTok, eval, value);",13,6099,,,2
146028895454,RETURN,-1,,return expr;,5,6103,,,11
146028895455,RETURN,1,,return false;,9,6109,,,1
146028895456,RETURN,1,,return true;,9,6111,,,1
146028895457,RETURN,1,,return true;,9,6113,,,1
146028895458,RETURN,1,,return tok->valueType()->container->stdAssociativeLike;,9,6115,,,1
146028895459,RETURN,-1,,return true;,9,6126,,,17
146028895460,RETURN,-1,,return yield == Library::Container::Yield::NO_YIELD;,13,6131,,,3
146028895461,RETURN,-1,,"return isContainerSizeChangedByFunction(tok, indirect, settings, depth);",5,6140,,,8
146028895462,RETURN,1,,return true;,13,6154,,,1
146028895463,RETURN,-1,,return false;,5,6156,,,2
146028895464,RETURN,1,,return yield;,9,6238,,,1
146028895465,RETURN,1,,return yield;,9,6241,,,1
146028895466,RETURN,-1,,"return astFunctionYield(tok->astParent()->previous(), settings, &ftok);",5,6244,,,5
146028895467,RETURN,1,,return true;,13,6279,,,1
146028895468,RETURN,-1,,return !v.isIteratorValue();,9,6280,,,2
146028895469,RETURN,-1,,return values;,5,6282,,,2
146028895470,RETURN,1,,return {};,17,6291,,,1
146028895471,RETURN,-1,,return {std::move(cond)};,9,6310,,,3
146028895472,RETURN,1,,return true;,17,6324,,,1
146028895473,RETURN,1,,return true;,17,6326,,,1
146028895474,RETURN,1,,return true;,17,6328,,,1
146028895475,RETURN,1,,return true;,17,6330,,,1
146028895476,RETURN,1,,return true;,17,6332,,,1
146028895477,RETURN,-1,,return false;,13,6333,,,6
146028895478,RETURN,-1,,return values;,5,6355,,,3
146028895479,RETURN,-1,,return value;,5,6364,,,5
146028895480,RETURN,1,,"return {makeContainerSizeValue(v->intvalue, known)};",9,6370,,,1
146028895481,RETURN,-1,,return {};,5,6371,,,2
146028895482,RETURN,1,,"return {makeContainerSizeValue(args[0], known)};",13,6380,,,1
146028895483,RETURN,-1,,return getContainerValues(args[0]);,9,6382,,,1
146028895484,RETURN,1,,return result;,13,6386,,,1
146028895485,RETURN,1,,"return {makeContainerSizeValue(MathLib::bigint{0}, known)};",17,6392,,,1
146028895486,RETURN,1,,"return {makeContainerSizeValue(sizetok, known)};",21,6401,,,1
146028895487,RETURN,1,,"return {makeContainerSizeValue(Token::getStrLength(args[0]), known)};",17,6407,,,1
146028895488,RETURN,1,,"return {makeContainerSizeValue(args[1], known)};",17,6409,,,1
146028895489,RETURN,1,,return getContainerValues(args[0]);,17,6412,,,1
146028895490,RETURN,1,,"return {makeContainerSizeValue(args[2], known)};",17,6414,,,1
146028895491,RETURN,-1,,return {};,5,6418,,,2
146028895492,RETURN,1,,return true;,9,6424,,,1
146028895493,RETURN,-1,,return contType.isTypeEqual(&tokType) || tokType.type == ValueType::Type::UNKNOWN_TYPE;,5,6427,,,4
146028895494,RETURN,1,,"return {makeContainerSizeValue(MathLib::bigint{0}, known)};",9,6437,,,1
146028895495,RETURN,1,,"return getContainerSizeFromConstructorArgs(args, valueType->container, known);",9,6460,,,1
146028895496,RETURN,-1,,"return {makeContainerSizeValue(args.size(), known)};",5,6461,,,8
146028895497,RETURN,1,,"return {makeContainerSizeValue(MathLib::bigint{0}, known)};",9,6471,,,1
146028895498,RETURN,1,,"return getInitListSize(args[0], valueType, settings, known);",9,6474,,,1
146028895499,RETURN,-1,,"return getContainerSizeFromConstructorArgs(args, valueType->container, known);",5,6475,,,5
146028895500,RETURN,-1,,return scope;,5,6498,,,2
146028895501,RETURN,1,,return;,13,6580,,,1
146028895502,RETURN,1,,return;,17,6691,,,1
146028895503,RETURN,1,,return conds;,13,6701,,,1
146028895504,RETURN,1,,return {};,17,6710,,,1
146028895505,RETURN,1,,return {};,21,6714,,,1
146028895506,RETURN,-1,,return {std::move(cond)};,13,6724,,,14
146028895507,RETURN,1,,return {};,17,6737,,,1
146028895508,RETURN,1,,return {};,17,6739,,,1
146028895509,RETURN,-1,,return {std::move(cond)};,13,6747,,,14
146028895510,RETURN,-1,,return {};,9,6749,,,8
146028895511,RETURN,1,,return sizeValue;,13,6761,,,1
146028895512,RETURN,-1,,return sizeValue;,9,6787,,,14
146028895513,RETURN,-1,,return sizeValue;,9,6821,,,7
146028895514,RETURN,1,,return false;,9,6864,,,1
146028895515,RETURN,-1,,"return ValueFlow::getMinMaxValues(&vt, settings.platform, minvalue, maxvalue);",5,6868,,,10
146028895516,RETURN,1,,return;,9,6972,,,1
146028895517,RETURN,1,,return;,9,7017,,,1
146028895518,RETURN,-1,,return expr && expr->hasKnownValue() ? &expr->values().front() : nullptr;,5,7040,,,2
146028895519,RETURN,-1,,return run(pass);,13,7083,,,1
146028895520,RETURN,-1,,return run(pass);,17,7094,,,1
146028895521,RETURN,-1,,"return std::any_of(passes.begin(), passes.end(), [&](const ValuePtr<ValueFlowPass>& pass) {
            return run(pass);
        });",9,7082,,,1
146028895522,RETURN,1,,return true;,17,7096,,,1
146028895523,RETURN,-1,,return false;,9,7111,,,7
146028895524,RETURN,-1,,return true;,13,7119,,,1
146028895525,RETURN,1,,return false;,13,7122,,,1
146028895526,RETURN,-1,,return false;,9,7129,,,6
146028895527,RETURN,-1,,return n;,9,7137,,,4
146028895528,RETURN,-1,,return mName;,9,7195,,,1
146028895529,RETURN,-1,,return mCPP;,9,7202,,,1
146028895530,RETURN,-1,,"return {name, cpp, run};",5,7209,,,1
146028895531,RETURN,1,,"return ""Either the condition is redundant"";",9,7310,,,1
146028895532,RETURN,-1,,"return ""Either the switch case '"" + expr + ""' is redundant"";",9,7318,,,3
146028895533,RETURN,-1,,"return ""Either the condition '"" + condition->expressionString() + ""' is redundant"";",5,7320,,,3
146028895534,RETURN,1,,return nullptr;,13,7338,,,1
146028895535,RETURN,1,,return nullptr;,13,7340,,,1
146028895536,RETURN,-1,,return ret;,5,7342,,,5
146028895537,RETURN,-1,,return v.isSymbolicValue() && v.isPossible() && v.bound == ValueFlow::Value::Bound::Upper;,9,7363,,,1
146028895538,RETURN,1,,return {};,9,7351,,,1
146028895539,RETURN,1,,return {};,9,7354,,,1
146028895540,RETURN,1,,return {*indexValue};,9,7356,,,1
146028895541,RETURN,1,,return {};,9,7358,,,1
146028895542,RETURN,1,,return {};,9,7361,,,1
146028895543,RETURN,1,,return {};,9,7365,,,1
146028895544,RETURN,1,,return {};,9,7367,,,1
146028895545,RETURN,1,,return {};,9,7369,,,1
146028895546,RETURN,1,,return {};,9,7372,,,1
146028895547,RETURN,1,,return {};,9,7375,,,1
146028895548,RETURN,1,,return {};,9,7377,,,1
146028895549,RETURN,-1,,return {std::move(value)};,5,7380,,,18
146028895550,RETURN,1,,return {};,9,7388,,,1
146028895551,RETURN,1,,return result;,9,7391,,,1
146028895552,RETURN,1,,return result;,9,7393,,,1
146028895553,RETURN,-1,,"return isOutOfBoundsImpl(size, indexTok, true);",5,7394,,,8
146028895554,RETURN,-1,,return unknown && dependent;,13,101,,,1
146028895555,RETURN,-1,,return cs.dependent;,17,148,,,3
146028895556,RETURN,-1,,return tok->exprId() == child->exprId();,25,294,,,1
146028895557,RETURN,-1,,return match(child);,13,500,,,1
146028895558,RETURN,-1,,return v.isSymbolicValue() && currValue->equalValue(v);,13,516,,,1
146028895559,RETURN,-1,,return tok == ref.token;,13,636,,,1
146028895560,RETURN,-1,,return ProgramMemory{getProgramState()};,13,682,,,1
146028895561,RETURN,-1,,"return pms.get(tok, ctx, getProgramState());",17,690,,,1
146028895562,RETURN,-1,,return v.isKnown() && v.isContainerSizeValue();,17,695,,,1
146028895563,RETURN,-1,,return false;,9,66,,,1
146028895564,RETURN,1,,return value->indirect;,13,78,,,1
146028895565,RETURN,-1,,return 0;,9,79,,,4
146028895566,RETURN,-1,,return false;,9,83,,,1
146028895567,RETURN,-1,,return false;,9,86,,,1
146028895568,RETURN,-1,,return false;,9,89,,,1
146028895569,RETURN,-1,,return settings;,9,93,,,1
146028895570,RETURN,1,,return result;,13,109,,,1
146028895571,RETURN,1,,return result;,13,111,,,1
146028895572,RETURN,-1,,return result;,13,116,,,3
146028895573,RETURN,-1,,return result;,13,121,,,3
146028895574,RETURN,-1,,return result;,17,126,,,2
146028895575,RETURN,1,,return lhs;,17,130,,,1
146028895576,RETURN,1,,return rhs;,17,133,,,1
146028895577,RETURN,-1,,return result;,13,139,,,10
146028895578,RETURN,-1,,return result;,13,155,,,6
146028895579,RETURN,-1,,return result;,9,172,,,14
146028895580,RETURN,1,,return ValueFlow::Value::MoveKind::NonMovedVariable;,13,178,,,1
146028895581,RETURN,1,,return ValueFlow::Value::MoveKind::NonMovedVariable;,13,181,,,1
146028895582,RETURN,1,,return ValueFlow::Value::MoveKind::NonMovedVariable;,13,184,,,1
146028895583,RETURN,1,,return ValueFlow::Value::MoveKind::MovedVariable;,13,186,,,1
146028895584,RETURN,1,,return ValueFlow::Value::MoveKind::ForwardedVariable;,13,188,,,1
146028895585,RETURN,-1,,return ValueFlow::Value::MoveKind::NonMovedVariable;,9,190,,,10
146028895586,RETURN,1,,return read;,17,199,,,1
146028895587,RETURN,1,,return read;,17,207,,,1
146028895588,RETURN,1,,return read | Action::Invalid;,13,211,,,1
146028895589,RETURN,1,,return read | Action::Inconclusive;,13,213,,,1
146028895590,RETURN,1,,return read | Action::Invalid;,17,216,,,1
146028895591,RETURN,1,,return Action::Idempotent;,21,222,,,1
146028895592,RETURN,-1,,return Action::Invalid;,13,224,,,3
146028895593,RETURN,-1,,return read;,9,226,,,11
146028895594,RETURN,1,,return Action::Invalid;,13,233,,,1
146028895595,RETURN,1,,return Action::Invalid;,17,250,,,1
146028895596,RETURN,-1,,return Action::None;,9,251,,,4
146028895597,RETURN,1,,return Action::Invalid;,13,256,,,1
146028895598,RETURN,-1,,return Action::None;,9,257,,,2
146028895599,RETURN,1,,return Action::None;,13,263,,,1
146028895600,RETURN,1,,return Action::None;,13,265,,,1
146028895601,RETURN,1,,return Action::None;,13,269,,,1
146028895602,RETURN,1,,return Action::None;,17,272,,,1
146028895603,RETURN,1,,return Action::None;,17,274,,,1
146028895604,RETURN,-1,,return Action::Read | Action::Write;,13,275,,,3
146028895605,RETURN,-1,,return a;,17,298,,,6
146028895606,RETURN,-1,,return Action::Read | Action::Write | Action::Incremental;,13,304,,,1
146028895607,RETURN,-1,,return Action::None;,9,306,,,11
146028895608,RETURN,1,,return;,13,311,,,1
146028895609,RETURN,1,,return;,13,313,,,1
146028895610,RETURN,1,,return;,13,316,,,1
146028895611,RETURN,-1,,return true;,9,362,,,1
146028895612,RETURN,1,,return Action::None;,13,375,,,1
146028895613,RETURN,1,,return Action::Match;,13,377,,,1
146028895614,RETURN,1,,return Action::Read;,13,379,,,1
146028895615,RETURN,1,,return analyzeLifetime(tok->astParent());,13,381,,,1
146028895616,RETURN,-1,,return Action::None;,9,382,,,5
146028895617,RETURN,1,,return result;,13,389,,,1
146028895618,RETURN,-1,,return result;,9,403,,,4
146028895619,RETURN,1,,return Action::Invalid;,17,410,,,1
146028895620,RETURN,-1,,return Action::None;,13,413,,,1
146028895621,RETURN,-1,,return Action::None;,13,416,,,1
146028895622,RETURN,-1,,return Action::None;,13,419,,,1
146028895623,RETURN,-1,,return Action::Invalid;,13,421,,,1
146028895624,RETURN,-1,,return Action::None;,9,423,,,2
146028895625,RETURN,-1,,return s_empty_string;,13,439,,,2
146028895626,RETURN,-1,,return it->second;,9,441,,,6
146028895627,RETURN,1,,return tok->str();,13,447,,,1
146028895628,RETURN,-1,,return invertAssign(tok->str());,9,448,,,2
146028895629,RETURN,-1,,"return std::string{assign.cbegin(), assign.cend() - 1};",9,462,,,1
146028895630,RETURN,-1,,return T{};,13,471,,,2
146028895631,RETURN,1,,return static_cast<T>(y);,13,474,,,1
146028895632,RETURN,-1,,"return calculate<T, T>(removeAssign(assign), x, y, error);",9,475,,,3
146028895633,RETURN,1,,return false;,17,484,,,1
146028895634,RETURN,-1,,return false;,13,492,,,1
146028895635,RETURN,-1,,return !error;,9,494,,,4
146028895636,RETURN,-1,,"return findAstNode(tok, [&](const Token* child) {
            return match(child);
        });",9,499,,,1
146028895637,RETURN,1,,return false;,13,507,,,1
146028895638,RETURN,1,,return false;,13,509,,,1
146028895639,RETURN,1,,return false;,13,512,,,1
146028895640,RETURN,1,,return false;,13,518,,,1
146028895641,RETURN,-1,,return true;,17,550,,,2
146028895642,RETURN,-1,,return false;,9,553,,,12
146028895643,RETURN,1,,return a;,17,561,,,1
146028895644,RETURN,1,,return Action::Read;,13,565,,,1
146028895645,RETURN,1,,return w;,13,569,,,1
146028895646,RETURN,-1,,return isModified(tok);,9,572,,,8
146028895647,RETURN,1,,return Action::None;,13,577,,,1
146028895648,RETURN,1,,return Action::Inconclusive;,21,585,,,1
146028895649,RETURN,-1,,"return analyzeMatch(tok, d) | Action::Match;",17,587,,,1
146028895650,RETURN,1,,return Action::None;,21,595,,,1
146028895651,RETURN,1,,return Action::None;,17,599,,,1
146028895652,RETURN,1,,return Action::Inconclusive;,21,608,,,1
146028895653,RETURN,-1,,return a;,17,609,,,6
146028895654,RETURN,-1,,return isAliasModified(tok);,17,612,,,1
146028895655,RETURN,-1,,return Action::None;,13,614,,,9
146028895656,RETURN,1,,return Action::Inconclusive;,17,620,,,1
146028895657,RETURN,-1,,return a;,13,621,,,5
146028895658,RETURN,1,,return Action::Read | Action::SymbolicMatch;,13,624,,,1
146028895659,RETURN,-1,,return Action::None;,9,626,,,7
146028895660,RETURN,1,,return Action::Invalid;,13,631,,,1
146028895661,RETURN,1,,return a;,17,644,,,1
146028895662,RETURN,1,,return isThisModified(tok);,13,647,,,1
146028895663,RETURN,-1,,return isGlobalModified(tok);,13,652,,,1
146028895664,RETURN,-1,,return Action::None;,9,654,,,10
146028895665,RETURN,1,,return {static_cast<int>(v->intvalue)};,13,661,,,1
146028895666,RETURN,-1,,return result;,9,676,,,6
146028895667,RETURN,-1,,"return evaluateInt(tok, [&] {
            return ProgramMemory{getProgramState()};
        });",9,681,,,1
146028895668,RETURN,-1,,"return evaluateInt(tok, [&] {
                return pms.get(tok, ctx, getProgramState());
            });",13,689,,,1
146028895669,RETURN,1,,return {value->intvalue == 0};,17,698,,,1
146028895670,RETURN,1,,return {static_cast<int>(out)};,17,702,,,1
146028895671,RETURN,-1,,return {};,13,703,,,9
146028895672,RETURN,-1,,return {};,9,705,,,3
146028895673,RETURN,1,,return;,13,757,,,1
146028895674,RETURN,-1,,return {};,9,781,,,1
146028895675,RETURN,1,,return true;,17,800,,,1
146028895676,RETURN,-1,,return result;,5,805,,,6
146028895677,RETURN,1,,return false;,9,811,,,1
146028895678,RETURN,1,,return true;,9,813,,,1
146028895679,RETURN,1,,return true;,9,815,,,1
146028895680,RETURN,1,,"return bifurcate(tok->astOperand1(), varids, settings, depth) && bifurcate(tok->astOperand2(), varids, settings, depth);",9,817,,,1
146028895681,RETURN,1,,return true;,13,820,,,1
146028895682,RETURN,1,,return false;,13,823,,,1
146028895683,RETURN,1,,return false;,13,826,,,1
146028895684,RETURN,1,,return false;,13,828,,,1
146028895685,RETURN,1,,"return var->isArgument() || bifurcate(start->astOperand2(), varids, settings, depth - 1);",13,832,,,1
146028895686,RETURN,-1,,return false;,9,833,,,11
146028895687,RETURN,-1,,return false;,5,835,,,6
146028895688,RETURN,1,,return false;,13,853,,,1
146028895689,RETURN,1,,return false;,13,855,,,1
146028895690,RETURN,1,,return false;,13,857,,,1
146028895691,RETURN,1,,return false;,13,859,,,1
146028895692,RETURN,1,,return false;,13,861,,,1
146028895693,RETURN,-1,,"return astHasVar(val.tokvalue, tok->varId());",9,862,,,6
146028895694,RETURN,1,,return false;,9,843,,,1
146028895695,RETURN,1,,return false;,9,845,,,1
146028895696,RETURN,1,,return true;,9,847,,,1
146028895697,RETURN,1,,return false;,9,849,,,1
146028895698,RETURN,-1,,"return std::any_of(values.begin(), values.end(), [&](const ValueFlow::Value& val) {
        if (!val.isNonValue())
            return false;
        if (val.isInconclusive())
            return false;
        if (val.isLifetimeValue() && !val.isLocalLifetimeValue())
            return false;
        if (val.isLifetimeValue() && val.lifetimeKind != ValueFlow::Value::LifetimeKind::Address)
            return false;
        if (!Token::Match(val.tokvalue, "".|&|*|%var%""))
            return false;
        return astHasVar(val.tokvalue, tok->varId());
    });",5,851,,,5
146028895699,RETURN,-1,,return mIt->second;,17,881,,,1
146028895700,RETURN,-1,,return &mIt->second;,17,885,,,1
146028895701,RETURN,-1,,return *this;,17,891,,,2
146028895702,RETURN,-1,,return a.mIt == b.mIt;,17,895,,,1
146028895703,RETURN,-1,,return a.mIt != b.mIt;,17,899,,,1
146028895704,RETURN,-1,,return Iterator(mMap->begin());,13,911,,,1
146028895705,RETURN,-1,,return Iterator(mMap->end());,13,914,,,1
146028895706,RETURN,-1,,"return v.isSymbolicValue() && Token::Match(v.tokvalue, ""%oror%|&&"");",17,1012,,,1
146028895707,RETURN,-1,,return p.second.isLifetimeValue();,17,1024,,,1
146028895708,RETURN,1,,return true;,21,1031,,,1
146028895709,RETURN,1,,return true;,21,1033,,,1
146028895710,RETURN,1,,return true;,21,1035,,,1
146028895711,RETURN,-1,,return false;,17,1036,,,4
146028895712,RETURN,-1,,return vars;,9,933,,,1
146028895713,RETURN,1,,return nullptr;,13,938,,,1
146028895714,RETURN,1,,return nullptr;,13,941,,,1
146028895715,RETURN,-1,,return &it->second;,9,942,,,5
146028895716,RETURN,1,,return nullptr;,13,946,,,1
146028895717,RETURN,1,,return nullptr;,13,949,,,1
146028895718,RETURN,-1,,return &it->second;,9,950,,,5
146028895719,RETURN,1,,return true;,17,972,,,1
146028895720,RETURN,1,,return true;,17,974,,,1
146028895721,RETURN,-1,,return false;,9,976,,,4
146028895722,RETURN,1,,return false;,17,982,,,1
146028895723,RETURN,-1,,return true;,9,985,,,2
146028895724,RETURN,1,,return false;,17,990,,,1
146028895725,RETURN,-1,,return true;,9,993,,,2
146028895726,RETURN,1,,return true;,17,999,,,1
146028895727,RETURN,1,,return !p.second.isImpossible();,17,1001,,,1
146028895728,RETURN,-1,,return false;,9,1003,,,2
146028895729,RETURN,1,,return true;,13,1008,,,1
146028895730,RETURN,-1,,"return std::any_of(values_.cbegin(), values_.cend(), [](const ValueFlow::Value& v) {
                return v.isSymbolicValue() && Token::Match(v.tokvalue, ""%oror%|&&"");
            });",13,1011,,,3
146028895731,RETURN,-1,,return false;,9,1015,,,3
146028895732,RETURN,1,,return false;,13,1021,,,1
146028895733,RETURN,-1,,"return std::all_of(values.cbegin(), values.cend(), [](const std::pair<nonneg int, ValueFlow::Value>& p) {
                return p.second.isLifetimeValue();
            });",13,1023,,,1
146028895734,RETURN,1,,return true;,17,1039,,,1
146028895735,RETURN,1,,return false;,17,1041,,,1
146028895736,RETURN,-1,,"return bifurcate(condTok, varids, getSettings());",13,1045,,,9
146028895737,RETURN,-1,,return false;,9,1048,,,6
146028895738,RETURN,-1,,return values.count(tok->varId()) > 0;,9,1052,,,1
146028895739,RETURN,-1,,return ps;,9,1063,,,3
146028895740,RETURN,-1,,"return MultiValueFlowAnalyzer{args, settings};",5,1069,,,1
146028895741,RETURN,-1,,return x;,13,1115,,,1
146028895742,RETURN,-1,,return x+1;,13,1118,,,1
146028895743,RETURN,-1,,return !var->isLocal() && !var->isArgument() && !var->isConst();,13,1150,,,3
146028895744,RETURN,-1,,return varids;,9,1080,,,1
146028895745,RETURN,-1,,return aliases;,9,1084,,,1
146028895746,RETURN,-1,,return &value;,9,1088,,,1
146028895747,RETURN,-1,,return &value;,9,1091,,,1
146028895748,RETURN,1,,return false;,13,1101,,,1
146028895749,RETURN,1,,return false;,13,1103,,,1
146028895750,RETURN,-1,,return true;,9,1104,,,3
146028895751,RETURN,-1,,return {&x};,9,1125,,,1
146028895752,RETURN,1,,return false;,13,1130,,,1
146028895753,RETURN,1,,return true;,21,1138,,,1
146028895754,RETURN,1,,return true;,21,1140,,,1
146028895755,RETURN,-1,,return false;,9,1143,,,3
146028895756,RETURN,-1,,"return std::any_of(vars.cbegin(), vars.cend(), [] (const std::pair<nonneg int, const Variable*>& p) {
            const Variable* var = p.second;
            return !var->isLocal() && !var->isArgument() && !var->isConst();
        });",9,1148,,,3
146028895757,RETURN,1,,return false;,13,1156,,,1
146028895758,RETURN,-1,,return true;,9,1158,,,3
146028895759,RETURN,1,,return false;,13,1162,,,1
146028895760,RETURN,-1,,return true;,9,1164,,,3
146028895761,RETURN,1,,return true;,13,1169,,,1
146028895762,RETURN,1,,return !value.isKnown() && !value.isImpossible();,13,1171,,,1
146028895763,RETURN,-1,,return false;,9,1172,,,3
146028895764,RETURN,1,,return false;,13,1178,,,1
146028895765,RETURN,1,,return false;,13,1180,,,1
146028895766,RETURN,1,,return true;,13,1182,,,1
146028895767,RETURN,1,,return false;,13,1184,,,1
146028895768,RETURN,-1,,return cs.isUnknownDependent();,9,1186,,,7
146028895769,RETURN,1,,return false;,13,1192,,,1
146028895770,RETURN,1,,return value.isLifetimeValue();,13,1194,,,1
146028895771,RETURN,1,,return true;,17,1198,,,1
146028895772,RETURN,1,,return true;,17,1200,,,1
146028895773,RETURN,1,,return false;,17,1202,,,1
146028895774,RETURN,-1,,"return bifurcate(condTok, varids2, getSettings());",13,1206,,,8
146028895775,RETURN,-1,,return false;,9,1209,,,6
146028895776,RETURN,-1,,"return makeAnalyzer(tok, std::move(newValue), settings);",9,1215,,,4
146028895777,RETURN,-1,,return ChildrenToVisit::none;,17,1271,,,2
146028895778,RETURN,1,,return ChildrenToVisit::none;,25,1279,,,1
146028895779,RETURN,-1,,return ChildrenToVisit::op1_and_op2;,13,1286,,,8
146028895780,RETURN,-1,,"return !var || (!var->isLocal() && !var->isArgument()) || (deref && var->isArgument() && var->isPointer()) ||
               var->isStatic() || var->isReference() || var->isExtern();",9,1243,,,1
146028895781,RETURN,-1,,return;,13,1250,,,1
146028895782,RETURN,-1,,return true;,9,1291,,,1
146028895783,RETURN,1,,return true;,13,1296,,,1
146028895784,RETURN,-1,,return unknown;,9,1297,,,2
146028895785,RETURN,-1,,return ps;,9,1303,,,3
146028895786,RETURN,-1,,return tok->exprId() == expr->exprId();,9,1307,,,1
146028895787,RETURN,-1,,return dependOnThis;,9,1311,,,1
146028895788,RETURN,-1,,return !local;,9,1315,,,1
146028895789,RETURN,-1,,return expr->varId() > 0;,9,1319,,,1
146028895790,RETURN,-1,,"return SingleValueFlowAnalyzer::isAliasModified(tok, indirect);",9,1325,,,2
146028895791,RETURN,-1,,return false;,9,1335,,,1
146028895792,RETURN,-1,,"return isSameExpression(true, expr, tok, getSettings(), true, true);",9,1340,,,1
146028895793,RETURN,-1,,"return SameExpressionAnalyzer{e, std::move(val), s};",5,1346,,,1
146028895794,RETURN,-1,,return false;,9,1357,,,1
146028895795,RETURN,-1,,"return isOppositeCond(isNot, expr, tok, getSettings(), true, true);",9,1361,,,1
146028895796,RETURN,-1,,"return OppositeExpressionAnalyzer{pIsNot, e, std::move(val), s};",5,1367,,,1
146028895797,RETURN,1,,return false;,13,1388,,,1
146028895798,RETURN,-1,,"return ExpressionAnalyzer::isAlias(tok, inconclusive);",9,1389,,,2
146028895799,RETURN,-1,,return tok->astOperand1() && tok->astOperand1()->exprId() == expr->exprId() && submatch(tok);,9,1394,,,1
146028895800,RETURN,-1,,"return tok->exprId() == expr->exprId() && !(astIsLHS(tok) && submatch(tok->astParent(), false));",9,1398,,,1
146028895801,RETURN,-1,,return {};,9,1407,,,1
146028895802,RETURN,1,,return false;,13,1421,,,1
146028895803,RETURN,1,,return true;,13,1423,,,1
146028895804,RETURN,-1,,return tok->strAt(1) == varname;,9,1424,,,3
146028895805,RETURN,-1,,"return MemberExpressionAnalyzer{std::move(varname), e, std::move(val), p, s};",5,1430,,,1
146028895806,RETURN,-1,,return rhsval.isKnown() && rhsval.isContainerSizeValue();,21,1462,,,1
146028895807,RETURN,-1,,return rhsval.isKnown() && rhsval.isContainerSizeValue();,21,1497,,,1
146028895808,RETURN,-1,,"return tok->exprId() == expr->exprId() || (astIsIterator(tok) && isAliasOf(tok, expr->exprId()));",9,1439,,,1
146028895809,RETURN,1,,return Action::None;,13,1445,,,1
146028895810,RETURN,1,,return Action::None;,13,1447,,,1
146028895811,RETURN,1,,return Action::None;,13,1449,,,1
146028895812,RETURN,1,,return Action::None;,13,1451,,,1
146028895813,RETURN,1,,return Action::Read | Action::Write | Action::Incremental;,17,1458,,,1
146028895814,RETURN,1,,return Action::Read | Action::Write | Action::Incremental;,21,1464,,,1
146028895815,RETURN,1,,return Action::Read | Action::Write | Action::Incremental;,21,1471,,,1
146028895816,RETURN,-1,,return Action::None;,9,1474,,,10
146028895817,RETURN,1,,return;,13,1479,,,1
146028895818,RETURN,1,,return;,13,1481,,,1
146028895819,RETURN,1,,return;,13,1483,,,1
146028895820,RETURN,1,,return;,13,1485,,,1
146028895821,RETURN,-1,,return tok->valueType()->pointer;,13,1532,,,1
146028895822,RETURN,-1,,return ValueFlowAnalyzer::getIndirect(tok);,9,1534,,,2
146028895823,RETURN,1,,return read;,13,1541,,,1
146028895824,RETURN,1,,return Action::Invalid;,13,1543,,,1
146028895825,RETURN,1,,return Action::Invalid;,13,1545,,,1
146028895826,RETURN,1,,return read | Action::Invalid;,13,1547,,,1
146028895827,RETURN,-1,,return read;,9,1548,,,7
146028895828,RETURN,1,,return {v->intvalue};,13,1558,,,1
146028895829,RETURN,-1,,return {};,9,1559,,,2
146028895830,RETURN,-1,,"return ValueFlow::solveExprValue(
        expr,
        [](const Token* tok) -> std::vector<MathLib::bigint> {
        if (const ValueFlow::Value* v = tok->getKnownValue(ValueFlow::Value::ValueType::INT))
            return {v->intvalue};
        return {};
    },
        value);",5,1554,,,1
146028895831,RETURN,1,,"return ContainerExpressionAnalyzer(exprTok, std::move(value), settings);",9,1567,,,1
146028895832,RETURN,-1,,"return ExpressionAnalyzer(expr, std::move(value), settings);",5,1569,,,4
146028895833,RETURN,1,,"return ContainerExpressionAnalyzer(exprTok, std::move(value), settings);",9,1575,,,1
146028895834,RETURN,-1,,"return ExpressionAnalyzer(exprTok, std::move(value), settings);",5,1576,,,2
146028895835,RETURN,1,,return false;,13,47,,,1
146028895836,RETURN,-1,,return false;,13,70,,,26
146028895837,RETURN,-1,,return false;,13,93,,,1
146028895838,RETURN,-1,,return true;,9,96,,,5
146028895839,RETURN,1,,return value;,13,102,,,1
146028895840,RETURN,-1,,return value;,9,110,,,8
146028895841,RETURN,-1,,"return getSizeOf(valueType, settings);",9,117,,,3
146028895842,RETURN,-1,,return tok->linkAt(1);,21,166,,,5
146028895843,RETURN,-1,,return tok->next();,9,332,,,2
146028895844,RETURN,-1,,return value;,9,352,,,3
146028895845,RETURN,-1,,"return kind + "" "" + v.toString();",9,371,,,3
146028895846,RETURN,1,,return;,13,381,,,1
146028895847,RETURN,1,,return Token::getStrLength(tok);,13,390,,,1
146028895848,RETURN,1,,return 1;,13,392,,,1
146028895849,RETURN,1,,return v->intvalue;,13,394,,,1
146028895850,RETURN,1,,return valueFlowGetStrLength(v->tokvalue);,17,397,,,1
146028895851,RETURN,-1,,return 0;,9,399,,,5
146028895852,RETURN,-1,,return c ? c->getYield(tok->strAt(1)) : Library::Container::Yield::NO_YIELD;,13,56,,,4
146028895853,RETURN,-1,,return f->containerYield;,17,61,,,1
146028895854,RETURN,-1,,return Library::Container::Yield::NO_YIELD;,9,64,,,3
146028895855,RETURN,1,,return value;,13,70,,,1
146028895856,RETURN,1,,return value;,13,72,,,1
146028895857,RETURN,1,,return value;,13,74,,,1
146028895858,RETURN,1,,return value;,13,76,,,1
146028895859,RETURN,1,,return value;,13,78,,,1
146028895860,RETURN,1,,return value;,13,80,,,1
146028895861,RETURN,1,,return value;,13,85,,,1
146028895862,RETURN,-1,,return v;,9,95,,,22
146028895863,RETURN,1,,return nullptr;,13,102,,,1
146028895864,RETURN,1,,return parent->astOperand1();,13,106,,,1
146028895865,RETURN,1,,return nullptr;,13,108,,,1
146028895866,RETURN,1,,return ftok;,17,112,,,1
146028895867,RETURN,1,,return parent->next();,17,118,,,1
146028895868,RETURN,1,,return parent->astOperand1()->tokAt(2);,13,121,,,1
146028895869,RETURN,-1,,return nullptr;,9,122,,,6
146028895870,RETURN,-1,,return value.isIntValue() || value.isFloatValue();,9,126,,,1
146028895871,RETURN,-1,,"return !Token::Match(tok, ""+|-"");",9,162,,,1
146028895872,RETURN,1,,return false;,13,169,,,1
146028895873,RETURN,1,,return false;,13,171,,,1
146028895874,RETURN,1,,return false;,13,173,,,1
146028895875,RETURN,1,,return false;,13,175,,,1
146028895876,RETURN,-1,,return true;,9,176,,,7
146028895877,RETURN,1,,return true;,13,196,,,1
146028895878,RETURN,1,,return false;,13,199,,,1
146028895879,RETURN,-1,,return it->second.count(y) > 0;,9,200,,,7
146028895880,RETURN,1,,return false;,13,206,,,1
146028895881,RETURN,1,,return false;,13,208,,,1
146028895882,RETURN,1,,return true;,13,210,,,1
146028895883,RETURN,1,,return false;,13,212,,,1
146028895884,RETURN,1,,return true;,13,214,,,1
146028895885,RETURN,1,,return true;,13,216,,,1
146028895886,RETURN,-1,,return false;,9,217,,,7
146028895887,RETURN,-1,,"return !Token::simpleMatch(p, "","");",17,249,,,1
146028895888,RETURN,-1,,return ret ? ChildrenToVisit::done : ChildrenToVisit::op1_and_op2;,21,419,,,2
146028895889,RETURN,-1,,return value1.isFloatValue() ? static_cast<MathLib::bigint>(value1.floatValue) : value1.intvalue;,25,502,,,1
146028895890,RETURN,-1,,return value2.isFloatValue() ? static_cast<MathLib::bigint>(value2.floatValue) : value2.intvalue;,25,505,,,1
146028895891,RETURN,-1,,"return atok->getKnownIntValue() ==
                                        btok->getKnownIntValue();",41,539,,,1
146028895892,RETURN,1,,return;,13,229,,,1
146028895893,RETURN,1,,return;,13,238,,,1
146028895894,RETURN,1,,return;,13,241,,,1
146028895895,RETURN,1,,return;,13,245,,,1
146028895896,RETURN,-1,,return;,17,256,,,2
146028895897,RETURN,1,,return;,17,263,,,1
146028895898,RETURN,-1,,return;,13,327,,,7
146028895899,RETURN,1,,return;,17,332,,,1
146028895900,RETURN,-1,,return;,13,339,,,3
146028895901,RETURN,-1,,return;,17,347,,,2
146028895902,RETURN,1,,return;,21,354,,,1
146028895903,RETURN,-1,,return;,13,371,,,7
146028895904,RETURN,1,,return;,17,378,,,1
146028895905,RETURN,1,,return;,17,383,,,1
146028895906,RETURN,1,,return;,25,401,,,1
146028895907,RETURN,1,,return;,21,422,,,1
146028895908,RETURN,1,,return;,17,458,,,1
146028895909,RETURN,-1,,return;,17,464,,,2
146028895910,RETURN,-1,,return;,17,470,,,2
146028895911,RETURN,-1,,return;,17,476,,,2
146028895912,RETURN,-1,,return ss.str();,9,98,,,8
146028895913,RETURN,-1,,return MathLib::toString(intvalue);,13,104,,,3
146028895914,RETURN,-1,,return tokvalue->str();,13,106,,,6
146028895915,RETURN,-1,,return MathLib::toString(floatValue);,13,108,,,9
146028895916,RETURN,-1,,"return ""<Moved>"";",13,110,,,12
146028895917,RETURN,-1,,"return ""<Uninit>"";",13,112,,,15
146028895918,RETURN,-1,,"return ""size="" + MathLib::toString(intvalue);",13,115,,,20
146028895919,RETURN,-1,,"return ""start="" + MathLib::toString(intvalue);",13,117,,,23
146028895920,RETURN,-1,,"return ""end="" + MathLib::toString(intvalue);",13,119,,,26
146028895921,RETURN,-1,,"return ""lifetime="" + tokvalue->str();",13,121,,,29
146028895922,RETURN,-1,,return result;,13,129,,,4
146028895923,RETURN,-1,,"return ""NonMovedVariable"";",13,138,,,3
146028895924,RETURN,-1,,"return ""MovedVariable"";",13,140,,,6
146028895925,RETURN,-1,,"return ""ForwardedVariable"";",13,142,,,9
146028895926,RETURN,-1,,"return """";",9,144,,,2
146028895927,RETURN,-1,,"return ""Object"";",13,150,,,3
146028895928,RETURN,-1,,"return ""SubObject"";",13,152,,,6
146028895929,RETURN,-1,,"return ""Lambda"";",13,154,,,9
146028895930,RETURN,-1,,"return ""Iterator"";",13,156,,,12
146028895931,RETURN,-1,,"return ""Address"";",13,158,,,15
146028895932,RETURN,-1,,"return """";",9,160,,,2
146028895933,RETURN,1,,return true;,13,165,,,1
146028895934,RETURN,1,,return false;,13,167,,,1
146028895935,RETURN,1,,return false;,13,169,,,1
146028895936,RETURN,-1,,return tok1->exprId() == tok2->exprId();,9,170,,,4
146028895937,RETURN,-1,,"return ""Local"";",13,176,,,3
146028895938,RETURN,-1,,"return ""Argument"";",13,178,,,6
146028895939,RETURN,-1,,"return ""SubFunction"";",13,180,,,9
146028895940,RETURN,-1,,"return ""ThisPointer"";",13,182,,,12
146028895941,RETURN,-1,,"return ""ThisValue"";",13,184,,,15
146028895942,RETURN,-1,,"return """";",9,186,,,2
146028895943,RETURN,-1,,"return ""Point"";",13,192,,,3
146028895944,RETURN,-1,,"return ""Upper"";",13,194,,,6
146028895945,RETURN,-1,,"return ""Lower"";",13,196,,,9
146028895946,RETURN,-1,,"return """";",9,198,,,2
146028895947,RETURN,-1,,return s;,5,54,,,4
146028895948,RETURN,-1,,return 0;,5,76,,,2
146028895949,RETURN,-1,,return 1;,9,30,,,2
146028895950,RETURN,-1,,return 1;,9,36,,,2
146028895951,RETURN,-1,,return 0;,5,44,,,10
146028895952,RETURN,1,,return 0;,9,40,,,1
146028895953,RETURN,-1,,return ret;,5,46,,,11
146028895954,RETURN,-1,,"return ""var"" + std::to_string(1 + getValue(data, dataSize, 5));",5,51,,,1
146028895955,RETURN,-1,,return code;,5,69,,,3
146028895956,RETURN,-1,,"return generateExpression2_Op(data, dataSize, numberOfGlobalConstants);",9,81,,,3
146028895957,RETURN,-1,,return ret;,9,93,,,10
146028895958,RETURN,1,,"return ""("" + generateExpression2_Expr(data, dataSize, numberOfGlobalConstants, depth) + "")"";",13,98,,,1
146028895959,RETURN,1,,"return u + generateExpression2_lvalue(data, dataSize);",13,100,,,1
146028895960,RETURN,-1,,"return u + generateExpression2_Expr(data, dataSize, numberOfGlobalConstants, depth);",9,101,,,4
146028895961,RETURN,-1,,"return ""0"";",5,107,,,9
146028895962,RETURN,-1,,return lhs + comp[i] + rhs;,5,117,,,9
146028895963,RETURN,-1,,"return ""int f"" + std::to_string(++functionNumber) + ""()\\n""
           ""{\\n"";",5,124,,,2
146028895964,RETURN,-1,,return code;,5,203,,,5
146028895965,RETURN,-1,,return code;,5,228,,,6
146028895966,RETURN,-1,,return a + 4;,5,4,,,3
146028895967,RETURN,-1,,return 0;,5,11,,,4
146028895968,RETURN,-1,,return p + 4;,5,3,,,1
146028895969,RETURN,-1,,return 0;,5,10,,,4
146028895970,RETURN,-1,,return a[0];,5,8,,,4
146028895971,RETURN,-1,,return 0;,5,8,,,4
146028895972,RETURN,-1,,return a[0];,5,7,,,5
146028895973,RETURN,-1,,return a[0];,5,7,,,5
146028895974,RETURN,-1,,return 0;,5,11,,,3
146028895975,RETURN,-1,,return 0;,5,12,,,5
146028895976,RETURN,-1,,return 0;,5,6,,,4
146028895977,RETURN,-1,,return 0;,5,6,,,4
146028895978,RETURN,-1,,return result;,5,10,,,6
146028895979,RETURN,-1,,return result;,5,11,,,6
146028895980,RETURN,-1,,return 0;,5,10,,,2
146028895981,RETURN,-1,,return 0;,5,10,,,2
146028895982,RETURN,-1,,return s.empty();,5,3,,,1
146028895983,RETURN,-1,,return s.empty();,5,3,,,1
146028895984,RETURN,1,,return 0;,9,6,,,1
146028895985,RETURN,-1,,return 0;,5,8,,,4
146028895986,RETURN,1,,return 0;,9,6,,,1
146028895987,RETURN,-1,,return 0;,5,8,,,5
146028895988,RETURN,-1,,return 0;,5,3,,,1
146028895989,RETURN,-1,,return 0;,5,5,,,1
146028895990,RETURN,-1,,return 0;,5,42,,,31
146028895991,RETURN,-1,,return 0;,5,31,,,20
146028895992,RETURN,-1,,return 0;,5,43,,,25
146028895993,RETURN,-1,,return filename;,5,46,,,2
146028895994,RETURN,-1,,"return builddir(cppfile + "".o"");",5,56,,,3
146028895995,RETURN,-1,,return allObjfiles;,5,69,,,3
146028895996,RETURN,1,,return;,9,79,,,1
146028895997,RETURN,-1,,return;,9,103,,,2
146028895998,RETURN,1,,return err;,9,174,,,1
146028895999,RETURN,-1,,"return """";",5,181,,,10
146028896000,RETURN,-1,,return EXIT_FAILURE;,13,202,,,2
146028896001,RETURN,-1,,return EXIT_SUCCESS;,5,247,,,7
146028896002,RETURN,-1,,return outstr;,9,269,,,14
146028896003,RETURN,-1,,return outstr;,5,277,,,9
146028896004,RETURN,-1,,return (p1 != priorities.end() ? p1->second : 0) > (p2 != priorities.end() ? p2->second : 0);,9,294,,,5
146028896005,RETURN,-1,,return libfiles_prio;,5,296,,,10
146028896006,RETURN,-1,,return EXIT_FAILURE;,9,424,,,2
146028896007,RETURN,-1,,return EXIT_FAILURE;,9,432,,,2
146028896008,RETURN,-1,,return EXIT_FAILURE;,9,439,,,2
146028896009,RETURN,-1,,return EXIT_FAILURE;,9,446,,,2
146028896010,RETURN,-1,,return EXIT_FAILURE;,9,453,,,2
146028896011,RETURN,-1,,return EXIT_FAILURE;,9,458,,,2
146028896012,RETURN,-1,,return EXIT_FAILURE;,9,559,,,2
146028896013,RETURN,-1,,return 0;,5,845,,,182
146028896014,RETURN,-1,,return QApplication::exec();,5,29,,,5
146028896015,RETURN,1,,return;,9,110,,,1
146028896016,RETURN,-1,,return success;,5,255,,,16
146028896017,RETURN,-1,,"return runProcess(""wget"", QStringList{url});",5,260,,,1
146028896018,RETURN,-1,,"return runProcess(""tar"", args);",5,285,,,4
146028896019,RETURN,1,,return;,9,293,,,1
146028896020,RETURN,1,,return;,9,296,,,1
146028896021,RETURN,1,,return;,17,314,,,1
146028896022,RETURN,1,,return;,21,320,,,1
146028896023,RETURN,1,,return;,17,323,,,1
146028896024,RETURN,1,,return;,9,413,,,1
